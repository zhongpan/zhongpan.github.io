<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>钟潘的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhongpan.tech/"/>
  <updated>2021-03-25T02:36:16.475Z</updated>
  <id>http://zhongpan.tech/</id>
  
  <author>
    <name>钟潘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>年终总结-前端易用性规范</title>
    <link href="http://zhongpan.tech/2020/12/30/042-front-end-usability-specfication/"/>
    <id>http://zhongpan.tech/2020/12/30/042-front-end-usability-specfication/</id>
    <published>2020-12-30T05:42:10.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>从今年7月份开始，因为公司需要，亟需解决产品易用性痛点问题，我开始前端易用性改进工作，我总结了易用性的6个方面，梳理出24个改进点，在随后的版本中逐步落地，目前大部分改进点都得到落实，产品的易用性得到极大的改观，几个月的辛勤付出终有成果，心中甚是欣慰。与此同时，我也负责前端的设计开发以及前端负责人工作，还好自己的基本功扎实😊，虽然一直从事后端研发，极短的时间内，我已经可以娴熟的进行前端开发和解决各种疑难问题，而团队管理更是我擅长的，团队有成员对我说，你要是早点来就好了，我就可以学到更多东西，这真是对我最大的褒奖。短短几个月的时间，我已经把前端的代码翻了一遍，说实在，以前代码的规范性非常差，组件复用性更差，完全没有复用的思想，整个团队要提升的地方实在太多了。在开发过程中，我发现很多问题经常重复出现，例如残留数据的问题，一方面是状态管理使用不当，全部都是用的全局状态，另一方面是没有重置状态的意识。因此我将近几个月的经验总结成一份规范，不仅能够提升易用性而且可以避免很多前端Bug，也算是一份年终总结，希望对大家有所启发和帮助。</p><a id="more"></a><h2 id="一-前言">一.前言</h2><p>一个易用的界面会给人带来舒适的体验，同时也能够吸引用户，拉近用户与产品之间的距离，从而创造市场价值。易用性包含如下6个方面：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/0c1000c2-4c8b-4f68-8faf-57aa1f1f9151/index_files/4d880191-42a1-45ee-99ed-8520f18f8112.jpg" alt="img"></p><ul><li>可操作性：用户在这个界面中有很强控制力；</li><li>错误处理：用户很少会造成错误，他们从错误中走出很快；</li><li>效率：用户完成一个任务很快；</li><li>吸引力：这个界面很吸引人，让用户享受使用的过程；</li><li>可理解性：用户很容易理解他所看到的，对于一个新用户来说，学习如何在界面中操作很简单；</li><li>规范性：界面依从规范、标准。</li></ul><p>本规范围绕上述目标，从两个方面规范和指导设计开发过程，从而保证产品的易用性，第一方面是组件规范，主要解决吸引力和规范性问题，使得产品具有美观和一致的界面风格；第二方面是设计规范，主要解决可操作性、错误处理、效率、可理解性和规范性方面的问题，总结了最佳的交互设计实践，提升易用性的同时也能够避免很多前端Bug。</p><p>本规范主要面向UCD设计师和前端开发工程师，在进行原型设计和前端设计开发时需要严格遵循本规范。</p><h2 id="二-组件规范">二.组件规范</h2><p>每一个产品有自己的界面风格，这种风格主要体现在组件的视觉表现上，是一种产品显著区别于另一个产品的主要因素。当一种风格确定下来之后，需要通过组件规范形成统一的约束，使得产品风格能够保持一致。</p><p>组件规范以平面设计稿的方式呈现，详见[SVN](<a href="https://cloudsvn.fiberhome.com/develop_team/04" target="_blank" rel="noopener">https://cloudsvn.fiberhome.com/develop_team/04</a> Portal组/08\ 质量提升/前端设计规范/组件规范/FitOS_新规范.zip)，主要涵盖如下几个方面：</p><h3 id="1-布局和导航">1.布局和导航</h3><ul><li><p>页面结构</p></li><li><p>菜单</p><ol><li>主菜单最多二级，位置侧边栏或顶部，一级菜单有图标</li><li>面包屑，菜单帮助</li></ol></li><li><p>页面</p><ol><li>三级页签导航（可选）</li><li>列表页或概览页</li><li>详情页（可选）</li></ol></li><li><p>全局header</p></li></ul><h3 id="2-图标">2.图标</h3><ul><li>格式：svg，线框风格，单色（随主题色变化）</li><li>大小：</li><li>交互效果：hover，选中</li></ul><h3 id="3-颜色">3.颜色</h3><ul><li>主题色</li><li>辅助色</li><li>中性色</li><li>功能色</li><li>特殊色</li></ul><h3 id="4-字体字号">4.字体字号</h3><ul><li>字体</li><li>字号</li><li>加粗</li><li>行高</li></ul><h3 id="5-组件">5.组件</h3><ul><li>表格</li><li>按钮</li><li>页签</li><li>对话框</li><li>向导</li><li>表单</li></ul><h2 id="三-设计规范">三.设计规范</h2><p>设计规范主要从交互设计和开发实现的角度，总结最佳设计实践，提升用户的使用体验。设计规范分强制和建议级别，强制级别必须遵守，包括已有功能和新功能，建议级别可自行决定是否采用，但是一旦采用则必须所有功能保持一致。</p><h3 id="1-路由">1.路由</h3><ol><li><p>【强制】二级菜单，三级页签，详情页均有独立的URL，URL不能携带query参数。</p></li><li><p>【强制】详情页通过URL直接访问，不能从列表获取任何数据。</p></li><li><p>【强制】详情页的URL一般格式是：{列表页URL}/{id}，存在一些特殊情况，如有一些没有存库的资源，底层openstack详情接口需要同时传id和name，这时详情页的URL格式为：{列表页URL}/{id}/{name}，如遇其他特殊情况需要更新规范，列举在此。</p></li><li><p>【强制】凡是有详情页的，操作日志中需要能够支持跳转，删除操作除外，其他页面是否做跳转的原则：</p><ul><li>跳转确实对用户有帮助，能够通过跳转后的详情页查看有用的信息。</li><li>如果某种资源做过跳转，那么所有页面保持一致，例如私网的VPC做了跳转，那么其他页面的VPC也都做跳转。</li><li>跳转通过名字跳转，没有名字则使用id。</li></ul></li><li><p>【强制】点击一级菜单，展开二级菜单；点击二级菜单，显示对应列表页或者自动切换到三级页签的第一个页签；三级页签切换页签，展示相应列表页，URL也随之切换。</p></li><li><p>【强制】进入二级菜单后，二级菜单保持高亮。</p></li><li><p>【强制】列表页通过名字列链接跳转到详情页，没有名字则通过id列，如果列表已经包含了详情的所有信息，则可以不实现详情页。</p></li><li><p>【建议】详情页可以通过面包屑进行切换，不需要返回列表页再切换。</p></li></ol><h3 id="2-操控">2.操控</h3><ol><li>【建议】列表页和详情页都可以发起操作。</li><li>【建议】表格提供批量操作入口。</li><li>【强制】点击等事件不要进行传播，例如点击tooltip，不要传播到tooltip后面的组件。</li><li>【强制】操作流程中不能出现跳转到其他页面而中断当前流程，应该采用弹出对话框方式，保证当前操作流程能够继续。</li><li>【强制】全局header固定在顶部，滚动时总是固定在顶部。</li><li>【强制】需要控制tooltip显示的位置，不要遮盖按钮等用户交互元素。</li><li>【建议】当更多操作超过10个时，需对操作进行分组并横向排列，每列最多显示10个操作。</li><li>【建议】列表行操作，当操作小于等于4个时，全部固定显示，超过4个时，固定编辑，删除，其他放入更多。</li><li>【强制】不支持的操作不显示，对于固定显示的操作则置灰。</li><li>【建议】能够一页完成的就不要使用向导分多步完成。</li><li>【建议】新建父对象后直接跳转到详情页新建子对象。</li><li>【强制】下拉框当页面滚动时不能和选择器分离，而是虽则选择器滚动而滚动。</li><li>【建议】umi的loading是接口粒度，列表某行的操作未返回会阻塞其他行操作，此时需要自己实现行粒度的loading。</li><li>【强制】对话框完成时，操作失败则对话框不关闭，成功则关闭。</li><li>【强制】列表支持点击行任意位置选中，此时单元格事件优先级更高，如果响应单元格事件，则不再选中行，符合规则3。</li><li>【强制】列表不可选择的行置灰。</li></ol><h3 id="3-输入">3.输入</h3><ol><li>【建议】对于不太重要的字段提供默认值，如子网名称，作用不太大，可使用默认值。</li><li>【强制】对于可枚举数据，不要使用输入框，选项小于等于3项时，使用平铺的单选控件，大于3项时使用下拉选择控件。</li><li>【建议】IP段的输入根据掩码简化地址的输入。</li><li>【建议】IP地址池的输入要将复杂的语法转换为用户的交互输入，语法不直接暴露给用户。</li><li>【强制】下拉选择内容多于10项时提供搜索。</li><li>【强制】搜索输入框提供清除按钮。</li><li>【建议】在适当的地方提供拖拽功能：例如上传文件选择。</li><li>【建议】有明确范围的数值输入使用数字输入组件，输入超过最大值时自动变为最大值，输入小于最小值时自动变为最小值。</li><li>【强制】下拉选择内容显示不完整时需要tooltip。</li></ol><h3 id="4-提示与反馈">4.提示与反馈</h3><ol><li>【强制】所有用户输入，前端需要对长度、范围、格式进行本地校验，校验通过才能下发后台。</li><li>【强制】操作置灰提示方式是右侧放置问号图标，问号图标上tooltip给出提示。</li><li>【强制】按钮置灰提示方式是直接tooltip给出提示。</li><li>【强制】输入控件的提示放在控件下方，不要通过在label旁的问号图标给出提示。</li><li>【强制】输入错误提示通过冒泡方式实时提示。</li><li>【强制】用户触发页面加载时，页面和按钮需要loading效果，定时刷新时不要loading。</li><li>【强制】按钮不能操作时置灰不可用。</li><li>【建议】编辑操作，用户没有改变数据时，不可下发后台。</li><li>【强制】后端请求返回提示使用通知组件，浏览器右侧弹出，成功则停留5秒自动关闭，失败不自动关闭，用户可手动关闭。详情默认收起，如果失败，则自动展开详情。</li><li>【建议】异步操作请求提示不自动关闭，当操作真正完成时后端推送消息给前端，此时在原来的消息提示中给出最终结果，后续同上。</li><li>【强制】全局消息提示使用消息组件，要么嵌入页面中，用户可关闭。要么浏览器上方弹出，停留4秒自动关闭，用户不可手动关闭。最多显示1个全局弹出消息。</li><li>【强制】危险操作给出确认提示，用户确认之后才下发后台。</li><li>【强制】必填字段在label的左侧必须有红色的*。</li><li>【建议】文本输入框要有灰色占位符，提示用户需要输入什么内容。</li><li>【强制】没有数据时，需要有空状态文字和图标提示。</li></ol><h3 id="5-数据管理">5.数据管理</h3><ol><li>【强制】所有页面需要提供手工刷新，有状态变化的页面需要支持自动刷新。</li><li>【强制】使用定时器时需要非常小心，避免出现僵尸定时器，这通常是由于打开定时器和清除定时器没有配对，重复打开了定时器，这样前一个定时器就永远关闭不了，好的习惯是在打开定时器之前总是先清除一下。</li><li>【强制】对话框关闭或完成后，需要清除上一次数据，避免再次打开对话框出现数据残留，特别的antd form的数据需要resetFields或setFieldsValue清除。清除数据前先隐藏对话框，避免对话框出现闪变。</li><li>【强制】离开页面（包括通过浏览器回退），需要清除页面状态，避免再次回到页面出现残留，如对话框自动出现。</li><li>【强制】只有状态需要在多个组件共享时才放到redux中，否则状态保存在组件中。这样可以避免切换页面后会先显示上次的数据问题，也可以避免一些数据残留问题。</li><li>【强制】向导页面中已填数据，在上下步切换时需要保留。</li><li>【建议】必须进行数据选择的选择列表，只有一项数据时，默认选中。</li><li>【强制】字段为null时显示–，空字符串还是显示实际值。</li><li>【强制】避免字段出现重叠或超出边框，要让字段自动换行或省略显示。</li><li>【强制】字段过长时省略显示，备注最长32，其他最长16，超过长度则截取最大长度后追加…显示，中文一个字长度按1算。</li><li>【强制】列表数据过多时需要使用分页，支持分页、跳页、设定每页条数。</li><li>【强制】表格支持宽度随屏幕自适应，不出现横向滚动条。但是缩放宽度过小，无法显示所有列时，需要横向滚动条。</li><li>【建议】对话框支持拖动和最大化。</li><li>【建议】不常用选填内容放入[高级选项]，默认收起。</li><li>【强制】列表中枚举字段需要支持过滤（依赖openstack底层过滤需要视底层是否支持而定，如底层不支持则无法实现过滤）。</li><li>【强制】列表中名称，时间字段需要支持排序，其他字段视需求而定（同样依赖底层的视底层能力而定）。</li><li>【强制】所有资源都需要创建和更新时间字段。</li><li>【强制】列表字段支持自定义显示的列，某些列可固定显示，不允许隐藏。</li><li>【强制】列表支持字段模糊检索（同样依赖底层的视底层能力而定）。</li><li>【建议】复杂的列表需要支持组合条件检索，并能够保存查询条件，以便重复使用。</li><li>【建议】列表支持字段为空的检索。</li></ol><h3 id="6-一致性">6.一致性</h3><ol><li>【强制】中文环境，标点统一用中文标点。</li><li>【强制】中文环境，除了常用的英文缩写，如CPU，英文都应该翻译为中文。</li><li>【强制】错误提示统一不加感叹号。</li><li>【强制】专业术语在不同地方保持一致性。</li><li>【强制】所有页面符合组件规范。</li><li>【强制】所有页面需要适配各种主题，在各主题下显示正常，包括亮色，暗色和暗黑主题。</li></ol><h3 id="7-兼容性">7.兼容性</h3><ol><li>【强制】浏览器至少支持chrome 85及以上和firefox 79及以上。</li><li>【强制】最小分辨率1366*768，保证此分辨率及以上的显示正常。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从今年7月份开始，因为公司需要，亟需解决产品易用性痛点问题，我开始前端易用性改进工作，我总结了易用性的6个方面，梳理出24个改进点，在随后的版本中逐步落地，目前大部分改进点都得到落实，产品的易用性得到极大的改观，几个月的辛勤付出终有成果，心中甚是欣慰。与此同时，我也负责前端的设计开发以及前端负责人工作，还好自己的基本功扎实😊，虽然一直从事后端研发，极短的时间内，我已经可以娴熟的进行前端开发和解决各种疑难问题，而团队管理更是我擅长的，团队有成员对我说，你要是早点来就好了，我就可以学到更多东西，这真是对我最大的褒奖。短短几个月的时间，我已经把前端的代码翻了一遍，说实在，以前代码的规范性非常差，组件复用性更差，完全没有复用的思想，整个团队要提升的地方实在太多了。在开发过程中，我发现很多问题经常重复出现，例如残留数据的问题，一方面是状态管理使用不当，全部都是用的全局状态，另一方面是没有重置状态的意识。因此我将近几个月的经验总结成一份规范，不仅能够提升易用性而且可以避免很多前端Bug，也算是一份年终总结，希望对大家有所启发和帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="design" scheme="http://zhongpan.tech/categories/design/"/>
    
      <category term="frontend" scheme="http://zhongpan.tech/categories/design/frontend/"/>
    
    
      <category term="react" scheme="http://zhongpan.tech/tags/react/"/>
    
      <category term="frontend" scheme="http://zhongpan.tech/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>js定时器的陷阱</title>
    <link href="http://zhongpan.tech/2020/11/12/041-the-trap-of-js-timer/"/>
    <id>http://zhongpan.tech/2020/11/12/041-the-trap-of-js-timer/</id>
    <published>2020-11-12T07:49:12.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>项目遇到一个奇怪的问题，分页查询的页面会自动在两页之间跳变，F5刷新之后问题消失，第一次测试报这个问题的时候，让测试按照最近的操作重试一下，又重现了一次，想着应该是必现问题，后面再看，结果后面再看的时候，怎么都无法重现了。过了一段时间，问题又再次出现，这次一定不能再放过了，F12查看网络调用，发现确实会发送两次调用，两次都是定时刷新触发的，自此心里基本有数应该是定时器导致的。接下来通过分析代码，终于找到问题的根源，是因为出现僵尸定时器，在背后还在一直运行，它里面的状态是不会变的，始终是某一页，这样切换到新的页之后，就会在两页之间自动切换。这个问题还挺隐晦的，特此记录下。</p><a id="more"></a><h2 id="问题分析">问题分析</h2><p>页面如下：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/2cd9d6b3-7f5c-42f2-bad9-9e6987c380ae/index_files/59c51330-6f9a-4471-b20a-072a122fb497.jpg" alt="image.png"></p><p>列表代码如下，页面第一次创建的时候设置定时器timerList，当点击新建的时候会clear掉timerList，然后新建的完成或取消的时候再调用openTimer恢复定时器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  dispatch(&#123;</span><br><span class="line">    type: <span class="string">'image/getImageListByTid'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.timerList = setInterval(<span class="keyword">this</span>.timer, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentWillUnmount() &#123;</span><br><span class="line">  clearInterval(<span class="keyword">this</span>.timerList);</span><br><span class="line">  clearInterval(<span class="keyword">this</span>.timerModal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timer = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; page &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  dispatch(&#123;</span><br><span class="line">    type: <span class="string">'image/getImageListByTid'</span>,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      checkschedual: <span class="literal">true</span>,</span><br><span class="line">      ...page,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">openTimer = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.timerModal = setInterval(<span class="keyword">this</span>.timer, <span class="number">5000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>新建镜像完成的逻辑，回调函数callback中调用openTimer。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">okHandle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch, form, refresh, openTimer &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  <span class="keyword">const</span> &#123; switcheValue &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">const</span> callback = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    refresh();</span><br><span class="line">    openTimer();</span><br><span class="line">  &#125;;</span><br><span class="line">  form.validateFields(<span class="function">(<span class="params">err, fieldsValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log('file: ', fieldsValue);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      ...fieldsValue,</span><br><span class="line">      enable_integrity_check: switcheValue,</span><br><span class="line">      <span class="comment">// min_ram:fieldsValue.min_ram*1024, // 后台单位MB</span></span><br><span class="line">    &#125;;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">'image/createImage'</span>,</span><br><span class="line">      payload: data,</span><br><span class="line">      callback,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>新建镜像取消的逻辑，回调会调用openTimer。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cancelHandle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch, openTimer &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    step: <span class="number">0</span>,</span><br><span class="line">    type: <span class="string">'imagefile'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch(&#123;</span><br><span class="line">    type: <span class="string">'image/addModal'</span>,</span><br><span class="line">    payload: <span class="literal">false</span>,</span><br><span class="line">    callback: openTimer,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>model代码，成功的时候关闭对话框，失败的时候不关闭对话框。不管成功还是失败都会调用回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过镜像地址创建镜像会调用该方法</span></span><br><span class="line">    *createImage(&#123; payload, callback &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">      formData.append(<span class="string">'name'</span>, payload.name);</span><br><span class="line">      formData.append(<span class="string">'disk_format'</span>, payload.disk_format);</span><br><span class="line">      formData.append(<span class="string">'fileurl'</span>, payload.fileurl);</span><br><span class="line">      formData.append(<span class="string">'hypervisor_type'</span>, payload.hypervisor_type);</span><br><span class="line">      formData.append(<span class="string">'min_disk'</span>, payload.min_disk);</span><br><span class="line">      formData.append(<span class="string">'min_ram'</span>, payload.min_ram);</span><br><span class="line">      formData.append(<span class="string">'system'</span>, payload.system);</span><br><span class="line">      formData.append(<span class="string">'version'</span>, payload.version);</span><br><span class="line">      formData.append(<span class="string">'description'</span>, payload.description);</span><br><span class="line">      formData.append(<span class="string">'visibility'</span>, payload.visibility);</span><br><span class="line">      formData.append(<span class="string">'type'</span>, payload.type);</span><br><span class="line">      formData.append(<span class="string">'back'</span>, payload.back);</span><br><span class="line">      formData.append(<span class="string">'enable_integrity_check'</span>, payload.enable_integrity_check);</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">yield</span> call(createImage, formData);</span><br><span class="line">      <span class="keyword">if</span> (isResponseSuccess(response)) &#123;</span><br><span class="line">        notification.success(&#123;</span><br><span class="line">          message: <span class="string">'操作成功！'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">yield</span> put(&#123;</span><br><span class="line">          type: <span class="string">'addModal'</span>,</span><br><span class="line">          payload: <span class="literal">false</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        errorMessage(response);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (callback) callback();</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>所以如果新建镜像失败，会调用一次回调函数，设置了定时器。此时对话框还没关闭，不管是取消，还是再次完成，都会再次调用openTimer，而openTimer中没有请除上次的定时器，造成了僵尸定时器。</p><h2 id="问题修改">问题修改</h2><p>要么model中新建只有成功才调用回调函数，要么openTimer中总是先请除上次的定时器。</p><h2 id="问题启示">问题启示</h2><p>setInterval和clearInterval必须成对出现，clearInterval的参数是setInterval的返回值。用成员变量记录setInterval的返回值时，如果重复设置setInterval，一定要注意请除上次的定时器，否则就会出现僵尸定时器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">openTimer = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.timerModal) &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerModal);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.timerModal = setInterval(<span class="keyword">this</span>.timer, <span class="number">5000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>componentDidMount中设置的定时器，注意在componentWillUnmount中要请除，如果用useEffect会更好，设置定时器和清除定时器可以写在一起，不用分开，可维护性更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目遇到一个奇怪的问题，分页查询的页面会自动在两页之间跳变，F5刷新之后问题消失，第一次测试报这个问题的时候，让测试按照最近的操作重试一下，又重现了一次，想着应该是必现问题，后面再看，结果后面再看的时候，怎么都无法重现了。过了一段时间，问题又再次出现，这次一定不能再放过了，F12查看网络调用，发现确实会发送两次调用，两次都是定时刷新触发的，自此心里基本有数应该是定时器导致的。接下来通过分析代码，终于找到问题的根源，是因为出现僵尸定时器，在背后还在一直运行，它里面的状态是不会变的，始终是某一页，这样切换到新的页之后，就会在两页之间自动切换。这个问题还挺隐晦的，特此记录下。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://zhongpan.tech/categories/javascript/"/>
    
    
      <category term="react" scheme="http://zhongpan.tech/tags/react/"/>
    
      <category term="javascript" scheme="http://zhongpan.tech/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>antd dialog的一个问题分析</title>
    <link href="http://zhongpan.tech/2020/10/27/037-analysis-of-a-problem-in-antd-dialog/"/>
    <id>http://zhongpan.tech/2020/10/27/037-analysis-of-a-problem-in-antd-dialog/</id>
    <published>2020-10-27T05:51:37.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中碰到一个奇怪问题，项目是react+antd+umi实现，当页面中点击对话框，页面会自动滚动到最上面。最终定位跟antd dialog的实现有关，在某种条件下会触发此问题，下面分享一下问题定位过程，希望对遇到类似问题的同学有所帮助。</p><a id="more"></a><h2 id="问题现象">问题现象</h2><p>列表页滚动到下方，点击操作弹出对话框，列表自动滚动到最上面。此问题在上个版本还不存在。</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c4c13aea-bb70-4ae2-ac47-22948f8cffdf/index_files/da516397-4af3-4308-8d65-3000110de699.png" alt="image.png"></p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c4c13aea-bb70-4ae2-ac47-22948f8cffdf/index_files/4267d6c6-748f-48a3-bf9d-f317d95d18cf.jpg" alt="image.png"></p><h2 id="问题定位">问题定位</h2><p>一定是触发了滚动事件才会滚动到列表最上方，怎么定位哪里触发的滚动事件呢，从代码入手毫无头绪。好在可以通过浏览器devtool打断点，跟踪一下哪里触发。首先尝试了scroll事件，确实能够进到断点，但是堆栈只有一贞，没法找到源头。接着尝试了focus事件。</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c4c13aea-bb70-4ae2-ac47-22948f8cffdf/index_files/e22ed6a7-924a-431e-952e-f310bb9ef41d.jpg" alt="image.png"></p><p>进到focus事件时已经滚动到上方了，此时有堆栈信息，从堆栈定位到rc-dialog，其中有一句this.switchScrollingEffect()，高度怀疑这里触发了问题，在这里打上断点，证实了确实如此。</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c4c13aea-bb70-4ae2-ac47-22948f8cffdf/index_files/a6e6da39-e939-46f8-98e2-afa6c67719cc.jpg" alt="image.png"></p><p>进一步调试到this.switchScrollingEffect里面，问题触发点在setStyle这里，设置了如下样式后，就会触发滚动到最上面。</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c4c13aea-bb70-4ae2-ac47-22948f8cffdf/index_files/90f9f608-8d46-44b4-8c96-3f8d841728b1.jpg" alt="image.png"></p><p>switchScrollingEffect如下：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c4c13aea-bb70-4ae2-ac47-22948f8cffdf/index_files/a37ad7bf-8a4f-4382-bc5f-93a6ed21b125.jpg" alt="image.png"></p><p>setStyle如下：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c4c13aea-bb70-4ae2-ac47-22948f8cffdf/index_files/0e5f3273-4711-4fae-9e0b-4e3ecc0a9555.png" alt="image.png"></p><p>结合最近修改代码反复尝试，发现导致上面问题在于如下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是当html有如上样式(body没有，如果body也有也不会触发问题），再设置body样式{overflow: hidden, overflow-x: hidden, overflow-y: hidden}，就会出现自动滚动到最上面。</p><p>找到问题原因后我写了一小段代码最小化重现了这个问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"restore()"</span>&gt;</span></span><br><span class="line">      restore</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span>s<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"setStyle()"</span>&gt;</span></span><br><span class="line">      setstyle</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"showsize()"</span>&gt;</span></span><br><span class="line">    showsize</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>);</span><br><span class="line">  s.style[<span class="string">'overflow'</span>] = <span class="string">'hidden'</span>;</span><br><span class="line">  s.style[<span class="string">'overflow-x'</span>] = <span class="string">'hidden'</span>;</span><br><span class="line">  s.style[<span class="string">'overflow-y'</span>] = <span class="string">'hidden'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showsize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>);</span><br><span class="line">  alert(<span class="string">"document.body.offsetWidth="</span>+<span class="built_in">document</span>.body.offsetWidth+<span class="string">"\nwindow.innerWidth="</span>+<span class="built_in">window</span>.innerWidth+<span class="string">"\ndocument.body.scrollHeight="</span>+<span class="built_in">document</span>.body.scrollHeight+<span class="string">"\nwindow.innerHeight="</span>+<span class="built_in">window</span>.innerHeight);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>);</span><br><span class="line">  s.style[<span class="string">'overflow'</span>] = <span class="string">''</span>;</span><br><span class="line">  s.style[<span class="string">'overflow-x'</span>] = <span class="string">''</span>;</span><br><span class="line">  s.style[<span class="string">'overflow-y'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题分析">问题分析</h2><p>因为body没有设置overflow-y，默认是visible，所以内容显示到框外。</p><p>html设置了overflow-y: auto，所以出现纵向滚动条。</p><p>当点击setstyle后，body高度变小，html就滚动到最上面。</p><p>如果html没有设置overflow-y: auto，则默认是visible，不会滚动，仍然保持在底部。</p><p>如果body也设置了overflow-y:auto，则body会出现纵向滚动条，而html的滚动条只会覆盖body的clientheight区域。点击setstyle，只是将body的滚动条去掉，不会触发html滚动。</p><p>所以rc-dialog.switchScrollingEffect()的实现是存在一些缺陷的。</p><h2 id="其他问题">其他问题</h2><p>上面调试过程中，isBodyOverflowing的实现引起了我的兴趣。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function isBodyOverflowing() &#123;</span><br><span class="line">  return (</span><br><span class="line">    document.body.scrollHeight &gt;</span><br><span class="line">      (window.innerHeight || document.documentElement.clientHeight) &amp;&amp;</span><br><span class="line">    window.innerWidth &gt; document.body.offsetWidth</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>window.innerWidth &gt; document.body.offsetWidth这个条件，表示body的width+padding没有超过浏览器窗口内宽。document.body.scrollHeight &gt;</p><p>​    (window.innerHeight || document.documentElement.clientHeight)表示有纵向滚动。所以这个条件的意图有点让人不太理解，前一个条件很容易不满足，例如设置body的width为100vw。</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c4c13aea-bb70-4ae2-ac47-22948f8cffdf/index_files/dbfafae0-3c89-4189-bacb-af1ef44aadc8.png" alt="image.png"></p><p>（图片来自https://www.pianshen.com/article/6486132360/）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中碰到一个奇怪问题，项目是react+antd+umi实现，当页面中点击对话框，页面会自动滚动到最上面。最终定位跟antd dialog的实现有关，在某种条件下会触发此问题，下面分享一下问题定位过程，希望对遇到类似问题的同学有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="antd" scheme="http://zhongpan.tech/categories/antd/"/>
    
    
      <category term="debug" scheme="http://zhongpan.tech/tags/debug/"/>
    
      <category term="antd" scheme="http://zhongpan.tech/tags/antd/"/>
    
      <category term="web" scheme="http://zhongpan.tech/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>antd input能在DOM中看到密码问题</title>
    <link href="http://zhongpan.tech/2020/10/20/038-the-password-show-in-dom-with-antd-input/"/>
    <id>http://zhongpan.tech/2020/10/20/038-the-password-show-in-dom-with-antd-input/</id>
    <published>2020-10-20T06:32:41.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>又是一个antd组件问题，密码组件在dom中可以看到密码，这算是一个低级的问题，为什么还会存在这种问题，翻看antd源代码，发现其实专门解决过这个问题，但是并没有解决彻底，在某些场景下仍然存在。</p><a id="more"></a><h2 id="问题现象">问题现象</h2><p>F12在页面DOM中可以看到密码保存在value属性中，获得焦点时value会消失，但是又会自动出现。</p><h2 id="问题定位">问题定位</h2><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/445f3370-8f92-40fb-a368-42b99205b73b/index_files/f680699d-8d2a-42be-ad6a-5d98824fb454.jpg" alt="image.png"></p><p>通过在input元素上打断点调试，发现antd input组件曾经解决过此问题，见https://github.com/ant-design/ant-design/issues/20541，但是其解决方法是在componentDidMount，onFocus，onBlur，onChange四个时机删除value属性，这就是为什么获得焦点时value会消失，但是为什么又会自动出现呢，因为有一些场景这种解法是无效的。</p><p>场景一：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/445f3370-8f92-40fb-a368-42b99205b73b/index_files/02b1eb46-7b2b-4df1-b52f-e204a80115d1.jpg" alt="image.png"></p><p>如上页面，对话框使用了dva上的状态，背后的列表页面5s定时刷新导致dva上状态变化，导致对话框update，这时value又会出现。</p><p>场景二：</p><p>包裹在Form.Item(V4)或getFieldDecorator(V4之前）里面的Input不是第一层节点，此时Input失去焦点时，value也会又出现。</p><p>例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormItem labelCol=&#123;&#123; <span class="attr">span</span>: <span class="number">6</span> &#125;&#125; wrapperCol=&#123;&#123; <span class="attr">span</span>: <span class="number">14</span> &#125;&#125; label=<span class="string">"新密码"</span>&gt;</span><br><span class="line">          &lt;PasswordTooltip</span><br><span class="line">            name=&#123;form.getFieldValue(<span class="string">'name'</span>)&#125;</span><br><span class="line">            password=&#123;form.getFieldValue(<span class="string">'password'</span>)&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &#123;form.getFieldDecorator(<span class="string">'password'</span>, &#123;</span><br><span class="line">              <span class="comment">// initialValue:text.password,</span></span><br><span class="line">              rules: [</span><br><span class="line">                &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入密码！'</span> &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  pattern: <span class="regexp">/\S+/</span>,</span><br><span class="line">                  message: <span class="string">'不允许出现空口令!'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123; <span class="attr">validator</span>: passwordValidator(form.getFieldValue(<span class="string">'name'</span>) || <span class="string">''</span>) &#125;,</span><br><span class="line">              ],</span><br><span class="line">            &#125;)(</span><br><span class="line">              &lt;Input</span><br><span class="line">                type=&#123;passwordType ? <span class="string">'password'</span> : <span class="string">'text'</span>&#125;</span><br><span class="line">                <span class="comment">// suffix=&#123;&lt;Icon component=&#123;passwordType ? Close : Eye&#125; onClick=&#123;this.changeType&#125; /&gt;&#125;</span></span><br><span class="line">              /&gt;,</span><br><span class="line">            )&#125;</span><br><span class="line">          &lt;<span class="regexp">/PasswordTooltip&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>FormItem&gt;</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormItem shouldUpdate&gt;</span><br><span class="line">            &#123;() =&gt; (</span><br><span class="line">              &lt;FormItem labelCol=&#123;&#123; <span class="attr">span</span>: <span class="number">6</span> &#125;&#125; wrapperCol=&#123;&#123; <span class="attr">span</span>: <span class="number">14</span> &#125;&#125; label=<span class="string">"新密码"</span></span><br><span class="line">                name=<span class="string">'newPassword'</span></span><br><span class="line">                rules=&#123;[</span><br><span class="line">                  &#123; <span class="attr">required</span>: switchState, <span class="attr">message</span>: <span class="string">'请输入新密码'</span> &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    pattern: <span class="regexp">/\S+/</span>,</span><br><span class="line">                    message: <span class="string">'不允许出现空口令'</span>,</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="keyword">this</span>.validatePassword,</span><br><span class="line">                  <span class="keyword">this</span>.validateToOldPassword,</span><br><span class="line">                  <span class="keyword">this</span>.validateToConfirm,</span><br><span class="line">                  <span class="keyword">this</span>.validateCloudname,</span><br><span class="line">                ]&#125;</span><br><span class="line">              &gt;</span><br><span class="line">                &lt;PasswordTooltip</span><br><span class="line">                  name=&#123;<span class="keyword">this</span>.formRef.current &amp;&amp; <span class="keyword">this</span>.formRef.current.getFieldValue(<span class="string">'username'</span>)&#125;</span><br><span class="line">                  password=&#123;<span class="keyword">this</span>.formRef.current &amp;&amp; <span class="keyword">this</span>.formRef.current.getFieldValue(<span class="string">'newPassword'</span>)&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                  &lt;Input</span><br><span class="line">                    disabled=&#123;!switchState&#125;</span><br><span class="line">                    type=&#123;passwordType ? <span class="string">'password'</span> : <span class="string">'text'</span>&#125;</span><br><span class="line">                    <span class="comment">// suffix=&#123;&lt;Icon component=&#123;passwordType ? Close : Eye&#125; onClick=&#123;this.changeType&#125; /&gt;&#125;</span></span><br><span class="line">                    onChange=&#123;(e) =&gt; &#123;</span><br><span class="line">                      <span class="keyword">this</span>.formRef.current.setFieldsValue(&#123; <span class="string">'newPassword'</span>: e.target.value &#125;);</span><br><span class="line">                      <span class="keyword">this</span>.formRef.current.validateFields([<span class="string">'newPassword'</span>]);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;<span class="regexp">/PasswordTooltip&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>FormItem&gt;</span><br><span class="line"></span><br><span class="line">            )&#125;</span><br><span class="line">          &lt;<span class="regexp">/FormItem&gt;</span></span><br></pre></td></tr></table></figure><p>场景三：</p><p>包裹在Form.Item(V4)或getFieldDecorator(V4之前）里面的Input，onchange的触发会失效，这样输入一个字符后，value又会出现。</p><h2 id="解决方案">解决方案</h2><p>将Input包装了一层，在其componentDidUpdate中删除value属性。不解为什么antd input不在componentDidUpdate中删除value属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Input &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ClearValueInput</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.input &amp;&amp; <span class="keyword">this</span>.input.input) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.input.input.hasAttribute(<span class="string">'value'</span>)) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.input.input.removeAttribute(<span class="string">'value'</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  saveInput = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.input = input;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Input</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;/</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是一个antd组件问题，密码组件在dom中可以看到密码，这算是一个低级的问题，为什么还会存在这种问题，翻看antd源代码，发现其实专门解决过这个问题，但是并没有解决彻底，在某些场景下仍然存在。&lt;/p&gt;
    
    </summary>
    
      <category term="antd" scheme="http://zhongpan.tech/categories/antd/"/>
    
    
      <category term="debug" scheme="http://zhongpan.tech/tags/debug/"/>
    
      <category term="antd" scheme="http://zhongpan.tech/tags/antd/"/>
    
      <category term="web" scheme="http://zhongpan.tech/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>css伪类使用技巧一例</title>
    <link href="http://zhongpan.tech/2020/09/29/039-an-example-of-using-css-pseudo-class/"/>
    <id>http://zhongpan.tech/2020/09/29/039-an-example-of-using-css-pseudo-class/</id>
    <published>2020-09-29T06:40:18.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>最近测试同学提了一个问题，觉得antd的时间选择组件，没有提示时分秒，不太友好。这种问题都能够提出来，是不是感觉咱们的前端水平已经被激发到极致了，估计antd是不太会接受这种问题的。这种问题怎么解呢，你还别说，真让我想到一个好办法，那就是用css伪类。</p><a id="more"></a><p>问题如下：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/d90af27c-85c5-4b80-9dcf-e340f6b922ee/index_files/d283ab42-56b1-4ecf-9a86-5f6e3e397763.jpg" alt="image.png"></p><p>增加如下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ant-picker-time-panel</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">'时\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0分\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0\00A0秒'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果，测试同学应该满意了：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/d90af27c-85c5-4b80-9dcf-e340f6b922ee/index_files/8aeb1fc7-28c8-4268-a57a-228213045728.jpg" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近测试同学提了一个问题，觉得antd的时间选择组件，没有提示时分秒，不太友好。这种问题都能够提出来，是不是感觉咱们的前端水平已经被激发到极致了，估计antd是不太会接受这种问题的。这种问题怎么解呢，你还别说，真让我想到一个好办法，那就是用css伪类。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://zhongpan.tech/categories/css/"/>
    
    
      <category term="antd" scheme="http://zhongpan.tech/tags/antd/"/>
    
      <category term="css" scheme="http://zhongpan.tech/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>antd下拉菜单横向布局</title>
    <link href="http://zhongpan.tech/2020/09/27/040-antd-dropdown-horizontal-layout/"/>
    <id>http://zhongpan.tech/2020/09/27/040-antd-dropdown-horizontal-layout/</id>
    <published>2020-09-27T08:27:38.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>项目中的下拉菜单项越来越多，最近又加了分组，长长的一条非常难看，能不能把它改成横向布局呢。项目是用的antd，研究了下antd的下拉菜单是用ul,li实现的，通过css的flex布局和grid布局很容易实现横向布局，当然也可以只用grid布局实现，grid对于一维二维都可以胜任，更加强大。</p><a id="more"></a><p>项目原来的样子：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/05361c0c-2563-448a-8c97-4c6d497da2d4/index_files/b891fdc4-f370-4641-b358-ad982737feec.png" alt="image.png"></p><p>改成横向布局的样子：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/05361c0c-2563-448a-8c97-4c6d497da2d4/index_files/265c9998-8e58-44f4-aa8b-722886003f0d.png" alt="image.png"></p><p>下面通过一个简化的例子演示一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:block;min-width:98px;position: absolute;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>菜单1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"group-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>菜单2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"group-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>菜单3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"group-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>菜单4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"group-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认效果是这样的，两级菜单，第一级分组，第二级菜单项。</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/05361c0c-2563-448a-8c97-4c6d497da2d4/index_files/86248737-0830-455f-ab56-a9df34460980.png" alt="image.png"></p><p>增加如下样式，首先让第一级横向排列，用到了flex布局，方向是row，不换行。然后第二级为了实现最多8行，用到了grid布局，行数固定为8，先按列排，多于8行时列自动扩展。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.group</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: auto;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.group-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, auto);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(8,auto);</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果如下：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/05361c0c-2563-448a-8c97-4c6d497da2d4/index_files/ded0c4eb-4788-4f67-b4af-8f5875f07ea5.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中的下拉菜单项越来越多，最近又加了分组，长长的一条非常难看，能不能把它改成横向布局呢。项目是用的antd，研究了下antd的下拉菜单是用ul,li实现的，通过css的flex布局和grid布局很容易实现横向布局，当然也可以只用grid布局实现，grid对于一维二维都可以胜任，更加强大。&lt;/p&gt;
    
    </summary>
    
      <category term="antd" scheme="http://zhongpan.tech/categories/antd/"/>
    
    
      <category term="antd" scheme="http://zhongpan.tech/tags/antd/"/>
    
  </entry>
  
  <entry>
    <title>antd pro动态切换主题</title>
    <link href="http://zhongpan.tech/2020/09/24/036-dynamically-switches-theme-in-antd-pro/"/>
    <id>http://zhongpan.tech/2020/09/24/036-dynamically-switches-theme-in-antd-pro/</id>
    <published>2020-09-24T05:46:11.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>antd pro官方文档(<a href="https://pro.ant.design/docs/dynamic-theme-cn" target="_blank" rel="noopener">https://pro.ant.design/docs/dynamic-theme-cn</a>)介绍了动态切换主题的方法。但是并没有讲的特别清楚，而且编译主题的时间比较长，非常影响开发效率。下面介绍下我的解决办法。</p><a id="more"></a><h2 id="动态主题切换原理">动态主题切换原理</h2><p>主题切换主要是通过unm-plugin-antd-theme插件实现的，unm-plugin-antd-theme插件通过antd-pro-merge-less将less文件编译为一个主题css文件。</p><p>所以unm-plugin-antd-theme的配置文件就是定义的antd-pro-merge-less(<a href="https://github.com/chenshuai2144/antd-pro-merge-less" target="_blank" rel="noopener">https://github.com/chenshuai2144/antd-pro-merge-less</a>)的参数，如下所示，要求是json文件，文件名theme.config.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"theme"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"key"</span>: <span class="string">"dark"</span>,</span><br><span class="line">      <span class="attr">"theme"</span>: <span class="string">"dark"</span>,</span><br><span class="line">      <span class="attr">"fileName"</span>: <span class="string">"dark.css"</span>,</span><br><span class="line">      <span class="attr">"modifyVars"</span>: &#123;</span><br><span class="line">        <span class="attr">"@font-size-base"</span>: <span class="string">"12px"</span>,</span><br><span class="line">        <span class="attr">"@table-padding-vertical"</span>: <span class="string">"10px"</span>,</span><br><span class="line">        <span class="attr">"@link-color"</span>: <span class="string">"#0070cc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,   </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"key"</span>: <span class="string">"volcano"</span>,</span><br><span class="line">      <span class="attr">"fileName"</span>: <span class="string">"volcano.css"</span>,</span><br><span class="line">      <span class="attr">"modifyVars"</span>: &#123;</span><br><span class="line">        <span class="attr">"@primary-color"</span>: <span class="string">"#FA541C"</span>,</span><br><span class="line">        <span class="attr">"@font-size-base"</span>: <span class="string">"12px"</span>,</span><br><span class="line">        <span class="attr">"@table-padding-vertical"</span>: <span class="string">"10px"</span>,</span><br><span class="line">        <span class="attr">"@link-color"</span>: <span class="string">"#0070cc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"key"</span>: <span class="string">"volcano"</span>,</span><br><span class="line">      <span class="attr">"theme"</span>: <span class="string">"dark"</span>,</span><br><span class="line">      <span class="attr">"fileName"</span>: <span class="string">"dark-volcano.css"</span>,</span><br><span class="line">      <span class="attr">"modifyVars"</span>: &#123;</span><br><span class="line">        <span class="attr">"@primary-color"</span>: <span class="string">"#FA541C"</span>,</span><br><span class="line">        <span class="attr">"@font-size-base"</span>: <span class="string">"12px"</span>,</span><br><span class="line">        <span class="attr">"@table-padding-vertical"</span>: <span class="string">"10px"</span>,</span><br><span class="line">        <span class="attr">"@link-color"</span>: <span class="string">"#0070cc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"min"</span>: <span class="literal">true</span>, </span><br><span class="line">  <span class="attr">"isModule"</span>: <span class="literal">true</span>, </span><br><span class="line">  <span class="attr">"ignoreAntd"</span>: <span class="literal">false</span>, </span><br><span class="line">  <span class="attr">"ignoreProLayout"</span>: <span class="literal">false</span>, </span><br><span class="line">  <span class="attr">"cache"</span>: <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种主题一个不同的文件，fileName定义了文件名，theme为dark表示暗黑主题（对应antdpro主题设置里面的realDark），不写就是亮色主题（对应antdpro主题设置里面的light或dark）。modifyVars就是对antd默认变量的定制。</p><p>大家会发现上面没有默认的亮色主题，因为这时不用单独的主题css文件，直接用默认的就好。</p><p>每次编译的时候unm-plugin-antd-theme插件会遍历上面定义的每个主题，编译为一个css文件，开发时位于node_modules/.plugin-theme/theme目录下，发布时位于theme目录下，每个主题文件编译都需要几秒钟，所以主题多了编译时间会比较慢，后面会讲怎么解决这个问题。</p><p>关于插件的使用，umi3对于umi-plugin开头的插件是自动加载的，不需定义在config文件的plugins中，如果看到一些老的教程不要感到困惑。</p><p>好了，有了主题文件，接下来要解决怎么应用主题，其实很简单，就是重新加载新的css文件。antd pro官方给了参考例子，也可以参考SettingDrawer源代码(<a href="https://github.com/ant-design/ant-design-pro-layout/blob/master/src/SettingDrawer/index.tsx" target="_blank" rel="noopener">https://github.com/ant-design/ant-design-pro-layout/blob/master/src/SettingDrawer/index.tsx</a>)。</p><h2 id="解决主题编译慢问题">解决主题编译慢问题</h2><p>开发期每次都编译主题是难以忍受的，所以我的办法是开发器能够配置是否编译主题，而发布时总是编译主题。可惜unm-plugin-antd-theme插件本身并没有提供这种配置能力。好在umi的扩展能力非常强，我写了一个插件来解决这个问题，其实非常简单，代码只有几行，插件名umi-plugin-config（<a href="https://github.com/zhongpan/umi-plugin-config%EF%BC%89%E3%80%82" target="_blank" rel="noopener">https://github.com/zhongpan/umi-plugin-config）。</a></p><p>当然你也可以使用umi禁用插件的方法，unm-plugin-antd-theme插件的key为antdTheme，修改config文件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; REACT_APP_ENV &#125; = process.env;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  antdTheme: REACT_APP_ENV !== <span class="string">'dev'</span>,</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="主题配置文件优化">主题配置文件优化</h2><p>unm-plugin-antd-theme插件的配置文件为json格式，很不方便，一来不好加入注释，二来不好共享一些变量，毕竟多个主题有一些一样的成分。为了解决这个问题，还是用到umi插件的扩展能力，在插件中将js定义转换为json定义，详见上述umi-plugin-config插件。</p><p>通过例子说明这样做的好处。你是否还记得默认的亮色主题没有编译为单独的主题css，那么所有主题统一修改的变量如果做呢。</p><p>默认的主题还是可以通过umi的配置文件的theme配置：</p><p>theme.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">"@font-size-base"</span>: <span class="string">"12px"</span>,</span><br><span class="line">  <span class="string">"@table-padding-vertical"</span>: <span class="string">"10px"</span>,</span><br><span class="line">  <span class="string">"@link-color"</span>: <span class="string">"#0070cc"</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">'umi'</span>;</span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">'./theme'</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; REACT_APP_ENV &#125; = process.env;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">    theme,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后其他主题就需要在unm-plugin-antd-theme插件的json配置文件中，每个主题的modifyVars中都要加入，本文一开始已经给出了例子。</p><p>显而易见上面的统一变量修改需要烦人的重复，将json改成js后就能完美解决这个问题，theme.config.json会变成如下，需要使用CommonJS规范定义模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> theme = <span class="built_in">require</span>(<span class="string">'./theme'</span>).default;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"theme"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"key"</span>: <span class="string">"dark"</span>,</span><br><span class="line">      <span class="string">"theme"</span>: <span class="string">"dark"</span>,</span><br><span class="line">      <span class="string">"fileName"</span>: <span class="string">"dark.css"</span>,</span><br><span class="line">      <span class="string">"modifyVars"</span>: &#123;</span><br><span class="line">        ...theme</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,   </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"key"</span>: <span class="string">"volcano"</span>,</span><br><span class="line">      <span class="string">"fileName"</span>: <span class="string">"volcano.css"</span>,</span><br><span class="line">      <span class="string">"modifyVars"</span>: &#123;</span><br><span class="line">        <span class="string">"@primary-color"</span>: <span class="string">"#FA541C"</span>,</span><br><span class="line">        ...theme</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"key"</span>: <span class="string">"volcano"</span>,</span><br><span class="line">      <span class="string">"theme"</span>: <span class="string">"dark"</span>,</span><br><span class="line">      <span class="string">"fileName"</span>: <span class="string">"dark-volcano.css"</span>,</span><br><span class="line">      <span class="string">"modifyVars"</span>: &#123;</span><br><span class="line">        <span class="string">"@primary-color"</span>: <span class="string">"#FA541C"</span>,</span><br><span class="line">        ...theme</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"min"</span>: <span class="literal">true</span>, </span><br><span class="line">  <span class="string">"isModule"</span>: <span class="literal">true</span>, </span><br><span class="line">  <span class="string">"ignoreAntd"</span>: <span class="literal">false</span>, </span><br><span class="line">  <span class="string">"ignoreProLayout"</span>: <span class="literal">false</span>, </span><br><span class="line">  <span class="string">"cache"</span>: <span class="literal">true</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就可以将统一的变量修改复用起来。umi-plugin-config插件检测到theme.config.js文件就会自动转换为theme.config.json文件。</p><h2 id="自定义主题注意事项">自定义主题注意事项</h2><p>要支持动态切换主题，需要严格规范样式的定义方式，下面是我总结的一些建议，供大家参考。</p><ol><li>不要使用固定的颜色，尽量使用antd已有变量，例如@text-color，表示文字颜色，在亮色和暗黑模式下值是不一样的，antd-pro-merge-less已经为我们自动处理了，我们只需要使用@text-color</li><li>所有主题统一修改的变量定义在上述theme.js中，所有主题复用</li><li>主题不一样的变量修改在各自的配置中定义</li><li>所有主题统一修改的样式定义在global.less文件中，需要设置最高优先级</li><li>所有主题用的同一个变量但是值不一样（亮色和暗黑不一样），定义在组件less中，需要使用:global</li><li>如果无法通过less定义样式，可以通过settings获取主题后动态设置行内样式</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;antd pro官方文档(&lt;a href=&quot;https://pro.ant.design/docs/dynamic-theme-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pro.ant.design/docs/dynamic-theme-cn&lt;/a&gt;)介绍了动态切换主题的方法。但是并没有讲的特别清楚，而且编译主题的时间比较长，非常影响开发效率。下面介绍下我的解决办法。&lt;/p&gt;
    
    </summary>
    
      <category term="antd" scheme="http://zhongpan.tech/categories/antd/"/>
    
    
      <category term="antd" scheme="http://zhongpan.tech/tags/antd/"/>
    
      <category term="theme" scheme="http://zhongpan.tech/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>CriteriaQuery使用的一个陷阱</title>
    <link href="http://zhongpan.tech/2020/07/20/035-a-trap-for-using-criteriaquery/"/>
    <id>http://zhongpan.tech/2020/07/20/035-a-trap-for-using-criteriaquery/</id>
    <published>2020-07-20T05:42:30.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>使用Spring Data Jpa的CriteriaQuery进行动态条件查询时，可能会遇到一个陷阱，当条件为空时，查询不到任何结果，并不是期望的返回所有结果。这是为什么呢？</p><a id="more"></a><p>例如下述代码，当predicates为空时，返回结果总是为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;VmhostWithRelationPO&gt; <span class="title">listVmhostSpecWithRelationByPage</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  Specification&lt;VmhostWithRelationPO&gt; spec = (root, cq, cb) -&gt; &#123;</span><br><span class="line">    root.join(<span class="string">"user"</span>, JoinType.LEFT);</span><br><span class="line">    root.join(<span class="string">"tenant"</span>, JoinType.LEFT);</span><br><span class="line">    List&lt;javax.persistence.criteria.Predicate&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> cb.or(predicates.toArray(<span class="keyword">new</span> javax.persistence.criteria.Predicate[<span class="number">0</span>]));</span><br><span class="line">  &#125;;</span><br><span class="line">  PageRequest pagable = PageRequest.of(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">  Page&lt;VmhostWithRelationPO&gt; page = vmhostSpecWithRelationDao.findAll(spec, pagable);</span><br><span class="line">  <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下or的注释就明白了，因为空条件总是为false，而and的空条件总是为true。所以，如果最后是and就没有问题，只有or的时候有问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CriteriaBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a conjunction of the given restriction predicates.</span></span><br><span class="line"><span class="comment">     * A conjunction of zero predicates is true.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> restrictions  zero or more restriction predicates</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> and predicate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Predicate <span class="title">and</span><span class="params">(Predicate... restrictions)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a disjunction of the given restriction predicates.</span></span><br><span class="line"><span class="comment">     * A disjunction of zero predicates is false.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> restrictions  zero or more restriction predicates</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> or predicate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Predicate <span class="title">or</span><span class="params">(Predicate... restrictions)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以正确的写法应该这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;VmhostWithRelationPO&gt; <span class="title">listVmhostSpecWithRelationByPage</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">   Specification&lt;VmhostWithRelationPO&gt; spec = (root, cq, cb) -&gt; &#123;</span><br><span class="line">     root.join(<span class="string">"user"</span>, JoinType.LEFT);</span><br><span class="line">     root.join(<span class="string">"tenant"</span>, JoinType.LEFT);</span><br><span class="line">     List&lt;javax.persistence.criteria.Predicate&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     ......</span><br><span class="line">     <span class="keyword">return</span> predicates.isEmpty() ? cb.conjunction() : cb.or(predicates.toArray(<span class="keyword">new</span> javax.persistence.criteria.Predicate[<span class="number">0</span>]));</span><br><span class="line">   &#125;;</span><br><span class="line">   PageRequest pagable = PageRequest.of(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">   Page&lt;VmhostWithRelationPO&gt; page = vmhostSpecWithRelationDao.findAll(spec, pagable);</span><br><span class="line">   <span class="keyword">return</span> page;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如果条件为空则返回一个空conjunction，也就是空的and，总是为true。</p><p>公司项目的代码中常见这种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;VmhostWithRelationPO&gt; <span class="title">listVmhostSpecWithRelationByPage</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  Specification&lt;VmhostWithRelationPO&gt; spec = (root, cq, cb) -&gt; &#123;</span><br><span class="line">    root.join(<span class="string">"user"</span>, JoinType.LEFT);</span><br><span class="line">    root.join(<span class="string">"tenant"</span>, JoinType.LEFT);</span><br><span class="line">    List&lt;javax.persistence.criteria.Predicate&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> (predicates.isEmpty()) &#123;</span><br><span class="line">      cq.where();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cq.where(cb.or(predicates.toArray(<span class="keyword">new</span> javax.persistence.criteria.Predicate[<span class="number">0</span>])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cq.getRestriction();</span><br><span class="line">  &#125;;</span><br><span class="line">  PageRequest pagable = PageRequest.of(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">  Page&lt;VmhostWithRelationPO&gt; page = vmhostSpecWithRelationDao.findAll(spec, pagable);</span><br><span class="line">  <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也能正常工作，但是其实没有必要在toPredicate方法中调用where，toPredicate只需要返回条件，外层会调用where。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Specification</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a WHERE clause for a query of the referenced entity in form of a &#123;<span class="doctag">@link</span> Predicate&#125; for the given</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Root&#125; and &#123;<span class="doctag">@link</span> CriteriaQuery&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> criteriaBuilder must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@link</span> Predicate&#125;, may be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder criteriaBuilder)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Spring Data Jpa的CriteriaQuery进行动态条件查询时，可能会遇到一个陷阱，当条件为空时，查询不到任何结果，并不是期望的返回所有结果。这是为什么呢？&lt;/p&gt;
    
    </summary>
    
      <category term="spring boot" scheme="http://zhongpan.tech/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="http://zhongpan.tech/tags/spring-boot/"/>
    
      <category term="jpa" scheme="http://zhongpan.tech/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA中多表联合查询最佳实践</title>
    <link href="http://zhongpan.tech/2020/07/20/034-best-practice-of-multi-table-joint-query-in-spring-data-jpa/"/>
    <id>http://zhongpan.tech/2020/07/20/034-best-practice-of-multi-table-joint-query-in-spring-data-jpa/</id>
    <published>2020-07-20T03:23:37.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Data JPA对于单表操作非常方便，采用定义接口的方式，不用写任何实现代码就可以获得常用的数据库操作。但是对于多表联合查询，则不那么方便了，目前公司项目是采用数据库视图的方法，将多表联合查询全部变成了单表查询。数据库视图有众多好处，不失为一种解决方案，但是也存在一些弊端：</p><ul><li>当数据库表结构变化需要同步修改视图，维护繁琐；</li><li>业务需求变化可能导致频繁修改视图暴露的字段；</li><li>有些场景可能只需要2表联合，有些场景需要更多表联合，要么建立一个大视图，要么需要建立多个类似视图，都不太好；</li><li>视图的SQL会变得越来越庞大，难以维护；</li><li>定义了实体类，JPA自动建表会把视图建成表；</li><li>SQL SERVER会将视图的查询转换为对基本表的查询，性能不高。</li></ul><p>总之将一部分业务逻辑放到数据库层维护，并不是一个特别好的方式。那么Spring Data JPA对多表查询还有哪些方法呢？有没有更好的选择呢？</p><a id="more"></a><p>答案是肯定的，直接上结论。</p><table><thead><tr><th><strong>方案</strong></th><th><strong>说明</strong></th><th><strong>自定义接收对象</strong></th><th><strong>SQL</strong></th><th><strong>分页</strong></th><th><strong>多表联合</strong></th><th><strong>问题</strong></th></tr></thead><tbody><tr><td>方案一</td><td>@Query</td><td>JPQL：DTO或投影原生SQL：Object[]，map(2个字段时)</td><td>JPQL或原生SQL</td><td>JpaRepository</td><td>实体上配不配关系都可以</td><td>1.查询条件要嵌入SQL语句内，一些复杂的情形不好处理，例如某个字段模糊检索，字段是动态的；2.分页查询countQuery把查询语句重复了一遍</td></tr><tr><td>方案二</td><td>Specification</td><td>不支持，只能返回对应PO</td><td>无SQL</td><td>结合JpaRepository</td><td>需要在实体上配置关系，如@OneToOne，否则无法实现左连接，只能联合查询</td><td>1.实体需要配置连接关系2.每一个关联对象都是单独的数据库查询</td></tr><tr><td>方案三</td><td>EntityManager</td><td>不支持投影，其他同@Query</td><td>JPQL或原生SQL</td><td>自己封装</td><td>实体上配不配关系都可以</td><td>相比于@Query好处是，JPQL字符串可以动态拼接，可以处理一些复杂的查询情形。但是分页需要自己封装。</td></tr><tr><td>方案四</td><td>CriteriaQuery</td><td>DTO</td><td>无SQL</td><td>自己封装</td><td>需要在实体上配置关系，如@OneToOne否则无法实现左连接，只能联合查询</td><td>同Specification，且分页需要自己封装</td></tr><tr><td>终极方案</td><td>QueryDSL</td><td>DTOTuple</td><td>无SQL</td><td>支持</td><td>实体上配不配关系都可以</td><td>解决以上所有问题</td></tr></tbody></table><p>选择一个好的解决方案，需要考虑如下几个方面：</p><ul><li>能够自定义对象接收查询结果集；</li><li>能够支持复杂的、动态的查询条件；</li><li>既然使用JPA，当然最好能够用类型安全的查询方式，并且使用起来比较自然；</li><li>能够原生支持分页查询；</li><li>能够支持left join，并且对实体定义没有约束。</li></ul><p>上表就是从这几个方面进行分析，最后QueryDSL堪称完美，下面详细介绍几种方案。</p><p>示例代码：<a href="https://github.com/zhongpan/jpa-demo.git" target="_blank" rel="noopener">https://github.com/zhongpan/jpa-demo.git</a></p><h2 id="spring-data-jpa">Spring Data JPA</h2><p>先了解下JPA、Hibernate、Spring Data JPA三者的关系是什么？</p><p>JPA是一个接口规范，随着Java EE 5发布，也是EJB3.0的一部分。Hibernate是先于JPA出现的一种历史悠久的ORM框架，它实现了JPA，也是目前用的最多的实现。而Sprint Data JPA是Spring中提供的开箱即用的基于JPA的数据库访问框架，其采用的实现正是Hibernate。Spring Data JPA提供的数据库访问能力如下：</p><p><img src="http://vipkshttp0.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/82a049e9-f035-4f5f-9bca-dc9a04639f0e/index_files/ba483d21-94ab-45fd-bb03-79356c931330.png" alt="img"></p><p>从上述接口的名字就可以看出：</p><ul><li>CrudRepository：最基本的增删改查操作</li><li>PagingAndSortingRepository：分页查询</li><li>QueryByExampleExecutor：基于样本查询，避免了传一堆参数，还要判断是否null</li><li>JpaSpecificationExecutor：基于Specification查询，就是对CriteriaQuery的封装，类型安全的查询方式</li><li>QuerydslPredicateExecutor：基于QueryDSL的查询，也是类型安全的</li></ul><p>上述接口的实现在SimpleJpaRepository和QuerydslJpaPredicateExecutor中，其中就是基于JPA的EntiryManager接口进行封装。如果我们要重写实现，也是通过EntiryManager来完成。</p><h2 id="方案一">方案一</h2><p>首先想到的方法自然是使用@Query注解，直接使用JPQL进行联合查询，自定义接收对象，left join都不在话下。主要的问题是对于一些复杂的、动态的查询条件不好处理，另外分页的countQuery不得不把主查询重写一遍，有点烦人。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VmhostDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">VmhostPO</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法一：使用@Query注解，可以自定义接收对象</span></span><br><span class="line">  <span class="comment">// 问题：查询条件要嵌入SQL语句内，一些复杂的情形不好处理，例如某个字段模糊检索，字段是动态的；分页查询countQuery把查询语句重复了一遍</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query</span>(<span class="string">"select new com.example.demo.entity.VmhostDTO(v, u, t) from VmhostPO v left join AuthUserPO u on v.userid = u.id left join AuthTenantPO t on v.tenantid = t.id where v.name like %?1%"</span>)</span><br><span class="line">  <span class="function">List&lt;VmhostDTO&gt; <span class="title">findVmhost</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query</span>(<span class="string">"select new com.example.demo.entity.VmhostInfoDTO(v.id, v.name, u.username, t.name) from VmhostPO v left join AuthUserPO u on v.userid = u.id left join AuthTenantPO t on v.tenantid = t.id where v.name like %:name%"</span>)</span><br><span class="line">  <span class="function">List&lt;VmhostInfoDTO&gt; <span class="title">findVmhostInfo</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query</span>(<span class="string">"select v.id as id, v.name as name, u.username as userName, t.name as tname from VmhostPO v left join AuthUserPO u on v.userid = u.id left join AuthTenantPO t on v.tenantid = t.id"</span>)</span><br><span class="line">  <span class="function">List&lt;VmhostInfoByProjection&gt; <span class="title">findVmhostInfoByProjection</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query</span>(value = <span class="string">"select new com.example.demo.entity.VmhostInfoDTO(v.id, v.name, u.username, t.name) from VmhostPO v left join AuthUserPO u on v.userid = u.id left join AuthTenantPO t on v.tenantid = t.id where v.name like %:name%"</span>, </span><br><span class="line">  countQuery = <span class="string">"select count(*) from VmhostPO v left join AuthUserPO u on v.userid = u.id left join AuthTenantPO t on v.tenantid = t.id where v.name like %:name%"</span>)</span><br><span class="line">  <span class="function">Page&lt;VmhostInfoDTO&gt; <span class="title">findVmhostInfoByPage</span><span class="params">(String name, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案二">方案二</h2><p>那么SQL的组织能否动态编程控制呢，自然会想到Specification查询，查询条件可以通过CriteriaQuery动态拼装。这也是Spring Data JPA中用的最广泛的查询方式。但是这种方式存在一些限制，首先不能灵活自定义接收对象，只能返回PO，其次要想实现left join，必须在实体上定义关系，最后关联对象不是一次查询回来的，而是单独的查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VmhostSpecWithRelationDao</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">VmhostWithRelationPO</span>, <span class="title">String</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">VmhostWithRelationPO</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方案二：使用Specification查询</span></span><br><span class="line">  <span class="comment">// 问题：实体必须配置关系，否则无法左连接；每个关联对象是单独数据库查询</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.example.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VmhostService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;VmhostWithRelationPO&gt; <span class="title">listVmhostSpecWithRelation</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    Specification&lt;VmhostWithRelationPO&gt; spec = (root, cq, cb) -&gt; &#123;</span><br><span class="line">      root.join(<span class="string">"user"</span>, JoinType.LEFT);</span><br><span class="line">      root.join(<span class="string">"tenant"</span>, JoinType.LEFT);</span><br><span class="line">      <span class="keyword">return</span> cb.like(root.get(<span class="string">"name"</span>), <span class="string">"%"</span> + name + <span class="string">"%"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    List&lt;VmhostWithRelationPO&gt; list = vmhostSpecWithRelationDao.findAll(spec);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能大家有两点疑问：</p><ul><li>@Query和Specification能否混用，@Query定义select的结果，Specification定义查询条件</li></ul><p>答案：不行，总是@Query有效，你定义的Specification参数压根就不会理会</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JpaSpecificationExecutor的参数和JpaRepository不一样，没啥用，SimpleJpaRepository总是用的JpaRepository的参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VmhostSpecDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">VmhostPO</span>, <span class="title">String</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">VmhostInfoDTO</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方案二：@Query和Specification是不能混用的，也无法改变接收结果集对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 无法混用，总是query有效，spec参数压根就不会理会</span></span><br><span class="line">  <span class="meta">@Query</span>(<span class="string">"from VmhostPO"</span>)</span><br><span class="line">  <span class="function">List&lt;VmhostPO&gt; <span class="title">findVmhost</span><span class="params">(Specification&lt;VmhostPO&gt; spec)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 覆盖JpaSpecificationExecutor的方法可以吗？一样的，根本不会走到findAll的默认实现 </span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="meta">@Query</span>(<span class="string">"select new com.example.demo.entity.VmhostInfoDTO(v.id, v.name, u.username, t.name) from VmhostPO v left join AuthUserPO u on v.userid = u.id left join AuthTenantPO t on v.tenantid = t.id"</span>)</span><br><span class="line">  <span class="function">List&lt;VmhostInfoDTO&gt; <span class="title">findAll</span><span class="params">(Specification&lt;VmhostInfoDTO&gt; spec)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Specification控制接收结果集对象</li></ul><p>答案：对不起，Specification的toPredicate中执行select是无效的，里面只能返回查询条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 这样写没有用，生成如下sql</span></span><br><span class="line">  <span class="comment">// select vmhostpo0_.id as id1_2_, vmhostpo0_.addresses as addresse2_2_, vmhostpo0_.availablezone as availabl3_2_, vmhostpo0_.baremetal as baremeta4_2_, vmhostpo0_.cpucore as cpucore5_2_, vmhostpo0_.createtime as createti6_2_, vmhostpo0_.disksize as disksize7_2_, vmhostpo0_.floatip as floatip8_2_, vmhostpo0_.hostname as hostname9_2_, vmhostpo0_.locked as locked10_2_, vmhostpo0_.metadata as metadat11_2_, vmhostpo0_.name as name12_2_, vmhostpo0_.privatenetworkid as private13_2_, vmhostpo0_.ramsize as ramsize14_2_, vmhostpo0_.tenantid as tenanti15_2_, vmhostpo0_.tenantname as tenantn16_2_, vmhostpo0_.type as type17_2_, vmhostpo0_.userid as userid18_2_, vmhostpo0_.username as usernam19_2_, vmhostpo0_.vmstatus as vmstatu20_2_ from vmhost vmhostpo0_ cross join auth_user authuserpo1_ cross join auth_tenant authtenant2_ where vmhostpo0_.userid=authuserpo1_.id and vmhostpo0_.tenantid=authtenant2_.id and (vmhostpo0_.name like ?)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;VmhostInfoDTO&gt; <span class="title">listVmhostSpec</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  Specification&lt;VmhostInfoDTO&gt; spec = (root, cq, cb) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 只能cross join，要left join需要在实体上建立关系</span></span><br><span class="line">    Root&lt;AuthUserPO&gt; user = cq.from(AuthUserPO.class);</span><br><span class="line">    Root&lt;AuthTenantPO&gt; tenant = cq.from(AuthTenantPO.class);</span><br><span class="line">    <span class="comment">// 这里执行select没有用，这个函数只能返回查询条件，外层会覆盖select</span></span><br><span class="line">    cq.multiselect(root.get(<span class="string">"id"</span>), root.get(<span class="string">"name"</span>), user.get(<span class="string">"username"</span>), tenant.get(<span class="string">"name"</span>));</span><br><span class="line">    <span class="keyword">return</span> cb.and(cb.equal(root.get(<span class="string">"userid"</span>), user.get(<span class="string">"id"</span>)), cb.equal(root.get(<span class="string">"tenantid"</span>), tenant.get(<span class="string">"id"</span>)),</span><br><span class="line">        cb.like(root.get(<span class="string">"name"</span>), <span class="string">"%"</span> + name + <span class="string">"%"</span>));</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> vmhostSpecDao.findOne(spec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为SimpleJpaRepository的实现已经固定了select，跟JpaRepository的类型参数相关，跟JpaSpecificationExecutor的类型参数无关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;S extends T&gt; <span class="function">TypedQuery&lt;S&gt; <span class="title">getQuery</span><span class="params">(@Nullable Specification&lt;S&gt; spec, Class&lt;S&gt; domainClass, Sort sort)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CriteriaBuilder builder = em.getCriteriaBuilder();</span><br><span class="line">    CriteriaQuery&lt;S&gt; query = builder.createQuery(domainClass);</span><br><span class="line"></span><br><span class="line">    Root&lt;S&gt; root = applySpecificationToCriteria(spec, domainClass, query);</span><br><span class="line">    query.select(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sort.isSorted()) &#123;</span><br><span class="line">        query.orderBy(toOrders(sort, root, builder));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> applyRepositoryMethodMetadata(em.createQuery(query));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案三">方案三</h2><p>上面两种使用方法是Spring Data JPA用的最多的，接下来只能从底层入手，直接使用EntiryManager。这种方法完全靠自己，所有接口都需要自己实现，丧失了Spring Data JPA的便利性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VmhostEMDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@PersistenceContext</span></span><br><span class="line">  <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方案三：使用原生的entityManager，解决@Query的SQL无法动态拼接问题</span></span><br><span class="line">  <span class="comment">// 此时分页就需要自己封装了，也没有了JPA自动实现的接口</span></span><br><span class="line">  <span class="comment">// 注意这里like后面要引号</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;VmhostDTO&gt; <span class="title">findVmhost</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    List&lt;VmhostDTO&gt; list = entityManager.createQuery(</span><br><span class="line">        <span class="string">"select new com.example.demo.entity.VmhostDTO(v, u, t) from VmhostPO v left join AuthUserPO u on v.userid = u.id left join AuthTenantPO t on v.tenantid = t.id where v.name like '%"</span></span><br><span class="line">            + name + <span class="string">"%'"</span>)</span><br><span class="line">        .getResultList();</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;VmhostInfoByProjection&gt; <span class="title">findVmhostInfoByProjection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此时总是Object[]，不支持投影</span></span><br><span class="line">    List&lt;VmhostInfoByProjection&gt; list = entityManager.createQuery(</span><br><span class="line">        <span class="string">"select v.id as id, v.name as name, u.username as userName, t.name as tname from VmhostPO v left join AuthUserPO u on v.userid = u.id left join AuthTenantPO t on v.tenantid = t.id"</span>)</span><br><span class="line">        .getResultList();</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案四">方案四</h2><p>类似于方案二之于方案一，我们也可以使用类型安全的查询方式CriteraQuery。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VmhostCQDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@PersistenceContext</span></span><br><span class="line">  <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方案四：相对于方案三，使用了类型安全的CriteriaQuery，其实Specification也是用的CriteriaQuery，所以存在和Specification一样的限制，但是可以控制select了，比Specification灵活一点</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;VmhostDTO&gt; <span class="title">findVmhost</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    CriteriaBuilder builder = entityManager.getCriteriaBuilder();</span><br><span class="line">    CriteriaQuery&lt;VmhostDTO&gt; query = builder.createQuery(VmhostDTO.class);</span><br><span class="line">    <span class="comment">// 实体上没有配置关系，无法使用left join，只能联合查询(inner join)</span></span><br><span class="line">    Root&lt;VmhostPO&gt; root = query.from(VmhostPO.class);</span><br><span class="line">    Root&lt;AuthUserPO&gt; rootUser = query.from(AuthUserPO.class);</span><br><span class="line">    Root&lt;AuthTenantPO&gt; rootTenant = query.from(AuthTenantPO.class);</span><br><span class="line">    query.multiselect(root, rootUser, rootTenant).where(builder.equal(root.get(<span class="string">"userid"</span>), rootUser.get(<span class="string">"id"</span>)),</span><br><span class="line">        builder.equal(root.get(<span class="string">"tenantid"</span>), rootTenant.get(<span class="string">"id"</span>)), builder.like(root.get(<span class="string">"name"</span>), <span class="string">"%"</span> + name + <span class="string">"%"</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;VmhostDTO&gt; list = entityManager.createQuery(query).getResultList();</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="终极方案">终极方案</h2><p>到了终极方案了，Spring Data JPA集成了对QueryDSL的支持，官方参考见：<a href="http://www.querydsl.com/static/querydsl/latest/reference/html_single/" target="_blank" rel="noopener">http://www.querydsl.com/static/querydsl/latest/reference/html_single</a>。</p><p>是不是有点像方案二+方案四，单表的时候直接使用JpaRepository和QuerydslPredicateExecutor提供的默认实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.VmhostPO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.querydsl.QuerydslPredicateExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VmhostQDSLDao</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">VmhostPO</span>, <span class="title">String</span>&gt;, <span class="title">QuerydslPredicateExecutor</span>&lt;<span class="title">VmhostPO</span>&gt;, <span class="title">VmhostRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方案五：VmhostRepository使用原生的entityManager配合QueryDSL，完美解决所有问题</span></span><br><span class="line">  <span class="comment">// 对于单表也可以使用QuerydslPredicateExecutor，自动拥有默认实现</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多表的时候就基于EntityManager扩展，但是querydsl已经帮我们做了很多工作，不是从头开始。querydsl的书写方式相对于CriteriaQuery也更加自然，易于理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PersistenceContext</span></span><br><span class="line">  <span class="keyword">protected</span> EntityManager em;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VmhostRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;VmhostDTO&gt; <span class="title">findVmhost</span><span class="params">(Predicate predicate)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> QueryResults&lt;VmhostDTO&gt; <span class="title">findVmhostByPage</span><span class="params">(Predicate predicate, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VmhostRepositoryImpl</span> <span class="keyword">extends</span> <span class="title">BaseRepository</span> <span class="keyword">implements</span> <span class="title">VmhostRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多表左连接</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;VmhostDTO&gt; <span class="title">findVmhost</span><span class="params">(Predicate predicate)</span> </span>&#123;</span><br><span class="line">    JPAQueryFactory queryFactory = <span class="keyword">new</span> JPAQueryFactory(em);</span><br><span class="line">    JPAQuery&lt;VmhostDTO&gt; jpaQuery = queryFactory</span><br><span class="line">        .select(Projections.constructor(VmhostDTO.class, QVmhostPO.vmhostPO, QAuthUserPO.authUserPO,</span><br><span class="line">            QAuthTenantPO.authTenantPO))</span><br><span class="line">        .from(QVmhostPO.vmhostPO).leftJoin(QAuthUserPO.authUserPO)</span><br><span class="line">        .on(QVmhostPO.vmhostPO.userid.stringValue().eq(QAuthUserPO.authUserPO.id.stringValue()))</span><br><span class="line">        .leftJoin(QAuthTenantPO.authTenantPO)</span><br><span class="line">        .on(QVmhostPO.vmhostPO.tenantid.stringValue().eq(QAuthTenantPO.authTenantPO.id.stringValue()));</span><br><span class="line">    jpaQuery.where(predicate);</span><br><span class="line">    <span class="keyword">return</span> jpaQuery.fetch();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> QueryResults&lt;VmhostDTO&gt; <span class="title">findVmhostByPage</span><span class="params">(Predicate predicate, Pageable pageable)</span> </span>&#123;</span><br><span class="line">    JPAQueryFactory queryFactory = <span class="keyword">new</span> JPAQueryFactory(em);</span><br><span class="line">    JPAQuery&lt;VmhostDTO&gt; jpaQuery = queryFactory</span><br><span class="line">        .select(Projections.constructor(VmhostDTO.class, QVmhostPO.vmhostPO, QAuthUserPO.authUserPO,</span><br><span class="line">            QAuthTenantPO.authTenantPO))</span><br><span class="line">        .from(QVmhostPO.vmhostPO).leftJoin(QAuthUserPO.authUserPO)</span><br><span class="line">        .on(QVmhostPO.vmhostPO.userid.stringValue().eq(QAuthUserPO.authUserPO.id.stringValue()))</span><br><span class="line">        .leftJoin(QAuthTenantPO.authTenantPO)</span><br><span class="line">        .on(QVmhostPO.vmhostPO.tenantid.stringValue().eq(QAuthTenantPO.authTenantPO.id.stringValue()))</span><br><span class="line">        .offset(pageable.getOffset()).limit(pageable.getPageSize());</span><br><span class="line">    jpaQuery.where(predicate);</span><br><span class="line">    <span class="keyword">return</span> jpaQuery.fetchResults();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>以上方法都还是在Spring Data JPA框架之内，如果你愿意，你也可以去重写SimpleJpaRepository，重写了注意通过如下注解启用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableJpaRepositories</span>(repositoryBaseClass = XXXXXX.class)</span><br></pre></td></tr></table></figure><p>其实QueryDSL已经做了很好的封装，完全没有必要重复造轮子，Spring Data JPA也提供了很多扩展点，在保留其便利性的基础上，根据需要去扩展，不需要全部推倒重来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Data JPA对于单表操作非常方便，采用定义接口的方式，不用写任何实现代码就可以获得常用的数据库操作。但是对于多表联合查询，则不那么方便了，目前公司项目是采用数据库视图的方法，将多表联合查询全部变成了单表查询。数据库视图有众多好处，不失为一种解决方案，但是也存在一些弊端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当数据库表结构变化需要同步修改视图，维护繁琐；&lt;/li&gt;
&lt;li&gt;业务需求变化可能导致频繁修改视图暴露的字段；&lt;/li&gt;
&lt;li&gt;有些场景可能只需要2表联合，有些场景需要更多表联合，要么建立一个大视图，要么需要建立多个类似视图，都不太好；&lt;/li&gt;
&lt;li&gt;视图的SQL会变得越来越庞大，难以维护；&lt;/li&gt;
&lt;li&gt;定义了实体类，JPA自动建表会把视图建成表；&lt;/li&gt;
&lt;li&gt;SQL SERVER会将视图的查询转换为对基本表的查询，性能不高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之将一部分业务逻辑放到数据库层维护，并不是一个特别好的方式。那么Spring Data JPA对多表查询还有哪些方法呢？有没有更好的选择呢？&lt;/p&gt;
    
    </summary>
    
      <category term="spring boot" scheme="http://zhongpan.tech/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="http://zhongpan.tech/tags/spring-boot/"/>
    
      <category term="jpa" scheme="http://zhongpan.tech/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>详解Spring Boot中日期时间格式处理</title>
    <link href="http://zhongpan.tech/2020/06/04/033-time-format-processing-in-springboot/"/>
    <id>http://zhongpan.tech/2020/06/04/033-time-format-processing-in-springboot/</id>
    <published>2020-06-04T01:36:22.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>在springboot中开发RESTful接口，经常会遇到日期时间转换相关的问题，例如我们明明输入看起来很正常的日期时间字符串，但是系统却报错无法解析：</p><blockquote><p>JSON parse error: Cannot deserialize value of type <code>java.time.OffsetDateTime</code> from String “2020-06-06 14:26:31”</p></blockquote><p>或者接口返回的日期时间字符串是一个很奇怪的字符串：</p><blockquote><p>2020-06-04 14:41:54.767135400+08:00</p></blockquote><p>如何正确的处理日期时间，本文将一探究竟。</p><a id="more"></a><h2 id="日期时间格式标准">日期时间格式标准</h2><p>有两个标准组织对日期时间格式进行规范，一个是IETF，一个是ISO。虽然IETF的定义更早，但是它存在一些问题，ISO的定义使用更普遍。但是不管哪种定义，我们常常使用的yyyy-MM-dd HH:mm:ss这种格式都不是标准的，你是否非常惊讶呢。</p><h3 id="ietf">IETF</h3><h4 id="rfc822-rfc2822-rfc5322"><a href="https://www.ietf.org/rfc/rfc822.txt" target="_blank" rel="noopener">RFC822</a>-&gt;<a href="https://www.ietf.org/rfc/rfc2822.txt" target="_blank" rel="noopener">RFC2822</a>-&gt;<a href>RFC5322</a></h4><p>日期时间的本文表示最早是在电子邮件消息中被讨论和定义，可以追溯到Internet刚诞生之时，<em>ARPA</em>NET使用的文本信息格式中所定义，也就是RFC822，发布于1982年。此后经过若干次修订，定型是RFC2822，最新版是RFC5322。</p><p>通过几个例子来了解下这种格式长什么样子。</p><p>最常见的样子如下，通过linux命令date可以打印：</p><blockquote><p>date --rfc-email</p><p>Thu, 04 Jun 2020 13:54:52 +0800</p></blockquote><p>有些格式已经不建议使用，RFC2822定义为过时的格式，如：</p><ul><li><p>年份使用4位以下数字</p></li><li><p>时区使用时区名，如UT，GMT</p></li></ul><h4 id="rfc1123"><a href="https://www.ietf.org/rfc/rfc1123.txt" target="_blank" rel="noopener">RFC1123</a></h4><p>RFC1123并不定义日期时间格式，而是描述应用程序之间通信协议的需求，包括各种应用层协议，如TELNET，FTP，SMTP等，涉及到日期时间格式的正是SMTP，它引用了RFC822，并说明了年份修改为2到4个数字，建议时区总是使用数字。</p><h4 id="rfc1036"><a href="https://www.ietf.org/rfc/rfc1036.txt" target="_blank" rel="noopener">RFC1036</a></h4><p>同样RFC1306也不定义日期时间格式，而是描述<a href="http://www.ruanyifeng.com/blog/2007/11/usenet.html" target="_blank" rel="noopener">USENET</a>中对日期时间的要求，同样引用了RFC822。</p><p>综上IETF的时间格式主要为电子邮件定义，但是只要以可读文本方式表示时间都可以使用。IETF的定义带有明显的时代和地区特征，并不具有国际通用性，也不便于阅读和解析，因此又出现了ISO的日期时间格式。</p><h3 id="iso8601-rfc3339">ISO8601,<a href="https://www.ietf.org/rfc/rfc3339.txt" target="_blank" rel="noopener">RFC3339</a></h3><p>ISO的日期时间格式有助于避免由许多不同的国家符号引起的国际通信混乱，并提高了计算机用户界面的可移植性。第一版发布于1988年。</p><p>RFC3339是ISO8601的概要版本。</p><p>先通过例子了解一下他们长什么样子。</p><blockquote><p>date --iso-8601=ns</p><p>2020-06-04T14:41:54,767135400+08:00</p><p>date --rfc-3339=ns</p><p>2020-06-04 14:41:54.767135400+08:00</p></blockquote><p>以上是最常见的样子，ISO8601相对于RFC5322有几个主要变化：</p><ul><li>多了秒的小数部分，用.或,连接</li><li>精度上可以从年到秒的小数部分都可以，例如2020、2020-06、2020-06-04都是合法的</li><li>日期和时间之间增加了连接字符T</li><li>可以表示一年的第几周的星期几，例如2020-W01-1表示2020年第一周的星期一</li><li>UTC时区可以简写为Z</li><li>年月日或时分秒之间的连接符可省略</li></ul><p>RFC3339和ISO8601的区别：</p><ul><li>RFC3339允许将日期和时间之间的连接符T换为空格</li><li>秒的小数部分通常使用.连接</li><li>未使用一年的第几周的星期几的表示</li></ul><h2 id="java日期时间编程接口">Java日期时间编程接口</h2><p>Java的发展过程中出现过几个不同的日期时间编程接口。java8之前的日期时间接口存在众所周知的问题，这时只能寻求第三方库库来解决，这就是joda，java8大量借鉴了joda，推出了新的日期时间库。自此，java8日期时间接口成为首选。</p><table><thead><tr><th></th><th>java8之前</th><th>java8</th><th>joda</th></tr></thead><tbody><tr><td>本地时间</td><td>java.util.Date</td><td>java.time.LocalDate<br>java.time.LocalTime<br>java.time.LocalDateTime</td><td>org.joda.time.LocalDate<br>org.joda.time.LocalTime<br>org.joda.time.LocalDateTime</td></tr><tr><td>带时区时间</td><td></td><td>java.time.OffsetTime<br>java.time.OffsetDateTime<br>java.time.ZonedDateTime</td><td>org.joda.time.DateTime</td></tr><tr><td>格式化和解析</td><td>java.text.DateFormat</td><td>java.time.format.DateTimeFormatter</td><td>org.joda.time.format.DateTimeFormatter</td></tr><tr><td>举例</td><td>Date date = new Date();<br>SimpleDateFormat fmt = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);<br>String str = fmt.format(date);<br>date = fmt.parse(“2020-06-06 15:13:25”);</td><td>LocalDateTime date = LocalDateTime.now();<br>DateTimeFormatter fmt = DateTimeFormatter.ofPattern(“yyyy-MM-dd HH:mm:ss”);<br>String str = fmt.format(date);<br>TemporalAccessor acc = fmt.parse(“2020-06-06 15:13:25”);<br>date = LocalDateTime.from(acc);</td><td>LocalDateTime date = LocalDateTime.now();<br>DateTimeFormatter fmt = DateTimeFormat.forPattern(“pattern”);<br>String str = fmt.print(date);<br>date = fmt.parseLocalDate(“2020-06-06 15:13:25”);</td></tr></tbody></table><p>以上各种日期时间编程接口都提供了格式化和解析接口，实现字符串和日期时间对象之间的互相转换，我们可以定制日期格式，例如常用的格式yyyy-MM-dd HH:mm:ss，那么格式化和解析都会按照这个格式，解析时如果不符合格式就会异常。</p><h2 id="sprintboot中如何处理日期时间">sprintboot中如何处理日期时间</h2><p>确切的说是如何处理json和java日期时间对象之间的转换。</p><p>springboot极大的简化了springmvc的开发，对于开发RESTful接口也是一样，开箱即用。这是通过autoconfigure和starter实现的。</p><p>首先引入spring-boot-starter-web依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-boot-starter-web会引入spring-boot-starter-json，spring-boot-starter-json又会引入jackson-databind，jackson-datatype-jdk8和jackson-datatype-jsr310。可见json的实现默认是使用的jackson。其中jackson-datatype-jsr310就包含了java8日期时间的序列化、反序列化方法。</p><p>其次springboot应用，也就是使用了@SpringBootApplication注解，通过autoconfigure对jackson进行了自动配置。实现代码在sprint-boot-autoconfigure的JacksonAutoConfiguration.java文件中。</p><p>其中有三个点对jackson进行配置：Jackson2ObjectMapperBuilder，Jackson2ObjectMapperBuilderCustomizer和ObjectMapper，以上所有配置最终都是影响ObjectMapper。</p><ul><li><p>Jackson2ObjectMapperBuilder是ObjectMapper的工厂，只有一个，所以这里使用了@ConditionalOnMissingBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(Jackson2ObjectMapperBuilder.class)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonObjectMapperBuilderConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function">Jackson2ObjectMapperBuilder <span class="title">jacksonObjectMapperBuilder</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">List&lt;Jackson2ObjectMapperBuilderCustomizer&gt; customizers)</span> </span>&#123;</span><br><span class="line">Jackson2ObjectMapperBuilder builder = <span class="keyword">new</span> Jackson2ObjectMapperBuilder();</span><br><span class="line">builder.applicationContext(applicationContext);</span><br><span class="line">customize(builder, customizers);</span><br><span class="line"><span class="keyword">return</span> builder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Jackson2ObjectMapperBuilder会调用Jackson2ObjectMapperBuilderCustomizer对builder进行定制，即上述customize方法，Jackson2ObjectMapperBuilderCustomizer可以有多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(Jackson2ObjectMapperBuilder.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JacksonProperties.class)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Jackson2ObjectMapperBuilderCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">StandardJackson2ObjectMapperBuilderCustomizer <span class="title">standardJacksonObjectMapperBuilderCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ApplicationContext applicationContext, JacksonProperties jacksonProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardJackson2ObjectMapperBuilderCustomizer(applicationContext, jacksonProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>最后你可以直接配置ObjectMapper，只能有一个，所以你需要指定@Primary，默认是通过builder创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(Jackson2ObjectMapperBuilder.class)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonObjectMapperConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function">ObjectMapper <span class="title">jacksonObjectMapper</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.createXmlMapper(<span class="keyword">false</span>).build();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>那么对于日期时间的处理，springboot的默认行为是怎么样的呢，默认的代码配置在上述StandardJackson2ObjectMapperBuilderCustomizer中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardJackson2ObjectMapperBuilderCustomizer</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Jackson2ObjectMapperBuilderCustomizer</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">          ......</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureDateFormat</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="comment">// We support a fully qualified class name extending DateFormat or a date</span></span><br><span class="line"><span class="comment">// pattern string value</span></span><br><span class="line">String dateFormat = <span class="keyword">this</span>.jacksonProperties.getDateFormat();</span><br><span class="line"><span class="keyword">if</span> (dateFormat != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; dateFormatClass = ClassUtils.forName(dateFormat, <span class="keyword">null</span>);</span><br><span class="line">builder.dateFormat((DateFormat) BeanUtils.instantiateClass(dateFormatClass));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line"><span class="comment">// Since Jackson 2.6.3 we always need to set a TimeZone (see</span></span><br><span class="line"><span class="comment">// gh-4170). If none in our properties fallback to the Jackson's</span></span><br><span class="line"><span class="comment">// default</span></span><br><span class="line">TimeZone timeZone = <span class="keyword">this</span>.jacksonProperties.getTimeZone();</span><br><span class="line"><span class="keyword">if</span> (timeZone == <span class="keyword">null</span>) &#123;</span><br><span class="line">timeZone = <span class="keyword">new</span> ObjectMapper().getSerializationConfig().getTimeZone();</span><br><span class="line">&#125;</span><br><span class="line">simpleDateFormat.setTimeZone(timeZone);</span><br><span class="line">builder.dateFormat(simpleDateFormat);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其逻辑是首先读取spring.jackson.date-format属性，如果不为空就会设置builder.dateFormat，如果是一个类（当然是从java.text.DateFormat派生），那么初始化为这个类的实例，否则认为配置的yyyy-MM-dd HH:mm:ss这种格式化字符串，然后创建SimpleDateFormat实例。</p><p>另外springmvc本身还有一个MappingJackson2HttpMessageConverter，其实也是配置Jackson2ObjectMapperBuilder。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在springboot中开发RESTful接口，经常会遇到日期时间转换相关的问题，例如我们明明输入看起来很正常的日期时间字符串，但是系统却报错无法解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSON parse error: Cannot deserialize value of type &lt;code&gt;java.time.OffsetDateTime&lt;/code&gt; from String “2020-06-06 14:26:31”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者接口返回的日期时间字符串是一个很奇怪的字符串：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2020-06-04 14:41:54.767135400+08:00&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何正确的处理日期时间，本文将一探究竟。&lt;/p&gt;
    
    </summary>
    
      <category term="spring boot" scheme="http://zhongpan.tech/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="http://zhongpan.tech/tags/spring-boot/"/>
    
      <category term="jackson" scheme="http://zhongpan.tech/tags/jackson/"/>
    
  </entry>
  
  <entry>
    <title>解决vscode调试python遇到connection refused问题</title>
    <link href="http://zhongpan.tech/2020/04/22/032-vscode-debug-connection-resused/"/>
    <id>http://zhongpan.tech/2020/04/22/032-vscode-debug-connection-resused/</id>
    <published>2020-04-22T14:00:48.000Z</published>
    <updated>2021-03-25T02:36:16.475Z</updated>
    
    <content type="html"><![CDATA[<p>最近用vscode远程开发功能调试一台centos虚拟机上的python的时候遇到connection refused问题，而之前在windows本地环境一直是好的，非常奇怪。研究了2天的时间，才把问题找到，通过定位问题，把vscode的调试器的架构也有了更深入的了解，下面记录下问题定位过程。</p><a id="more"></a><h2 id="环境">环境</h2><ul><li>VS Code version: 1.44.2</li><li>Python Extension version: 2020.4.74986</li><li>OS and version: centos7</li><li>Python version: 2.7.5</li></ul><h2 id="vscode调试器架构">vscode调试器架构</h2><p>官方参考：</p><p>vscode Debugger Extension：<a href="https://code.visualstudio.com/api/extension-guides/debugger-extension" target="_blank" rel="noopener">https://code.visualstudio.com/api/extension-guides/debugger-extension</a></p><p>Debug Adapter Protocol：<a href="https://microsoft.github.io/debug-adapter-protocol/overview" target="_blank" rel="noopener">https://microsoft.github.io/debug-adapter-protocol/overview</a></p><p><img src="https://code.visualstudio.com/assets/api/extension-guides/debugger-extension/debug-arch2.png" alt></p><p>为了解耦vscode和具体语言的调试器，中间增加了一个Debug Adapter，它是在独立进程运行的，vscode和Debug Adapter之间通过Debug Adapter Protocol通信。</p><p>Python的Debug Adapter就是在Microsoft Python Extension中实现的。</p><h2 id="深入调试交互过程">深入调试交互过程</h2><p>通过一个Windows正常环境来探索调式器交互过程。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Python: 当前文件"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"python"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">            <span class="attr">"console"</span>: <span class="string">"integratedTerminal"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">50624</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的launch.json指定了具体端口，便于我们分析进程之间的关系，打上断点，启动一个调试，然后通过端口分析进程之间的关系。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/156f29c4-75a7-4683-9faa-6da456ae6c13/index_files/7ac30b20-c6b4-4ba2-8251-eec7ec2ae513.png" alt></p><p>上述9088进程就是Debug Adapter，运行代码如下：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/156f29c4-75a7-4683-9faa-6da456ae6c13/index_files/af7e9413-271c-4256-aee5-2a5756386c06.png" alt></p><p>14272进程如下：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/156f29c4-75a7-4683-9faa-6da456ae6c13/index_files/6a6216cf-fe16-4636-82c3-0c7639e87059.png" alt></p><p>正是vscode终端打印的：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/156f29c4-75a7-4683-9faa-6da456ae6c13/index_files/0ce68707-927d-4d63-bebf-74cfe0b88a76.png" alt></p><p>ptvsd_launcher.py是调用的ptvsd，上述命令就是ptvsd --client --host localhost --port 50624 D:/test/pytest/main.py。</p><p>然后再结合阅读<a href="https://github.com/microsoft/vscode-python" target="_blank" rel="noopener">python-extension</a>和<a href="https://github.com/microsoft/ptvsd" target="_blank" rel="noopener">ptvsd</a>的源代码，终于理清上述进程关系，下面是launch的过程，attach的过程有所区别。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/156f29c4-75a7-4683-9faa-6da456ae6c13/index_files/167775ae-634e-4d74-9ae9-f04a74af8051.png" alt="image-20200423150535221"></p><ol><li>vscode Debugger UI启动一个调试，首先会创建Debug Adapter进程，就是上述9088进程，它们之间是通过stdin和stdout通信的。Python Debug Adapter的实现是通过派生node debug adapter实现的。</li><li>Debug Adapter进程会根据launch.json的host和port进行TCP监听，如果不设置host就是localhost，如果不设置port，会自动随机选择一个。</li><li>Debug Adapter启动调试程序，实际是通过ptvsd完成的，运行在单独的进程，就是上述14272进程，launch的情况下ptvsd以client mode运行，也就是ptvsd主动连接Debug Adapter，因为这时Debug Adapter先于调试程序运行，调试程序可以第一时间知道Debug Adapter的端口。如果是attach的情况，就需要IDE连接调试程序，告诉调试程序Debug Adapter的地址，然后调试程序再连接Debug Adapter。</li><li>调式程序连接到Debug Adapter，然后按照DAP进行调试交互。</li></ol><h2 id="问题定位">问题定位</h2><p>弄清楚调式的交互过程后，就容易定位问题了，connection refused问题就出在ptvsd连接Debug Adapter的时候，一开始以为是不是Debug Adapter退出了，但是ps查看进程是正常的。通过阅读源代码发现ptvsd连接Debug Adapter的超时时间可以在launch.json中设置，默认是20秒(20000)，我将timeout改大了一点，便于分析问题。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Python: 当前文件"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"python"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">            <span class="attr">"console"</span>: <span class="string">"integratedTerminal"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">50624</span>,</span><br><span class="line">            <span class="attr">"timeout"</span>: <span class="number">200000</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过netstat查看，发现Debug Adapter并不是绑定在127.0.0.1。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/156f29c4-75a7-4683-9faa-6da456ae6c13/index_files/2c58ea44-92a8-4f7f-bd07-88648de2a0e9.png" alt="image-20200423154359596"></p><p>进一步查看/etc/hosts文件，发现localhost正是10.0.2.15，是eth0的ip。</p><p>而Debug Adapter启动调试程序时的–host参数总是为localhost，不管launch.json中如何设置。</p><p>自此问题基本定位清楚：</p><ol><li><p>Debug Adapter中监听是通过node net模块实现，net模块对于localhost会通过getaddrinfo获取ip，而getaddrinfo会通过/etc/hosts查询ip；</p></li><li><p>ptvsd中是通过Python socket模块实现tcp通信，socke模块connect时，如果地址是localhost，它总是会使用127.0.0.1，bind也是一样。下述代码除了返回/etc/hosts中的ip，总是会加上127.0.0.1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.getaddrinfo(<span class="string">"localhost"</span>, <span class="literal">None</span>, socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure></li></ol><h2 id="问题解决">问题解决</h2><ol><li>方案1：launch.json中指定host为127.0.0.1且必须为127.0.0.1</li><li>方案2：Debug Adapter启动调试程序时的–host参数从launch.json中获取，同时launch.json中指定host为任意合法ip</li><li>Debug Adapter总是绑定到0.0.0.0，也就是任意地址</li><li>ptvsd连接Debug Adapter时也根据getaddrinfo将localhost转换为ip，并选择非127.0.0.1的ip</li></ol><p>第一种方案是最简单的，其他方案需要修改<a href="https://github.com/microsoft/vscode-python" target="_blank" rel="noopener">python-extension</a>或<a href="https://github.com/microsoft/ptvsd" target="_blank" rel="noopener">ptvsd</a>的源代码。</p><p>以上都是仍然使用ptvsd的解决方法，还有一个方法是切换到最新的debugpy也可以解决问题，参照<a href="https://github.com/microsoft/ptvsd/issues/2104" target="_blank" rel="noopener">microsoft/ptvsd#2104</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用vscode远程开发功能调试一台centos虚拟机上的python的时候遇到connection refused问题，而之前在windows本地环境一直是好的，非常奇怪。研究了2天的时间，才把问题找到，通过定位问题，把vscode的调试器的架构也有了更深入的了解，下面记录下问题定位过程。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://zhongpan.tech/categories/python/"/>
    
    
      <category term="vscode" scheme="http://zhongpan.tech/tags/vscode/"/>
    
      <category term="python" scheme="http://zhongpan.tech/tags/python/"/>
    
      <category term="debug" scheme="http://zhongpan.tech/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记(一)-搭建环境</title>
    <link href="http://zhongpan.tech/2020/04/14/031-elasticsearch-learning-notes-01/"/>
    <id>http://zhongpan.tech/2020/04/14/031-elasticsearch-learning-notes-01/</id>
    <published>2020-04-14T00:26:33.000Z</published>
    <updated>2021-03-25T02:36:16.471Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch目前的发展可谓如日中天，DBEngine上在搜索引擎领域位列第一，作为后来者热度远高于排第二、三的Splunk和Solr。Elasticsearch的创造者叫Shay Banon，最初是因为Lucence的接口使用困难，开发了一个库Compass，让Lucence更好用，2010年Shay Banon对Compass进行重写，把它变成一个高性能的、分布式的服务端软件，取名叫Elasticsearch，并在github开源。这背后还有一个温情的故事，据说起因是为了给新婚老婆写一个菜谱搜索应用，但是最后菜谱应用没有写出来，倒是造就了一个伟大的软件。</p><p>Elasticsearch发展非常快，2010年2月发布第一个版本，2012年成立Elastic公司，2014年开始商业化，2018年纽交所上市，在全球股市低迷的背景下上市当天仍大涨94%，创造了开源软件的传奇。而Elastic公司非常的厚道，坚持开源路线，从6.3版本开始将其收费部分x-pack也<a href="https://www.elastic.co/cn/what-is/open-x-pack" target="_blank" rel="noopener">&quot;开源&quot;</a>，x-pack的基础功能终身免费，不需要注册，其中就包括安全方面必须的HTTPS，权限控制等。</p><p>今天开始我想通过一系列文章来探索和学习一下ES，第一篇介绍一下ES的基本概念，搭建单节点的ES，通过图形客户端去探索ES的数据结构和操作，通过监控了解ES运行状态，建立对ES总体上的一个认识。</p><a id="more"></a><h2 id="es简介">ES简介</h2><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c99df748-36a9-4aed-93ff-826fdaeae2b5/index_files/26127623-8cc2-4f52-bd26-9a36673a3239.png" alt="image-20200414090725387"></p><p>ES是基于Apache Lucence的一个开源的，高性能的分布式搜索引擎，Java语言开发，对外提供RESTful接口，使用方便。</p><p>ES从6.3版本开始内置支持SQL，当然只支持查询操作，从而降低了学习其特有query DSL的成本，更是让上层基于SQL的应用可以无缝和ES对接。虽然ES越来越像一个数据库，但是它们之间还是有区别的，最显著的一个区别是，ES添加数据不是立刻刷新索引的，有一个刷新间隔，默认1s，所以不会立刻查询到，这就是所谓的近实时，ES强在检索和分析。所以ES和关系数据库的区别像是OLAP和OLTP的区别，适用于不同场景。</p><p>ES主要的应用场景，一个是作为应用的前端检索缓存，提高海量数据的检索效率和做一些聚合检索，先从ES检索，然后再从后端存储检索。第二个是日志和监控，以ES为中心，Elastic公司发展起一个生态圈，之前叫ELK，也就是Elasticsearch、Logstash和Kibana，后来加入Beats，名字改成了Elastic Stack。以Kibana为入口，发展到上层的各种分析和可视化应用，包括热门的机器学习。</p><p>先理解ES的一些基本概念，可以和关系数据库做一个类比：</p><ul><li>index：类似关系数据库的表，但是index不需要预先定义schema。</li><li>document：类似关系数据库的记录，json格式。</li><li>mapping：也就是类似关系数据的schema了，可以显式定义，也可以添加document时ES自动识别创建。可以指定mapping为严格模式，这样添加数据库就必须严格符合mapping中定义的字段。</li><li>type：从7.0开始删除了，其实就是mapping的名字，一个index下只有一个type，有点鸡肋。虽然删除了，但是其实内部默认还是有一个type，名字固定是_doc。</li><li>index template：创建index时自动对index做一些设置，例如index的主分片个数，复制分片个数，mapping字段的类型等等。</li><li>ilm：也就是index lifecycle management，可以对数据分为Hot，Warm，Cold，Delete四个阶段，可以相应的定义不同的策略。</li></ul><h2 id="es安装">ES安装</h2><p>最简单的方式就是用docker来运行。</p><p>官方参考文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html</a></p><p>我使用的最新的7.6.2版本，单节点运行时需要指定discovery.type=single-node，以前老的版本是不需要的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><p>为了后续配置方面可以把配置文件放到host机器上，然后mount到容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name es -p 9200:9200 -p 9300:9300  -v $(pwd)/elasticsearch.docker.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /etc/localtime:/etc/localtime elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><p>这里加入-v /etc/localtime:/etc/localtime是为了将容器的时间和host保持一致，后面再讲为什么。</p><p>配置文件elasticsearch.docker.yml如下。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cluster.name:</span> <span class="string">"es_cluster"</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">discovery.type:</span> <span class="string">single-node</span></span><br></pre></td></tr></table></figure><p>从上面命令看到ES暴露2个端口，9200用于提供RESTful接口，9300端口提供TCP的内部协议通信，9300对外的访问在7.0标识为Deprecated，只有集群内部之间仍通过9300通信。</p><p>通过curl就可以很方便的操作ES。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:9200</span><br></pre></td></tr></table></figure><p>返回如下内容表示ES启动正常。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"903d9b3ecb97"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"es_cluster"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"zV0tEFQ4TgqtyzsabtzMMg"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"7.6.2"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2020-03-26T06:34:37.794943Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"8.4.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图形客户端">图形客户端</h2><p>推荐一个图形客户端<a href="https://github.com/appbaseio/dejavu/" target="_blank" rel="noopener">dejavu</a>，使用reactjs开发，相比常用的elasticsearch-head插件更加现代化一些，功能也丰富一些，对于探索ES非常有帮助。</p><p>为了解决跨站访问问题，需要修改ES的配置如下，其中http.cors.allow-origin也可以指定为具体的地址，也就是dejavu的地址，例如http://localhost:1358。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cluster.name:</span> <span class="string">"es_cluster"</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="string">http.cors.allow-headers:</span> <span class="string">X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization</span></span><br><span class="line"><span class="string">http.cors.allow-credentials:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后重启一下ES。</p><p>dejavu也支持docker运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=es-ui -p 1358:1358 -d appbaseio/dejavu</span><br></pre></td></tr></table></figure><p>访问http://localhost:1358即可使用。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c99df748-36a9-4aed-93ff-826fdaeae2b5/index_files/127ac116-87b1-4bff-b4fd-f6e35dc086e3.png" alt="image-20200414143846241"></p><p>输入ES地址和index名(*表示所有)就可以开始读取和操作document和mapping。目前不支持index tempalte，ILM策略等。</p><p>需要注意如果ES是空的是连接不上的，必须至少有一个index。</p><h2 id="监控">监控</h2><p>ES最常用的场景是用于监控和分析，对ES自身的监控自然也不在话下。ES本生提供了丰富的监控指标，结合Kibana可以将他们可视化。通过监控可以让我们更了解ES内部的细节。</p><h3 id="kibana安装">Kibana安装</h3><p>官方文档：<a href="https://www.elastic.co/guide/en/kibana/7.6/docker.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/kibana/7.6/docker.html</a></p><p>同样使用docker运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --link es:elasticsearch -p 5601:5601 -v $(pwd)/kibana.docker.yml:/usr/share/kibana/config/kibana.yml -v /etc/localtime:/etc/localtime --name kibana kibana:7.6.2</span><br></pre></td></tr></table></figure><p>–link可以在kibana容器中通过http://elasticsearch:9200访问ES。</p><p>配置文件kibana.docker.yml如下。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="string">server.host:</span> <span class="string">"0"</span></span><br><span class="line"><span class="string">elasticsearch.hosts:</span> <span class="string">[</span> <span class="string">"http://elasticsearch:9200"</span> <span class="string">]</span></span><br><span class="line"><span class="string">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>kibana中对ES的监控是在Stack Monitoring功能中，其中也包含对Kibana，Logstash及Beats的监控。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c99df748-36a9-4aed-93ff-826fdaeae2b5/index_files/4b1883ba-45c5-4276-be81-c10b03f59b87.png" alt="image-20200414145927599"></p><p>数据采集有两种方式，通过Metricbeat采集或内部采集，官方推荐前者：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c99df748-36a9-4aed-93ff-826fdaeae2b5/index_files/507d79b8-014a-4b7e-a496-80b8da02bf25.png" alt="image-20200414150035168"></p><h3 id="时区问题">时区问题</h3><p>先说遇到的一个问题，从Kibana查询最近一个小时的数据会发现查询不到，但是采集是正常的，也可以看到监控的index已经有数据了。</p><p>问题原因是访问kibana的机器是用的本地时间，而ES、Kibana运行的机器是UTC时间。需要把ES运行的机器改成本地时间。ES是运行在容器中的，问题就变成了怎么修改容器的时区。答案就是先改Host的，然后让容器和Host保持一致。我是用的centos，以下是centos的修改方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo timedatectl set-timezone Asia/Shanghai</span><br><span class="line">sudo hwclock --localtime -w</span><br><span class="line">sudo timedatectl set-ntp yes</span><br></pre></td></tr></table></figure><p>ES的容器基础镜像也是centos，所以运行容器的时候加上-v /etc/localtime:/etc/localtime即可。</p><h3 id="通过内部采集">通过内部采集</h3><p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/monitoring-production.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/monitoring-production.html</a></p><p>先来看第一种方式，非常简单，通过kibana图形界面就可以操作。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c99df748-36a9-4aed-93ff-826fdaeae2b5/index_files/bd4167fa-d109-4de5-ad69-85729ddf5971.png" alt="image-20200414161133787"></p><p>点击Turn on monitoring就可以了，Kibana会帮我们将ES的xpack.monitoring.collection.enabled设为true，你也可以通过Kibana的Dev Tools中的Console自己修改，是一样的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  &quot;persistent&quot;: &#123;</span><br><span class="line">    &quot;xpack.monitoring.collection.enabled&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外有几个参数也很重要，它们默认是true的，如果它们任意一个为false，那么也无法监控。</p><ul><li><p>xpack.monitoring.enabled：决定是否启用监控</p></li><li><p>xpack.monitoring.elasticsearch.collection.enabled：决定是否采集elasticsearch</p></li></ul><p>内部采集是Kibana默认通过<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/local-exporter.html" target="_blank" rel="noopener"><code>local</code> exporter</a>保存在被监控ES集群中，index名为.monitoring-*，例如对kibana的采集数据的index形如.monitorning-kibana-7-2020.04.13，每天一个。</p><h3 id="通过metricbeat采集">通过Metricbeat采集</h3><p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/configuring-metricbeat.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/configuring-metricbeat.html</a></p><p>这是官方推荐的方式，两种方式二选一。</p><p>首先同样需要ES的xpack.monitoring.collection.enabled设置为true，为了禁用内部采集将xpack.monitoring.elasticsearch.collection.enabled设置为false。</p><p>然后安装Metricbeat，官方文档：<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.6/running-on-docker.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/metricbeat/7.6/running-on-docker.html</a></p><p>同样用Docker运行，分两步，第一步是setup过程，主要是初始化一些数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --link kibana:kibana --link es:elasticsearch \</span><br><span class="line">docker.elastic.co/beats/metricbeat:7.6.2 \</span><br><span class="line">setup -E setup.kibana.host=kibana:5601 \</span><br><span class="line">-E output.elasticsearch.hosts=[&quot;elasticsearch:9200&quot;]</span><br></pre></td></tr></table></figure><p>第二步启动Metricbeat。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --link es:elasticsearch \</span><br><span class="line">  --name=metricbeat \</span><br><span class="line">  --user=root \</span><br><span class="line">  --volume=&quot;$(pwd)/metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml:ro&quot; \</span><br><span class="line">  --volume=&quot;/var/run/docker.sock:/var/run/docker.sock:ro&quot; \</span><br><span class="line">  --volume=&quot;/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro&quot; \</span><br><span class="line">  --volume=&quot;/proc:/hostfs/proc:ro&quot; \</span><br><span class="line">  --volume=&quot;/:/hostfs:ro&quot; \</span><br><span class="line">  docker.elastic.co/beats/metricbeat:7.6.2 metricbeat</span><br></pre></td></tr></table></figure><p>这里可能会遇到一个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exiting: error loading config file: config file (&quot;metricbeat.yml&quot;) must be owned by the user identifier (uid=0) or root</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exiting: error loading config file: config file (&quot;metricbeat.yml&quot;) can only be writable by the owner but the permissions are &quot;-rw-rw-r--&quot; (to fix the permissions use: &apos;chmod go-w /usr/share/metricbeat/metricbeat.yml&apos;)</span><br></pre></td></tr></table></figure><p>原因参考：<a href="https://www.elastic.co/guide/en/beats/libbeat/5.3/config-file-permissions.html#config-file-permissions" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/libbeat/5.3/config-file-permissions.html#config-file-permissions</a></p><p>因为在host中我是用的non-root用户uid1000，到容器里面的uid1000是metricbeat用户，但是beats要求配置文件必须是root拥有并且权限为0644。解决办法是把metricbeat.docker.yml的owner改成root。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root metricbeat.docker.yml</span><br><span class="line">sudo chmod 0644 metricbeat.docker.yml</span><br></pre></td></tr></table></figure><p>配置文件metricbeat.docker.yml如下。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">metricbeat.config:</span></span><br><span class="line"><span class="attr">  modules:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line">    <span class="comment"># Reload module configs as they change:</span></span><br><span class="line">    <span class="string">reload.enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="string">metricbeat.autodiscover:</span></span><br><span class="line"><span class="attr">  providers:</span></span><br><span class="line"><span class="attr">    - type:</span> <span class="string">docker</span></span><br><span class="line">      <span class="string">hints.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">metricbeat.modules:</span></span><br><span class="line"><span class="attr">- module:</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">  metricsets:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ccr</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">enrich</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cluster_stats</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">index</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">index_recovery</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">index_summary</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ml_job</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_stats</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">shard</span></span><br><span class="line"><span class="attr">  period:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["http://elasticsearch:9200"]</span></span><br><span class="line">  <span class="comment">#username: "user"</span></span><br><span class="line">  <span class="comment">#password: "secret"</span></span><br><span class="line">  <span class="string">xpack.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line"><span class="attr">  - add_cloud_metadata:</span> <span class="string">~</span></span><br><span class="line"></span><br><span class="line"><span class="string">output.elasticsearch:</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">'$&#123;ELASTICSEARCH_HOSTS:elasticsearch:9200&#125;'</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">'$&#123;ELASTICSEARCH_USERNAME:&#125;'</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">'$&#123;ELASTICSEARCH_PASSWORD:&#125;'</span></span><br></pre></td></tr></table></figure><p>用dejavu可以查看到metricbeat写入的index形如.monitoring-es-7-mb-2020.04.13，也是每天一个。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c99df748-36a9-4aed-93ff-826fdaeae2b5/index_files/8ad51466-2dd8-4bb9-8f57-24feb19b8ff6.png" alt="img"></p><p>回到Kibana的Stack Monitoring可以查看到ES和Kibana的监控了，其中ES是通过Metricbeat采集的数据，而Kibana是通过第一种方式内部采集的。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/c99df748-36a9-4aed-93ff-826fdaeae2b5/index_files/de40e031-6037-404a-80c7-708614114f1b.png" alt="image-20200414171354181"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Elasticsearch目前的发展可谓如日中天，DBEngine上在搜索引擎领域位列第一，作为后来者热度远高于排第二、三的Splunk和Solr。Elasticsearch的创造者叫Shay Banon，最初是因为Lucence的接口使用困难，开发了一个库Compass，让Lucence更好用，2010年Shay Banon对Compass进行重写，把它变成一个高性能的、分布式的服务端软件，取名叫Elasticsearch，并在github开源。这背后还有一个温情的故事，据说起因是为了给新婚老婆写一个菜谱搜索应用，但是最后菜谱应用没有写出来，倒是造就了一个伟大的软件。&lt;/p&gt;
&lt;p&gt;Elasticsearch发展非常快，2010年2月发布第一个版本，2012年成立Elastic公司，2014年开始商业化，2018年纽交所上市，在全球股市低迷的背景下上市当天仍大涨94%，创造了开源软件的传奇。而Elastic公司非常的厚道，坚持开源路线，从6.3版本开始将其收费部分x-pack也&lt;a href=&quot;https://www.elastic.co/cn/what-is/open-x-pack&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;quot;开源&amp;quot;&lt;/a&gt;，x-pack的基础功能终身免费，不需要注册，其中就包括安全方面必须的HTTPS，权限控制等。&lt;/p&gt;
&lt;p&gt;今天开始我想通过一系列文章来探索和学习一下ES，第一篇介绍一下ES的基本概念，搭建单节点的ES，通过图形客户端去探索ES的数据结构和操作，通过监控了解ES运行状态，建立对ES总体上的一个认识。&lt;/p&gt;
    
    </summary>
    
      <category term="elastic stack" scheme="http://zhongpan.tech/categories/elastic-stack/"/>
    
    
      <category term="elasticsearch" scheme="http://zhongpan.tech/tags/elasticsearch/"/>
    
      <category term="kibana" scheme="http://zhongpan.tech/tags/kibana/"/>
    
      <category term="metricbeat" scheme="http://zhongpan.tech/tags/metricbeat/"/>
    
  </entry>
  
  <entry>
    <title>vscode调试springmvc应用</title>
    <link href="http://zhongpan.tech/2020/03/27/030-debug-springmvc-in-vscode/"/>
    <id>http://zhongpan.tech/2020/03/27/030-debug-springmvc-in-vscode/</id>
    <published>2020-03-27T09:28:25.000Z</published>
    <updated>2021-03-25T02:36:16.471Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot已经成为开发web应用的标配，通过Spring Initializr创建Spring应用时，Spring Boot已经是必选项。Spring官方提供两个重要开发工具：</p><ul><li>Spring Tools 4：包括eclipse、vscode和Theia三个版本，其中针对eclipse的就是之前的STS(Spring Tools Suit)，是一个基于eclipse的定制版本，而针对vscode的其实就是<a href="https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-boot-dev-pack" target="_blank" rel="noopener">Spring Boot Extension Pack</a>，是一系列vscode插件。其中Spring Boot Dashboard插件提供对spring boot应用的调试支持。</li><li>spring initializr：用于创建一个spring模板项目，目前Spring Boot是必选项。</li></ul><p>如果你使用的Spring Boot，那么vscode调试不是问题，已经有很好的支持。但是你可能出于学习的目的，创建的单纯Spring mvc项目，那么调试就需要一番折腾了。</p><a id="more"></a><h2 id="前提">前提</h2><p>安装Java Extension Pack，配置好Java开发环境。使用maven管理项目。</p><h2 id="运行">运行</h2><p>首先要将Spring应用运行起来，最简单的方法是通过maven插件实现，例如jetty插件，当然tomcat也是一样的。在pom.xml中加入jetty-maven-plugin，详细配置可<a href="http://www.eclipse.org/jetty/documentation/current/jetty-maven-plugin.html" target="_blank" rel="noopener">参考</a>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>springmvc-study<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.27.v20200227<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">webApp</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/$&#123;project.build.finalName&#125;<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">webApp</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stopKey</span>&gt;</span>CTRL+C<span class="tag">&lt;/<span class="name">stopKey</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stopPort</span>&gt;</span>8999<span class="tag">&lt;/<span class="name">stopPort</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>10<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scanTargets</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">scanTarget</span>&gt;</span>src/main/webapp/WEB-INF/web.xml<span class="tag">&lt;/<span class="name">scanTarget</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">scanTargets</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后通过mvn jetty:run就可以运行了，而且还支持热部署，当你修改源文件后，会自动重新编译加载。</p><h2 id="调试">调试</h2><p>调试是通过java远程调试实现的，设置maven_opts环境变量后运行mvn jetty:run或者通过vscode的task功能运行，配置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // See https://go.microsoft.com/fwlink/?LinkId=733558</span><br><span class="line">    // for the documentation about the tasks.json format</span><br><span class="line">    "version": "2.0.0",</span><br><span class="line">    "tasks": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"Jetty debug"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"mvn jetty:run"</span>,</span><br><span class="line">            <span class="attr">"group"</span>: <span class="string">"build"</span>,</span><br><span class="line">            <span class="attr">"isBackground"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"env"</span>: &#123;</span><br><span class="line">                    <span class="attr">"maven_opts"</span>: <span class="string">"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在debug视图中创建launch.json：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"java"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Debug (Attach) - Remote"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"attach"</span>,</span><br><span class="line">            <span class="attr">"hostName"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">8000</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以愉快的调试了✌。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot已经成为开发web应用的标配，通过Spring Initializr创建Spring应用时，Spring Boot已经是必选项。Spring官方提供两个重要开发工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Tools 4：包括eclipse、vscode和Theia三个版本，其中针对eclipse的就是之前的STS(Spring Tools Suit)，是一个基于eclipse的定制版本，而针对vscode的其实就是&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-boot-dev-pack&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot Extension Pack&lt;/a&gt;，是一系列vscode插件。其中Spring Boot Dashboard插件提供对spring boot应用的调试支持。&lt;/li&gt;
&lt;li&gt;spring initializr：用于创建一个spring模板项目，目前Spring Boot是必选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你使用的Spring Boot，那么vscode调试不是问题，已经有很好的支持。但是你可能出于学习的目的，创建的单纯Spring mvc项目，那么调试就需要一番折腾了。&lt;/p&gt;
    
    </summary>
    
      <category term="spring mvc" scheme="http://zhongpan.tech/categories/spring-mvc/"/>
    
    
      <category term="vscode" scheme="http://zhongpan.tech/tags/vscode/"/>
    
      <category term="debug" scheme="http://zhongpan.tech/tags/debug/"/>
    
      <category term="spring mvc" scheme="http://zhongpan.tech/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>深入理解feign、ribbon和hystrix三者的关系及超时配置</title>
    <link href="http://zhongpan.tech/2020/03/23/029-hystrix-ribbon-feign-relationship/"/>
    <id>http://zhongpan.tech/2020/03/23/029-hystrix-ribbon-feign-relationship/</id>
    <published>2020-03-23T06:48:09.000Z</published>
    <updated>2021-03-25T02:36:16.471Z</updated>
    
    <content type="html"><![CDATA[<p>spring cloud中有几个重要的组件，深入理解它们之间的关系才能更好的使用它们：</p><ul><li>ribbon：实现服务定位和客户端负载均衡；</li><li>hystrix：实现服务熔断、服务降级、资源隔离等；</li><li>feign：声明式的http客户端，用于服务之间的http调用。相比于resttemplate，feign与ribbon和hystrix集成更友好，是spring cloud的顶层组件。</li></ul><p>上述ribbon和hystrix都是netflix贡献组件，目前它们都处于<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.1.RELEASE/reference/html/#modules-in-maintenance-mode" target="_blank" rel="noopener">维护模式</a>，不再增加新特性，将逐渐被spring cloud官方组件取代，例如从Hoxton.M2开始整合spring-cloud-loadbalancer用于替换ribbon，但目前还不成熟，还是老老实实用ribbon，而断路器方面spring cloud抽象了Spring Cloud Circuit Breaker，hystrix只是其中一个实现，还有其他实现可选，例如阿里贡献的<a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">sentinel</a>。</p><a id="more"></a><h2 id="三者关系">三者关系</h2><p>hystrix和ribbon并没有直接关系。</p><p>feign底层默认是通过ribbon进行服务定位和负载均衡，使用feign时你感知不到ribbon的存在，也可以不使用ribbon。如果你使用resttemplate，则需要通过@LoadBalanced使用ribbon。</p><p>hystrix有两种使用情况，一种是在controller的handler方法上增加@HystrixCommand注解，作用的是整个handler；另一种情况是调用其他app服务时，也就是@feignclient注解的http客户端，此时调用这个http客户端的handler可不需要hystrix。</p><p>总结一下：服务之间的http调用可通过feign实现，feign底层是通过ribbon实现服务发现和负载均衡，不管是否使用feign，ribbon都是必不可少的；feign客户端可选的可启用hystrix支持，hystrix也可以用在服务端整个handler上。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/ad672b12-ef2f-41e2-a4b3-1cad41647cb3/index_files/ff291d99-a22f-4638-898a-32a11e165433.png" alt="image-20200323210614496"></p><p>如上所示，app1.controll1.handler1调用app2.controller2.handler2的过程是：</p><ol><li>如果feign.hystrix.enabled=true（默认为false），则feign通过jdk动态代理，将调用封装为HystrixCommand，在hystrix thread pool中执行，否则进入3和4；</li><li>hystrix thread pool中执行http调用，还是回调feign接口；</li><li>feign扩展了ribbon客户端，使用ribbon的服务定位和负载均衡获得可用服务；</li><li>feign扩展的ribbon客户端发起对app2.controller2.handler2的http请求，ribbon可以开启重试，如果请求超时则自动重试。</li></ol><p>了解上述关系对于如何设置超时时间至关重要。如果hystrix的超时时间到达，则1就返回fallback了，不会等到4执行完。一般hystrix的超时时间要大于feign的超时时间。</p><p>另外上述服务端设置了断路器，实际上客户端可以不用设置。</p><h2 id="超时相关配置">超时相关配置</h2><h3 id="feign">feign</h3><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.2.2.RELEASE/reference/html/" target="_blank" rel="noopener">官方参考</a></p><p>有两种配置方式：</p><ol><li>属性配置，包括全局和实例；</li><li>代码配置，也包括全局和实例。</li></ol><p>优先级：实例&gt;全局，属性&gt;代码</p><p>属性总是优先的，可以设置feign.client.default-to-properties为false，使得代码配置优先。</p><p>全局属性配置名默认是default，可以设置feign.client.default-config为其他名字。</p><h4 id="属性配置">属性配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line">      <span class="comment"># 全局配置</span></span><br><span class="line"><span class="attr">      default:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span>  </span><br><span class="line">      <span class="comment"># 实例配置，feignName即@feignclient中的value，也就是服务名</span></span><br><span class="line"><span class="attr">      feignName:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h4 id="代码配置">代码配置</h4><h5 id="全局代码配置">全局代码配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microservice2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.support.SpringMvcContract;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Request;</span><br><span class="line"><span class="keyword">import</span> feign.Retryer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignClientConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Request.<span class="function">Options <span class="title">feignRequestOptions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认连接超时10秒，读取超时60秒</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Request.Options();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认重试是关闭的</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Retryer <span class="title">feignRetry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认重试5次，首次间隔100毫秒，最大间隔1秒</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retryer.Default();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microservice2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启注册服务</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(defaultConfiguration = FeignClientConfiguration.class) <span class="comment">//开启feign消费服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实例代码配置">实例代码配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microservice2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"microservice1"</span>, fallback = HelloServiceHystric.class, configuration = FeignClientConfiguration.class) <span class="comment">// 访问微服务1，指定断路器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hystrix">hystrix</h3><p><a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">官方参考</a></p><p>hystrix有四种配置方式：</p><ol><li>全局代码默认属性；</li><li>全局属性配置；</li><li>实例代码配置；</li><li>实例属性配置。</li></ol><p>优先级：1&lt;2&lt;3&lt;4</p><p>和feign一样，也是属性优先代码，实例优先全局。</p><h4 id="属性配置-v2">属性配置</h4>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line">    <span class="comment">#全局默认配置</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line">      <span class="comment">#线程隔离相关</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        timeout:</span></span><br><span class="line">          <span class="comment">#是否给方法执行设置超时时间，默认为true。一般我们不要改。</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line">          <span class="comment">#配置请求隔离的方式，这里是默认的线程池方式。还有一种信号量的方式semaphore。</span></span><br><span class="line"><span class="attr">          strategy:</span> <span class="string">THREAD</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line">            <span class="comment">#方式执行的超时时间，默认为1000毫秒，在实际场景中需要根据情况设置</span></span><br><span class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">10000</span></span><br><span class="line">    <span class="comment"># 实例配置</span></span><br><span class="line"><span class="attr">    HystrixCommandKey:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        timeout:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          strategy:</span> <span class="string">THREAD</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><h4 id="代码配置-v2">代码配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 开启配置更新</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;serviceName&#125;"</span>) <span class="comment">// 读配置文件的这个属性</span></span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"helloError"</span>, commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"4000"</span>) &#125;) <span class="comment">// 指定断路器方法，断路器监控用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(HttpServletRequest request, @RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"Hugo"</span>)</span> String name)</span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"ServerName:&#123;&#125; time:&#123;&#125;"</span>, request.getServerName(),</span><br><span class="line">                DateFormatUtils.format(<span class="keyword">new</span> Date(), <span class="string">"yyyyMMdd HH:mm:ss"</span>));</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name + <span class="string">", my name is "</span> + serviceName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloError</span><span class="params">(HttpServletRequest request, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"microservice1 hystrix,"</span> + name + <span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="feign中的hystrix怎么配置">feign中的hystrix怎么配置</h4><p>只能通过属性设置，那么commandkey是什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microservice2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"microservice1"</span>, fallback = HelloServiceHystric.class, configuration = FeignClientConfiguration.class) <span class="comment">// 访问微服务1，指定断路器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中默认行为如下，groupkey为&quot;microservice1&quot;，commandkey为&quot;HelloService#hello(String)&quot;，threadpoolkey为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SetterFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a hystrix setter appropriate for the given target and method</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  HystrixCommand.<span class="function">Setter <span class="title">create</span><span class="params">(Target&lt;?&gt; target, Method method)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Default behavior is to derive the group key from &#123;<span class="doctag">@link</span> Target#name()&#125; and the command key from</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@link</span> Feign#configKey(Class, Method)&#125;.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Default</span> <span class="keyword">implements</span> <span class="title">SetterFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HystrixCommand.<span class="function">Setter <span class="title">create</span><span class="params">(Target&lt;?&gt; target, Method method)</span> </span>&#123;</span><br><span class="line">      String groupKey = target.name();</span><br><span class="line">      String commandKey = Feign.configKey(target.type(), method);</span><br><span class="line">      <span class="keyword">return</span> HystrixCommand.Setter</span><br><span class="line">          .withGroupKey(HystrixCommandGroupKey.Factory.asKey(groupKey))</span><br><span class="line">          .andCommandKey(HystrixCommandKey.Factory.asKey(commandKey));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Feign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">configKey</span><span class="params">(Class targetType, Method method)</span> </span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    builder.append(targetType.getSimpleName());</span><br><span class="line">    builder.append(<span class="string">'#'</span>).append(method.getName()).append(<span class="string">'('</span>);</span><br><span class="line">    <span class="keyword">for</span> (Type param : method.getGenericParameterTypes()) &#123;</span><br><span class="line">      param = Types.resolve(targetType, targetType, param);</span><br><span class="line">      builder.append(Types.getRawType(param).getSimpleName()).append(<span class="string">','</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (method.getParameterTypes().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      builder.deleteCharAt(builder.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> builder.append(<span class="string">')'</span>).toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这样设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line">    <span class="string">HelloService#hello(String):</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        timeout:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          strategy:</span> <span class="string">THREAD</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>也可以改变上述commandkey的默认行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.microservice2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandGroupKey;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Target;</span><br><span class="line"><span class="keyword">import</span> feign.hystrix.SetterFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignClientConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetterFactory <span class="title">feignHystrixSetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySetterFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySetterFactory</span> <span class="keyword">implements</span> <span class="title">SetterFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HystrixCommand.<span class="function">Setter <span class="title">create</span><span class="params">(Target&lt;?&gt; target, Method method)</span> </span>&#123;</span><br><span class="line">      String groupKey = target.name();</span><br><span class="line">      String commandKey = target.type().getName();</span><br><span class="line">      <span class="keyword">return</span> HystrixCommand.Setter</span><br><span class="line">          .withGroupKey(HystrixCommandGroupKey.Factory.asKey(groupKey))</span><br><span class="line">          .andCommandKey(HystrixCommandKey.Factory.asKey(commandKey));</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样commandkey就会变成&quot;com.example.microservice2.HelloService&quot;。</p><h3 id="ribbon">ribbon</h3><p><a href="https://github.com/Netflix/ribbon/wiki/Getting-Started" target="_blank" rel="noopener">官方参考</a></p><p>ribbon只有属性配置，同样存在全局和实例配置，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;clientName&gt;.&lt;nameSpace&gt;.&lt;propertyName&gt;=&lt;value&gt;</span><br></pre></td></tr></table></figure><p>nameSpace是可配置的，默认为ribbon。clientName可为远端服务名，即@feignclient的value，空表示全局配置。</p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"> <span class="comment"># 服务最大重试次数,不包含第一次请求，默认0</span></span><br><span class="line"><span class="attr"> MaxAutoRetries:</span> <span class="number">5</span></span><br><span class="line"> <span class="comment"># 负载均衡切换次数,如果服务注册列表小于 nextServer count 那么会循环请求  A &gt; B &gt;　A，默认1</span></span><br><span class="line"><span class="attr"> MaxAutoRetriesNextServer:</span> <span class="number">3</span></span><br><span class="line"> <span class="comment">#是否所有操作都进行重试</span></span><br><span class="line"><span class="attr"> OkToRetryOnAllOperations:</span> <span class="literal">false</span></span><br><span class="line"> <span class="comment">#连接超时时间，单位为毫秒，默认2秒</span></span><br><span class="line"><span class="attr"> ConnectTimeout:</span> <span class="number">3000</span></span><br><span class="line"> <span class="comment">#读取的超时时间，单位为毫秒，默认5秒</span></span><br><span class="line"><span class="attr"> ReadTimeout:</span> <span class="number">3000</span></span><br><span class="line"><span class="comment"># 实例配置</span></span><br><span class="line"><span class="attr">clientName:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">   MaxAutoRetries:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">   MaxAutoRetriesNextServer:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">   OkToRetryOnAllOperations:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">   ConnectTimeout:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">   ReadTimeout:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><h2 id="超时时间关系">超时时间关系</h2><h3 id="feign超时">feign超时</h3><p>feign可以设置自身超时，也可以设置ribbon超时，那么它们的关系是怎么样的？看feign代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerFeignClient</span> <span class="keyword">implements</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Request.Options DEFAULT_OPTIONS = <span class="keyword">new</span> Request.Options();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">IClientConfig <span class="title">getClientConfig</span><span class="params">(Request.Options options, String clientName)</span> </span>&#123;</span><br><span class="line">IClientConfig requestConfig;</span><br><span class="line"><span class="keyword">if</span> (options == DEFAULT_OPTIONS) &#123;</span><br><span class="line">requestConfig = <span class="keyword">this</span>.clientFactory.getClientConfig(clientName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">requestConfig = <span class="keyword">new</span> FeignOptionsClientConfig(options);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> requestConfig;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有设置过feign超时，也就是等于默认值的时候，就会读取ribbon的配置，使用ribbon的超时时间和重试设置。否则使用feign自身的设置。两者是二选一的，且feign优先。</p><ul><li>如果设置的feign的超时，则超时时间大概是Retryer.Default.maxAttempts*(ConnectTimeout+ReadTimeout)</li><li>如果仅设置了ribbon，则超时时间大概是(ConnectTimeout+ReadTimeout)*(MaxAutoRetries+1)*(MaxAutoRetriesNextServer+1)；</li></ul><p>建议使用ribbon超时设置。</p><h3 id="feign重试和ribbon重试">feign重试和ribbon重试</h3><p>feign自身重试目前只有一个简单的实现Retryer.Default，包含三个属性：</p><ul><li>maxAttempts：重试次数，包含第一次</li><li>period：重试初始间隔时间，单位毫秒</li><li>maxPeriod：重试最大间隔时间，单位毫秒</li></ul><p>重试间隔算法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Retryer</span> <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Default</span> <span class="keyword">implements</span> <span class="title">Retryer</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Calculates the time interval to a retry attempt. &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * The interval increases exponentially with each attempt, at a rate of nextInterval *= 1.5</span></span><br><span class="line"><span class="comment">     * (where 1.5 is the backoff factor), to the maximum interval.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> time in nanoseconds from now until the next attempt.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">nextMaxInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">long</span> interval = (<span class="keyword">long</span>) (period * Math.pow(<span class="number">1.5</span>, attempt - <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">return</span> interval &gt; maxPeriod ? maxPeriod : interval;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次重试间隔period，第二次period*1.5，第三次period*1.5*1.5，…，最大值不超过maxPeriod。</p><p>和ribbon的重试相比：</p><ul><li>重试次数包含了首次；</li><li>不能设置多实例服务切换；</li><li>重试有一个延迟时间。</li></ul><h3 id="feign超时和hystrix超时">feign超时和hystrix超时</h3><p>hystrix的超时时间要大于feign的，否则没有等到feign超时，hystrix就fallback了，特别是重试机制会无法起作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;spring cloud中有几个重要的组件，深入理解它们之间的关系才能更好的使用它们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ribbon：实现服务定位和客户端负载均衡；&lt;/li&gt;
&lt;li&gt;hystrix：实现服务熔断、服务降级、资源隔离等；&lt;/li&gt;
&lt;li&gt;feign：声明式的http客户端，用于服务之间的http调用。相比于resttemplate，feign与ribbon和hystrix集成更友好，是spring cloud的顶层组件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述ribbon和hystrix都是netflix贡献组件，目前它们都处于&lt;a href=&quot;https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.1.RELEASE/reference/html/#modules-in-maintenance-mode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维护模式&lt;/a&gt;，不再增加新特性，将逐渐被spring cloud官方组件取代，例如从Hoxton.M2开始整合spring-cloud-loadbalancer用于替换ribbon，但目前还不成熟，还是老老实实用ribbon，而断路器方面spring cloud抽象了Spring Cloud Circuit Breaker，hystrix只是其中一个实现，还有其他实现可选，例如阿里贡献的&lt;a href=&quot;https://github.com/alibaba/Sentinel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sentinel&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://zhongpan.tech/categories/java/"/>
    
      <category term="spring cloud" scheme="http://zhongpan.tech/categories/java/spring-cloud/"/>
    
    
      <category term="hystrix" scheme="http://zhongpan.tech/tags/hystrix/"/>
    
      <category term="ribbon" scheme="http://zhongpan.tech/tags/ribbon/"/>
    
      <category term="feign" scheme="http://zhongpan.tech/tags/feign/"/>
    
  </entry>
  
  <entry>
    <title>解决github pages无法被baidu抓取页面问题</title>
    <link href="http://zhongpan.tech/2020/03/09/028-fix-baidu-seo-of-github-pages/"/>
    <id>http://zhongpan.tech/2020/03/09/028-fix-baidu-seo-of-github-pages/</id>
    <published>2020-03-09T09:26:45.000Z</published>
    <updated>2021-03-25T02:36:16.471Z</updated>
    
    <content type="html"><![CDATA[<p>因为github屏蔽了baidu的页面抓取，所以baidu一直无法索引自建博客。而在国内毕竟baidu的使用量还是更大，为了让自己的博客有更多人访问，还是需要打通这条通道。查找了一些网上资料，解决办法可以通过使用国内的类似服务coding pages作为镜像。</p><p>coding在国内云端开发者服务里有良好的口碑，2019年被鹅厂收购，当时广大码农担心又一个好技术被葬送，现在来看有鹅厂的加持，coding发展还是不错的，也为广大开发者提供更多实惠。所以如果你正在选择一个建站方式，直接使用coding pages也是个不错的选择。下面说下已经使用github pages时如何解决baidu无法抓取页面问题。</p><a id="more"></a><h2 id="coding-pages">coding pages</h2><p>最近coding进行了一系列产品整合升级操作，所以网上有些教程已经过时，大概梳理下时间线：</p><ul><li><p>coding成立于2014年，提供一站式云端开发体验，有个人版和企业版两个产品；</p></li><li><p>2018 年4月与腾讯云达成战略合作，推出了轻量级代码托管产品 「腾讯云开发者平台」；</p></li><li><p>2019年4月推出全新coding，在将原企业版提权为主打产品，并加入敏捷项目协同、持续集成、制品库、单项目多仓库等新功能及数百项特性改进；</p></li><li><p>2019年8月腾讯完成对coding的全资收购；</p></li><li><p>2019年12月28日起，腾讯云开发者平台停止注册；</p></li><li><p>将coding个人版与腾讯云开发者平台升级至全新coding，2019.12.25~2020.1.20将原有账户全部升级完。</p></li></ul><p><a href="http://xn--codingcoding-lt4smsv10bx4jkdw811bckr346h.net" target="_blank" rel="noopener">自此coding只有一个入口coding.net</a>，免费版本支持5人以内团队、20个项目和50G空间。</p><p>coding pages是coding提供的类似github pages功能，有些教程说要升级腾讯云开发者账户才能使用，现在不需要了，直接coding.net注册即可使用。网上对于coding pages的评价可能还是停留在产品整合升级之前，对其评价并不是太好。目前最新的coding pages，初步使用还算不错，至少比github pages要快很多。</p><p>coding pages有一个不太好的地方是，一开始没有找到入口😂。原来默认没有启用入口，新版coding中把pages归到构建与部署功能中，要到项目设置的功能开关中开启。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/60758f22-e0fc-42e9-a409-4199ef752287/index_files/92f929cf-0ac0-4cd5-a056-9637ab366a7e.png" alt="image-20200309212754583"></p><p>这样项目导航菜单中才会出现pages入口。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/60758f22-e0fc-42e9-a409-4199ef752287/index_files/f334e6b3-fc02-4ab1-b2d7-587ea6df7ef5.png" alt="image-20200309213000207"></p><p>之所以归类到构建与部署功能，也是有道理的，coding的pages功能类似一个特殊的部署，它的主要特性是选择从哪个仓库在什么时候手工还是自动部署成网站，然后给你一个域名，这个域名不像github可以定制为形如”<a href="http://xn--eqr924avxo.github.io" target="_blank" rel="noopener">用户名.github.io</a>“这样的，而是自动分配的形如&quot;<a href="http://00kj2k.coding-pages.com" target="_blank" rel="noopener">00kj2k.coding-pages.com</a>&quot;这种的域名。coding pages也没有提供建站模板等功能。</p><p>熟悉以上这些后，你应该可以很容易建立自己的coding pages了。注意coding pages并不认仓库中的CNAME文件，需要在界面中配置域名。</p><h2 id="镜像方法">镜像方法</h2><p>接下来就是解决如何将coding pages作为github pages的镜像了，有两种方案：</p><p>方案一：本地hexo d时同时部署到coding pages</p><p>方案二：通过github持续集成自动同步到coding pages。而持续集成也有很多选择，可以选择github自家的github actions，也可以选择第三方的，如travis-ci。</p><p>推荐方案二，并且推荐使用github actions。这里顺便把hexo d也做成自动的，我之前都是每次自己hexo g然后hexo d，现在用上github actions，实在是省心了不少。</p><h3 id="github-actions">github actions</h3><p>github actions是githut自家的持续集成，它的最大的特色是可以复用别人写好的action，这些action也在github的仓库里，github还专门弄了一个市场，供大家选用。</p><p>毫不意外的，它里面已经有hexo的部署action，以及仓库的同步action，直接拿来就可以了。</p><h3 id="仓库访问凭证准备">仓库访问凭证准备</h3><p>我是这样规划仓库的：hexo源文件一个github仓库，github pages一个仓库，coding pages一个仓库</p><p>github actions是建在hexo源文件仓库上，执行时先进行hexo部署，推送到github pages仓库（也就是相当于执行hexo d），然后将github pages仓库同步到coding pages仓库。</p><h4 id="github-pages-deploykey">github pages deploykey</h4><p>deploykey和全局设置里的ssh key类似，区别是针对单个仓库的。</p><p>生成密钥对，如下命令生成myssh和myssh.pub文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;zhongpan2000@gmail.com&quot; -f D:\myssh</span><br></pre></td></tr></table></figure><p>将myssh.pub的内容设置到github pages仓库的deploykey中。</p><p>将myssh的内容设置到hexo源文件仓库的secrets中，名为github_pages_deploykey，后续在action使用。</p><h4 id="coding-pages-token">coding pages token</h4><p>coding没有提供仓库级别的ssh key，只能使用token。在项目设置的开发者选项中创建并配置权限，创建后得到用户名和密码两个字符串，通过https://user:password@your.repo.url就可以操作仓库。</p><p>将上述&quot;user:password&quot;也存储到hexo源文件仓库的secrets中，名为coding_blog_user_token，后续在action使用。</p><h3 id="完整workflow">完整workflow</h3><p>最后给出完整的git actions脚本。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  hexo-build-deploy:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">          key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles('**/package-lock.json')&#125;&#125;</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">yrpang/github-actions-hexo@master</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          deploykey:</span> <span class="string">$&#123;&#123;secrets.github_pages_deploykey&#125;&#125;</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">zhongpan</span></span><br><span class="line"><span class="attr">          email:</span> <span class="string">zhongpan2000@gmail.com</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">repo-sync</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">wei/git-sync@v1</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          SOURCE_REPO:</span> <span class="string">"https://github.com/zhongpan/zhongpan.github.io.git"</span></span><br><span class="line"><span class="attr">          SOURCE_BRANCH:</span> <span class="string">"master"</span></span><br><span class="line"><span class="attr">          DESTINATION_REPO:</span> <span class="string">"https://$<span class="template-variable">&#123;&#123; secrets.coding_blog_user_token &#125;&#125;</span>@e.coding.net/zhongpan/blog.git"</span></span><br><span class="line"><span class="attr">          DESTINATION_BRANCH:</span> <span class="string">"master"</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          args:</span> <span class="string">$SOURCE_REPO</span> <span class="string">$SOURCE_BRANCH</span> <span class="string">$DESTINATION_REPO</span> <span class="string">$DESTINATION_BRANCH</span></span><br></pre></td></tr></table></figure><h2 id="dns解析">DNS解析</h2><p>最后就是DNS的问题的，自建网站有自己的域名，为了解决baidu抓取页面问题，国内需要解析到coding pages上，具体也可以有两种方式：</p><p>方案一：境内访问coding pages，境外访问github pages</p><p>方案二：仅baidu访问coding pages，其他访问github pages</p><p>推荐方案一，coding pages在境内访问速度非常快，境外还是访问github pages，这样相当于自建了一个CDN。我使用的阿里云域名服务，设置域名解析记录如下：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/60758f22-e0fc-42e9-a409-4199ef752287/index_files/de3732f9-627f-4893-a679-6242fc15e226.png" alt="image-20200309212330014"></p><p>如果你需要启用https，会遇到一个问题，在coding pages中申请证书失败，是因为证书是通过Let’s Encrypt申请的，这是国外的一个服务，它验证站点的时候会经过上述DNS解析到github pages上去，解决办法是先暂定境外线路解析，申请成功之后再开启。申请证书有效期是3个月，到期后需要重新申请。github pages也是通过Let’s Encrypt申请证书，也是3个月有效期，但是到期会自动帮你申请。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为github屏蔽了baidu的页面抓取，所以baidu一直无法索引自建博客。而在国内毕竟baidu的使用量还是更大，为了让自己的博客有更多人访问，还是需要打通这条通道。查找了一些网上资料，解决办法可以通过使用国内的类似服务coding pages作为镜像。&lt;/p&gt;
&lt;p&gt;coding在国内云端开发者服务里有良好的口碑，2019年被鹅厂收购，当时广大码农担心又一个好技术被葬送，现在来看有鹅厂的加持，coding发展还是不错的，也为广大开发者提供更多实惠。所以如果你正在选择一个建站方式，直接使用coding pages也是个不错的选择。下面说下已经使用github pages时如何解决baidu无法抓取页面问题。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://zhongpan.tech/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://zhongpan.tech/tags/hexo/"/>
    
      <category term="github" scheme="http://zhongpan.tech/tags/github/"/>
    
      <category term="github actions" scheme="http://zhongpan.tech/tags/github-actions/"/>
    
  </entry>
  
  <entry>
    <title>Gradle多模块Spring Boot项目问题总结</title>
    <link href="http://zhongpan.tech/2020/03/04/027-create-multi-module-spring-boot-gradle-project/"/>
    <id>http://zhongpan.tech/2020/03/04/027-create-multi-module-spring-boot-gradle-project/</id>
    <published>2020-03-04T08:59:16.000Z</published>
    <updated>2021-03-25T02:36:16.471Z</updated>
    
    <content type="html"><![CDATA[<p>模块化是设计软件的一个基本手段，将软件模块化使得模块可以被复用，可以独立维护。Spring boot应用通常使用Spring initializr创建，它是不支持多模块创建的。多模块构建的能力是构建工具所提供，也就是Maven或Gradle。一些高级的IDE，如JIDE，可以支持多模块创建，就是帮你修改好Maven或Gradle的脚本。你可能使用的vscode这类编辑工具，但是也想体验一下多模块，那么就只能手工修改构建脚本。</p><p>Gradle是基于Groovy语言构建出来的一个特定领域语言(DSL)，用来进行项目的构建。我觉得它和C++领域的CMake比较像，但是CMake是完全特化的脚本语言，而Gradle是基于JVM上的脚本语言Groovy构建，其编程和扩展能力远远超过CMake，Gradle也支持C++语言的构建。一个Gradle脚本是后缀为gradle的文件，其中通常为DSL语句，具有特定的格式，这能降低脚本的编写难度，同时你也完全可以参杂进Groovy语句，实现更复杂的功能。同时借助插件，还可以很容易扩展这个DSL，实际上Gradle大部分功能都是通过插件实现的。</p><p>从网络上可以搜索到很多关于如何构建Gradle多模块项目的资料，但是它们都有共同的问题，所使用的Gradle版本较低，按照其方法都有一些问题。本文基于目前最新的版本，总结一下创建多模块Gradle项目的问题。</p><a id="more"></a><h2 id="版本">版本</h2><ul><li><p>Spring boot 2.2.5</p></li><li><p>Spring boot 2.2.5使用的Gradle版本是6.0.1</p></li></ul><h2 id="官方文档">官方文档</h2><p>最权威的关于如何创建多模块项目的文档莫过于官方文档，地址如下：</p><p>Spring官方：<a href="https://spring.io/guides/gs/multi-module/" target="_blank" rel="noopener">https://spring.io/guides/gs/multi-module/</a></p><p>Gradle官方：<a href="https://guides.gradle.org/creating-multi-project-builds/" target="_blank" rel="noopener">https://guides.gradle.org/creating-multi-project-builds/</a></p><p>所以当你遇到问题的时候，多去找原文、找源头。</p><h2 id="gradle插件引入方式变化">Gradle插件引入方式变化</h2><p>参照网络上的文章（例如此文<a href="https://blog.csdn.net/hugowang/article/details/82021541?depth_1-utm_source=distribute.pc_relevant_right.none-task&amp;utm_source=distribute.pc_relevant_right.none-task" target="_blank" rel="noopener">VS Code开发Spring Boot + Cloud示例（四）Spring Boot + Gradle多项目框架</a>）出现问题的原因，是你使用了新版本的Gradle，其DSL语法有变化，主要的变化是插件引入的方式变了。</p><p>以前的方式：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br></pre></td></tr></table></figure><p>新的方式：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plubins &#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体从哪个版本默认采用新的方式，我没有去考证，两者的区别见<a href="https://docs.gradle.org/current/dsl/org.gradle.plugin.use.PluginDependenciesSpec.html" target="_blank" rel="noopener">这里</a>。plugins存在一些限制，不能放在subprojects或allprojects里面，且必须放在一开始。问题就出在这里，如果你按文章里面的将根项目build.gradle的内容全部移到subprojects里面，就会报如下错误：</p><blockquote><p>Could not find method plugins() for arguments …</p></blockquote><p>如果想在根项目引入插件，在子模块复用，可以这样做，注意核心插件不能使用version和apply：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.2.5.RELEASE'</span> apply <span class="literal">false</span></span><br><span class="line">id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.9.RELEASE'</span> apply <span class="literal">false</span></span><br><span class="line">id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subprojects &#123;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用插件">常用插件</h2><p>开发Spring boot应用常用如下插件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.2.5.RELEASE'</span></span><br><span class="line">id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.9.RELEASE'</span></span><br><span class="line">id <span class="string">'java'</span></span><br><span class="line">    id <span class="string">'java-library'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插件文档：</p><ul><li><p>dependency management插件（社区插件）: <a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/gradle-plugin/reference/html/" target="_blank" rel="noopener">org.springframework.boot</a></p></li><li><p>Spring boot插件（社区插件）: <a href="https://docs.spring.io/dependency-management-plugin/docs/current-SNAPSHOT/reference/html/" target="_blank" rel="noopener">io.spring.dependency-management</a></p></li><li><p>java语言插件（核心插件）：<a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noopener">java</a></p></li><li><p>java库开发（核心插件）：<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noopener">java-library</a></p></li></ul><p>社区插件可以在门户https://plugins.gradle.org上查询(不过没有统一的插件使用说明文档，不太方便)，核心插件随Gradle发行，使用说明包含在Gradle文档中。</p><h3 id="dependency-management插件">dependency management插件</h3><p>这个插件提供了类似maven的依赖管理功能，通过如下block定义，其中定义的依赖，在Gradle dependencies中使用可以省略版本号。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencyManagement &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的方式是通过maven bom导入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencyManagement &#123;</span><br><span class="line">     imports &#123;</span><br><span class="line">          mavenBom &apos;io.spring.platform:platform-bom:1.0.1.RELEASE&apos;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">     implementation &apos;org.springframework.integration:spring-integration-core&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-boot插件">Spring boot插件</h3><p>这个插件为Spring boot应用开发提供了一些便利。例如和dependency-management插件一起使用可以自动导入Spring boot的maven bom。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.2.5.RELEASE'</span></span><br><span class="line">id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.9.RELEASE'</span></span><br><span class="line">id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.9.RELEASE'</span></span><br><span class="line">id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">     imports &#123;</span><br><span class="line">          mavenBom(<span class="string">"org.springframework.boot:spring-boot-dependencies:2.2.5.RELEASE"</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还提供了bootRun任务启动应用：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle bootRun</span><br></pre></td></tr></table></figure><h2 id="java插件的依赖配置变化">java插件的依赖配置变化</h2><p>有一个不一样的地方可能会困扰你，网上的很多文章里面会出现：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是最新的是这样的：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为在最新的java插件中依赖配置有变化，有一些deprecated了，如下灰色字体，例如compile，<a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management" target="_blank" rel="noopener">详见</a>。</p><p><img src="https://docs.gradle.org/current/userguide/img/java-main-configurations.png" alt></p><p><img src="https://docs.gradle.org/current/userguide/img/java-test-configurations.png" alt></p><p>java-library提供如下依赖配置：</p><p><img src="https://docs.gradle.org/current/userguide/img/java-library-ignore-deprecated-main.png" alt></p><p><img src="https://docs.gradle.org/current/userguide/img/java-library-ignore-deprecated-test.png" alt></p><h2 id="spring-boot-devtools不生效">spring-boot-devtools不生效</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/using-spring-boot.html#using-boot-devtools" target="_blank" rel="noopener">spring-boot-devtools</a>主要提供Automatic restart和LiveReload功能，极大的提升了开发调试的效率，在Spring Initializr中创建项目时选择DevTools，会生成如下构建脚本：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">developmentOnly</span><br><span class="line">runtimeClasspath &#123;</span><br><span class="line">extendsFrom developmentOnly</span><br><span class="line">&#125;</span><br><span class="line">compileOnly &#123;</span><br><span class="line">extendsFrom annotationProcessor</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">developmentOnly <span class="string">'org.springframework.boot:spring-boot-devtools'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IDE中通过调式运行应用时，devtools功能一切正常，但是如果你通过如下命令启动应用，会发现自动重启并没有生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle bootRun</span><br></pre></td></tr></table></figure><p>虽然bootRun会自动识别devtools，但是还是需要先编译，因为devtools默认监控的classpath下文件改变，另外重新编译后才能看到修改的效果。为了自动编译，可以通过gradle的连续构建实现，再执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle build --continuous</span><br></pre></td></tr></table></figure><p>保持上述两个命令都开着，这时修改文件就会先触发build，然后再触发bootRun重启。</p><p>参考：</p><p><a href="https://dzone.com/articles/continuous-auto-restart-with-spring-boot-devtools" target="_blank" rel="noopener">Continuous Auto-restart With Spring Boot DevTools and Gradle</a></p><p><a href="https://www.cnblogs.com/lspz/p/6832358.html" target="_blank" rel="noopener">SpringBoot配置devtools实现热部署</a></p><h2 id="理解依赖配置">理解依赖配置</h2><p>启用devtools工具后，依赖配置configurations中会出现自定义配置developmentOnly，这是什么目的呢？</p><p>configurations里面的内容，每一项称为一个dependency configuration，其实是对dependency的一个分组，在dependencies往这个分组里面加入dependency，gradle对每个configuration解析出一个依赖树，供task使用。</p><p>每一个dependency configuration代表一定角色，决定了：</p><ul><li>构建生命周期的哪些步骤会使用分组中的依赖</li><li>分组中的依赖会传递吗，是传递到消费模块的编译期还是运行期，还是都有</li><li>分组中的依赖会打包进构建输出吗</li></ul><p>前文的java及java library插件预定义了一些dependency configuration，如implementation、compileOnly等，它们的角色由插件预定义好。</p><table><thead><tr><th></th><th>implementation</th><th>compileOnly</th><th>runtimeOnly</th><th>api</th></tr></thead><tbody><tr><td>构建阶段</td><td>compile time <br>runtime <br>test compile time <br>test runtime</td><td>compile time</td><td>runtime</td><td>compile time <br>runtime <br>test compile time <br>test runtime</td></tr><tr><td>传递到消费模块编译期</td><td>no</td><td>no</td><td>no</td><td>yes</td></tr><tr><td>传递到消费模块运行期</td><td>yes</td><td>no</td><td>yes</td><td>yes</td></tr><tr><td>打包到输出</td><td>yes</td><td>no</td><td>yes</td><td>yes</td></tr></tbody></table><p>对于devtools，它的实现原理是启用特殊的类加载器，仅用在开发调式阶段，所以它不会应用到构建阶段，也不需要传递到消费模块，也不需要打包到输出，所以这里就自定义了一个依赖配置developmentOnly，目的就是不参与构建阶段、不传递、不打包，这个依赖配置也可以用别的名字。</p><p>那么devtools又是怎么生效的呢：</p><ul><li>在IDE中进行调试运行时，检测到devtools时就会使用其中的&quot;restart&quot;类加载器加载打开的工程，其他jar使用&quot;base&quot;类加载器加载；</li><li>使用gradle bootRun运行时，检测到devtools时同上</li></ul><p>参考：</p><p><a href="https://www.vojtechruzicka.com/spring-boot-devtools/" target="_blank" rel="noopener">Faster Development with Spring Boot DevTools</a></p><p><a href="https://java2blog.com/spring-boot-devtools-tutorial/" target="_blank" rel="noopener">Spring boot devtools tutorial</a></p><p><a href="https://reflectoring.io/maven-scopes-gradle-configurations/" target="_blank" rel="noopener">Maven Scopes and Gradle Configurations Explained</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模块化是设计软件的一个基本手段，将软件模块化使得模块可以被复用，可以独立维护。Spring boot应用通常使用Spring initializr创建，它是不支持多模块创建的。多模块构建的能力是构建工具所提供，也就是Maven或Gradle。一些高级的IDE，如JIDE，可以支持多模块创建，就是帮你修改好Maven或Gradle的脚本。你可能使用的vscode这类编辑工具，但是也想体验一下多模块，那么就只能手工修改构建脚本。&lt;/p&gt;
&lt;p&gt;Gradle是基于Groovy语言构建出来的一个特定领域语言(DSL)，用来进行项目的构建。我觉得它和C++领域的CMake比较像，但是CMake是完全特化的脚本语言，而Gradle是基于JVM上的脚本语言Groovy构建，其编程和扩展能力远远超过CMake，Gradle也支持C++语言的构建。一个Gradle脚本是后缀为gradle的文件，其中通常为DSL语句，具有特定的格式，这能降低脚本的编写难度，同时你也完全可以参杂进Groovy语句，实现更复杂的功能。同时借助插件，还可以很容易扩展这个DSL，实际上Gradle大部分功能都是通过插件实现的。&lt;/p&gt;
&lt;p&gt;从网络上可以搜索到很多关于如何构建Gradle多模块项目的资料，但是它们都有共同的问题，所使用的Gradle版本较低，按照其方法都有一些问题。本文基于目前最新的版本，总结一下创建多模块Gradle项目的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://zhongpan.tech/categories/java/"/>
    
      <category term="spring boot" scheme="http://zhongpan.tech/categories/java/spring-boot/"/>
    
    
      <category term="gradle" scheme="http://zhongpan.tech/tags/gradle/"/>
    
      <category term="spring boot" scheme="http://zhongpan.tech/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>使用在线表格airtable进行软件开发管理</title>
    <link href="http://zhongpan.tech/2020/02/22/026-development-management-with-airtable/"/>
    <id>http://zhongpan.tech/2020/02/22/026-development-management-with-airtable/</id>
    <published>2020-02-22T06:55:57.000Z</published>
    <updated>2021-03-25T02:36:16.467Z</updated>
    
    <content type="html"><![CDATA[<p>2019年的冬天爆发新冠病毒疫情，而我正处于这次疫情的中心武汉，除夕我带着大儿女回到武汉郊区的农村老家，而老婆带着刚满一岁的小儿女留在武汉城区，那个时候已经公布人传人，武汉也刚封城，我虽然意识到严重，但还没有惊慌，执意回了老家。直到后来确诊人数暴增，大量疑似病人无法入院治疗，网络上各种无助的求救，才开始担心起来。现在回想起来决定回老家非常冒险，万一感染亲人将不堪设想。</p><p>春节过后，因为疫情，工作中多了一些相关的统计工作，例如统计在家远程办公时长、统计复工情况、统计外地返汉信息等等，经常需要把团队的反馈合并到一起，非常的繁琐。于是我开始寻找一款能够协同编辑的在线表格，让我找到了<a href="https://airtable.com/" target="_blank" rel="noopener">Airtable</a>，瞬间解决了困扰我的问题，真是如获至宝。</p><p>随着复工时间一再推迟，在家远程办公将成为一种常态，怎么做好远程办公是需要好好琢磨的一个事情。怎么样让大家分散各地，但是能够行动一致、高效的工作，是非常有挑战的。这周经过一番折腾，利用Airtable把团队的任务管理起来，我觉得是一个很好的尝试，也让我更加喜欢上Airtable。</p><p>Airtable解决了一个很重要的问题，就是度量和可视化。所谓没有度量就没有改进，管理中需要量化各种数据，这些数据会成为一把戒尺，有意无意中规范影响大家的行为。选择什么的度量指标，是因时因事而异的。再好的项目管理软件也不可能面面俱到，满足各种需求。而Airtable的纯粹，就是为了处理数据、显示数据，可随心所欲定制，成为了它的过人之处。</p><p>下面我就详细说说，我是怎么几小时内就用Airtable打造一个软件开发任务管理系统，我对它非常满意，而如果要开发一个类似的项目管理系统绝不是一时半会能办到的。</p><a id="more"></a><h2 id="airtable简介">Airtable简介</h2><p>Airtable是一个国外的在线服务，注册后即可使用，分免费和付费版本。Airtable中按照workspace-base-table三级来组织数据，一个workspace中可以有多个base，一个base下有多个table。base下的table之间可以关联，但是跨base的表是不能关联的。</p><p>Airtable免费版本不限制base数目，只限制每个base最多1200条记录，2G附件空间，具备团队协作功能，这就完全可以满足一个小团队的使用，大不了数据满了再开一个base，非常厚道。收费版本是按照每workspace以及workspace中的用户数来计算费用，记录数和空间更大，具备高级功能，首次注册可试用15天pro版。</p><h3 id="与excel区别">与excel区别</h3><p>Airtable和excel虽然有相似功能，但设计理念完全不同于excel。Airtable的base和数据库很像，其中每个table，每一列有固定类型和含义，而excel就是二维的单元格，可随心所欲编辑。正因为如此，Airtable和excel在公式的使用上存在很大不同，例如：</p><ul><li>Airtable的公式是定义在列上的，也就是应用在列的所有单元格，而excel的每个单元格可以定义不同的公式；</li><li>Airtable的公式不能跨table，需要借助关联表实现跨table，并且公式总是访问本行数据，而excel的公式可以访问其他sheet数据，也可以访问本sheet任意单元格数据。</li></ul><p>实际上Airtable不是一个在线excel，它更像一个开发平台，凡是基于关系数据的信息处理系统，都可以用它实现。</p><h3 id="主要功能">主要功能</h3><h4 id="视图">视图</h4><p>用于展现和操作表的界面，有Grid、Form、Calendar、Gallerv、Kanban几种，Grid是最常用的，新建table时默认建立一个Grid视图。一个table可以建多个视图。Grid视图中有过滤、分组、排序、着色等功能。过滤不像excel那样在列上操作，感觉没有excel方便，每个视图可以设置不同的过滤条件。</p><h4 id="表建模和数据操作">表建模和数据操作</h4><p>就像设计关系数据库一样，使用Airtable提供的字段类型，将表及关联设计出来。字段类型大概有这么几类：</p><ul><li>输入字段，例如文本、数字、选择、checkbox等；</li><li>公式字段，是基于其他字段计算出来的；</li><li>表和表之间的关联是通过特殊的字段类型Link to another record建立，基于关联字段可以做一些查找和聚合计算，包括rollup、lookup和count几个字段类型，可以实现丰富的报表统计；</li><li>另外还有自增、创建时间、最后更新时间等有用的字段类型。</li></ul><h4 id="blocks">blocks</h4><p>可以理解成基于上述表的小应用。主要有可视化、数据操作、报表等应用。感觉下一步会做成开放平台，第三方也可以开发blocks，拭目以待。</p><h4 id="协作">协作</h4><p>Owner可以邀请其他人一起协同工作，可基于workspace级别或base级别，不能基于表级别。协同者有Creator、Editor、Commenter、Read only几种角色，权限由高到低。协同编辑时可以实时看到其他人编辑过程，很酷的体验。</p><h4 id="模板">模板</h4><p>也就是预定义好的表模型，创建base时选择，开箱即用。</p><h3 id="理解表的关联">理解表的关联</h3><p>表的关联是实现复杂的报表统计的关键。</p><h4 id="主键">主键</h4><p>每个表的第一列总是主键，不能移动或删除。主键倒不是说内容必须唯一，而是在关联表字段选择时呈现的就是主键的内容，最好能够区分不同的行，但不是强制的。实际上Airtable内部有每一行的唯一标识，可以通过公式RECORD_ID()获取。</p><h4 id="link-to-another-record字段类型">Link to another record字段类型</h4><p>建立A表到B表的关联，是在A表中建立一个Link to another record类型字段，并选择B表。那么在编辑此字段会弹出选择界面列出B表的所有记录。此字段可以设置是否允许多选，如果否，则只能选择一条记录，那么A和B就是多对一的关系。如果允许多选，那么A和B就是多对对的关系。A中建立关联字段后，B表中也会自动建立一个关联字段和A关联，这个字段默认是允许多选的。两边是联动的，都可以进行编辑，一般我们会将一边隐藏掉，总是从另一边进行编辑。</p><h4 id="rollup-lookup-count字段类型">rollup、lookup、count字段类型</h4><p>这几个字段类型必须先建立Link to another record字段，通过Link to another record字段的内容进行查询或计算。</p><ul><li>lookup和rollup是针对关联的表中相关记录的某个字段，选择Link to another record字段字段后还需要选择关联表的某个字段，区别是rollup还可以择应用一些聚合函数，例如SUM、MAX等；</li><li>lookup和rollup只能对关联表的一个字段进行统计，如果希望作用于多个字段，可以在关联表中建立一个公式字段先把多个字段组合在一起；</li><li>count只需选择哪个Link to another record字段，统计选择的个数，其实用rollup也可以实现，相对于是对rollup的特化。</li></ul><h4 id="值类型">值类型</h4><p>上述字段的值类型，在官方文档中没有找到明确说明，通过测试验证结果如下：</p><ul><li>Link to another record<ul><li>公式字段访问时为字符串，如果是多选，则是&quot;, &quot;分隔的字符串。如果要统计其个数，一种方法是建立count字段，另一个方法是通过公式<code>LEN({field})-LEN(SUBSTITUTE({field给},&quot;,&quot;,&quot;&quot;))+1</code></li><li>rollup字段聚合函数访问时为数组</li></ul></li><li>lookup：同上</li><li>rollup：同聚合函数的返回类型，其中有几个特别注意是返回的数组类型，包括ARRAYCOMPACT、ARRAYFLATTEN、ARRAYUNIQUE，它们的返回值可以应用COUNTA公式得到数组长度，如果需要当成字符串使用则要使用ARRAYJOIN或CONCATENATE先转成字符串。针对数组类型，我遇到一个需求，想把两个数组连接起来，并去掉重复值，Airtable提供了去除数组重复值的公式，但是没有提供连接数组的公式，没有办法实现这个需求，有所遗憾。</li><li>count：数字</li></ul><h2 id="实现目标">实现目标</h2><p>我的出发点很简单，希望大家有一个统一的视图，都可以看到有哪些任务，任务的进展状态。同时能够量化显示完成率，完成得分等数据并进行排序，形成彼此之间的对比，从而让大家清楚做什么并努力达成目标。</p><h3 id="组织结构">组织结构</h3><p>我管理的团队共26人，我希望划分成若干个小组，通过小组长帮助我管理好任务。小组长要负责任务的计划、跟踪和状态更新。</p><h3 id="管人方面">管人方面</h3><ol><li><p>我希望看到每个人的工作量及排序，以此确定任务安排是否饱满和均衡；</p></li><li><p>我希望看到每个人的任务完成情况得分及排序，这个得分体现了是否按时完成，完成质量如何，以此牵引大家按时保质完成任务；</p></li><li><p>我希望团队组长每周汇报团队相关任务的进展，以便我及时发现问题，做出调整；</p></li></ol><h3 id="管事方面">管事方面</h3><ol><li>任务有两种，一是开发任务，一种是Bug处理任务，这两种是存在区别的，我希望需要区别对待；</li><li>我希望任务是分级的，类似scrum的Epic-Theme-User Story，我只关注顶层的任务，团队组长关注下级任务，我觉得2级就够了，至于下级任务按什么方式定，是按scrum的固定周期迭代，还是长任务，不是我关心的；</li><li>我希望从顶层任务的视角能够看到完成率及排序，从而清楚总体的任务完成情况如何；</li><li>我希望从顶层任务的视角能够看到工作量及排序，从而清楚工作投入的分布；</li><li>我希望具体任务视图能够有一些明显提示任务快到期或已经超时。</li></ol><h2 id="创建表">创建表</h2><p>戳<a href="https://airtable.com/invite/l?inviteId=invWmK71R6yDkmzxe&amp;inviteToken=4f8c096e26d493130b5d0d892efc1dcd9da6084bd739d7cfc18d360cf5752561" target="_blank" rel="noopener">这里</a>，进入我分享的base，详细查看字段类型和公式，还可以实际体验一下。</p><p>根据以上需求，首先建立表结构，如下图所示。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/81076340-51a6-4249-995b-f1003457b5e4/index_files/98e18fc0-7e7b-431f-86d2-dae96db11fff.png" alt="image-20200226084700156"></p><p>（1）上述聚合关系表示关联表，n:1是单选，m:n是多选；</p><p>（2）团队和成员表定义了团队分组；</p><p>（3）Backlog是一级任务，任务和Bug是二级任务；工作量和完成信息定义在二级任务里面；</p><p>（4）Backlog通过任务分类表进行一个分类；</p><p>（5）Bug级别表中定义了一些参数，用于计算Bug工作量；</p><p>（6）任务可能由多个人承担，例如前端和后端都需要开发的功能，所以可以分派给多个人；Bug只能分派给1个人；</p><p>（7）任务和Bug中的负责人，用于提示此人负责任务的创建、跟踪更新及评价，完成表格的所有编辑工作，编辑工作不能开放给所有成员。任务分派给多人正好跨团队时，责任人等于创建人，否则等于团队负责人。Bug的负责人就是分派给的团队负责人；</p><p>（8）周报的粒度是一级任务，每条一级任务每周汇报一次。</p><p>总结几点使用技巧：</p><p>（1）下拉选择的字段，可以创建一个table，然后与其关联。这样一来可能增加可定制性，有变化时不用修改表定义，只需修改表数据，二来可以基于选择内容进行统计；</p><p>（2）隐藏字段用处大，就像变量一样。有时必须借助隐藏字段才能实现功能，例如统计完成率，下面会有介绍；有时可以简化公式，还能增加复用性；还例如过滤功能不能进行复杂的逻辑组合，只能要么全部与，要么全部或，这时可以通过增加隐藏的公式字段来实现复杂逻辑。</p><h2 id="指标设计">指标设计</h2><h3 id="工作量统计">工作量统计</h3><p>对于任务：由团队负责人给出任务估计工作量，如果任务由多人承担，则每个取平均值，然后在成员表和Backlog表中建立rollup字段，对任务表工作量进行sum，得到任务总工作量。</p><p>对于Bug：采用简化处理，工作量直接和Bug级别相关，等于{Bug级别权重}*{Bug工作量基数}，这两个参数定义在Bug级别表中，同样在成员表和Backlog表中建立rollup字段，对bug表工作量进行sum，得到Bug总工作量。</p><p>再分别建立公式字段，将上述两个字段相加得到总工作量。</p><p>这样从成员表和Backlog表都可以看到汇总的工作量情况。</p><h3 id="负荷率统计">负荷率统计</h3><p>主要针对任务，衡量某个人的任务安排是否饱满合理，体现了团队负责人任务计划的能力。合理的负荷率应该是比100%稍高，如果负荷过高通常是估计工作量过高或计划完成时间不合理，也有可能没有考虑一个人分派多个任务的叠加情况。如果负荷过低只有一种可能，就是安排任务过少。</p><p>在任务表中建立公式字段计算任务周期，也就是任务从开始到结束持续的时长，这里将创建时间当成任务开始时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(&#123;计划完成时间&#125;,(DATETIME_DIFF(&#123;计划完成时间&#125;,&#123;创建时间&#125;,&quot;seconds&quot;)/(60*60*24)),0)</span><br></pre></td></tr></table></figure><p>然后建立公式字段，计算平均日工作量，单位小时。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(&#123;任务周期(天)&#125;&lt;=0,0,IF(IS_AFTER(NOW(),&#123;计划完成时间&#125;),0,&#123;平均工作量(天)&#125;*8/&#123;任务周期(天)&#125;))</span><br></pre></td></tr></table></figure><p>然后在成员表中建立rollup字段，对任务表的平均日工作量sum，得到这个人的任务平均日工作量，最后建立公式字段，得到平均任务负荷率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;任务平均日工作量(小时)&#125;/8</span><br></pre></td></tr></table></figure><h3 id="完成率统计">完成率统计</h3><p>rollup的count聚合函数没有条件过滤特性，所以没法一步到位，需要借助中间字段。</p><p>首先在任务表和Bug表中建立公式字段，根据状态计算是否完成，完成则填入值，为完成为空。</p><p>然后在成员表和Backlog表中建立rollup字段，通过counta聚合函数计算完成数，同时建立count字段计算总数，最后建立公式字段，完成数除以总数，得到完成率。</p><h3 id="评分系统">评分系统</h3><p>设计评分规则如下：</p><p>得分={评分}(只有任务有，Bug无，按时完成才能得到)+{工作量(天)}(完成才能得到)+{提前(天)}(负数表示超期，完成或超期时开始计入)</p><p>评分体现完成质量，前提是按时完成才能得到，超期不能得到，团队负责人要对任务进行验收，验收通过才能视为完成；工作量体现工作付出，必须完成才能得到，也就说要负责到底；提前体现了鼓励大家增量付出。评分规则的牵引方向是按时完成任务，鼓励提前，提前有加分，超期有扣分。</p><ul><li>对于任务</li></ul><p>提前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(&#123;计划完成时间&#125;,IF(&#123;Completed&#125;,DATETIME_DIFF(&#123;计划完成时间&#125;,&#123;状态最后更新时间&#125;,&quot;s&quot;),DATETIME_DIFF(&#123;计划完成时间&#125;,NOW(),&quot;s&quot;)),0)</span><br></pre></td></tr></table></figure><p>得分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(AND(&#123;提前(秒)&#125;&gt;=0,&#123;Completed&#125;),&#123;评分&#125;,0)+IF(&#123;Completed&#125;,&#123;工作量(天)&#125;,0)+IF(OR(&#123;Completed&#125;,&#123;提前(秒)&#125;&lt;0),&#123;提前(秒)&#125;/(60*60*24),0)</span><br></pre></td></tr></table></figure><ul><li>对于Bug</li></ul><p>提前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(&#123;计划解决时间&#125;,IF(&#123;Resolved&#125;,DATETIME_DIFF(&#123;计划解决时间&#125;, &#123;状态最后更新时间&#125;,&quot;s&quot;),DATETIME_DIFF(&#123;计划解决时间&#125;,NOW(),&quot;s&quot;)),0)</span><br></pre></td></tr></table></figure><p>得分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(&#123;Resolved&#125;,&#123;工作量(天)&#125;,0)+IF(OR(&#123;Resolved&#125;,&#123;提前(秒)&#125;&lt;0),&#123;提前(秒)&#125;/(60*60*24),0)</span><br></pre></td></tr></table></figure><p>然后在成员表和Backlog表中通过rollup字段对得分进行求和汇总就得到总得分。</p><h2 id="总结">总结</h2><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/81076340-51a6-4249-995b-f1003457b5e4/index_files/024aac6d-202a-4a55-bc44-cc6d790eeee2.png" alt="image-20200226111736448"></p><p>你是否也喜欢上Airtable，短短数小时之内，你就完全可以打造一款为你量身定做的表格系统。Airtable中已经包含许多适用于特性用途的模板，可以直接拿来使用，非常方便。</p><p>Airtable的统计功能主要是基于关联表和rollup类型字段，其设计非常简洁，甚至简陋，聚合函数功能并不算丰富，只能基于一列聚合，但是其设计又恰到好处，通过变通技巧还是可以实现复杂功能。另外Airtable提供了curl和JavaScript接口，可以集成第三方工具实现更加复杂的功能，例如和IFTTT或Zapier集成。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/81076340-51a6-4249-995b-f1003457b5e4/index_files/318a2ed2-50a1-41f7-a3ed-f4672cd90def.png" alt="image-20200226120235382"></p><p>当然Airtable也不是万能的，它并不能取代项目管理系统，它还是一个表格系统，缺乏很多项目管理必要的特性，例如工作流管理等等。我主要是在管理团队中使用Airtable，其他人只读查看，因为编辑权限是base粒度的，不能放开给所有人。但是我的需要也不是一个完整的项目管理系统，我只需要能够灵活定制并呈现度量指标，Airtable完全可以胜任。此前我使用过JIRA、Redmine这类项目管理系统，它们也可以自定义字段，但是没有公式和聚合统计这种特性，通常需要通过插件实现，所以定制性受到很大限制，期待有一天它们能够吸收Airtable的特长，让鱼与熊掌可以兼得。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019年的冬天爆发新冠病毒疫情，而我正处于这次疫情的中心武汉，除夕我带着大儿女回到武汉郊区的农村老家，而老婆带着刚满一岁的小儿女留在武汉城区，那个时候已经公布人传人，武汉也刚封城，我虽然意识到严重，但还没有惊慌，执意回了老家。直到后来确诊人数暴增，大量疑似病人无法入院治疗，网络上各种无助的求救，才开始担心起来。现在回想起来决定回老家非常冒险，万一感染亲人将不堪设想。&lt;/p&gt;
&lt;p&gt;春节过后，因为疫情，工作中多了一些相关的统计工作，例如统计在家远程办公时长、统计复工情况、统计外地返汉信息等等，经常需要把团队的反馈合并到一起，非常的繁琐。于是我开始寻找一款能够协同编辑的在线表格，让我找到了&lt;a href=&quot;https://airtable.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Airtable&lt;/a&gt;，瞬间解决了困扰我的问题，真是如获至宝。&lt;/p&gt;
&lt;p&gt;随着复工时间一再推迟，在家远程办公将成为一种常态，怎么做好远程办公是需要好好琢磨的一个事情。怎么样让大家分散各地，但是能够行动一致、高效的工作，是非常有挑战的。这周经过一番折腾，利用Airtable把团队的任务管理起来，我觉得是一个很好的尝试，也让我更加喜欢上Airtable。&lt;/p&gt;
&lt;p&gt;Airtable解决了一个很重要的问题，就是度量和可视化。所谓没有度量就没有改进，管理中需要量化各种数据，这些数据会成为一把戒尺，有意无意中规范影响大家的行为。选择什么的度量指标，是因时因事而异的。再好的项目管理软件也不可能面面俱到，满足各种需求。而Airtable的纯粹，就是为了处理数据、显示数据，可随心所欲定制，成为了它的过人之处。&lt;/p&gt;
&lt;p&gt;下面我就详细说说，我是怎么几小时内就用Airtable打造一个软件开发任务管理系统，我对它非常满意，而如果要开发一个类似的项目管理系统绝不是一时半会能办到的。&lt;/p&gt;
    
    </summary>
    
      <category term="management" scheme="http://zhongpan.tech/categories/management/"/>
    
    
      <category term="airtable" scheme="http://zhongpan.tech/tags/airtable/"/>
    
      <category term="software devemopement management" scheme="http://zhongpan.tech/tags/software-devemopement-management/"/>
    
  </entry>
  
  <entry>
    <title>有用的c++内存相关库</title>
    <link href="http://zhongpan.tech/2020/02/06/025-useful-cpp-memory-related-libraries/"/>
    <id>http://zhongpan.tech/2020/02/06/025-useful-cpp-memory-related-libraries/</id>
    <published>2020-02-06T08:19:12.000Z</published>
    <updated>2021-03-25T02:36:16.467Z</updated>
    
    <content type="html"><![CDATA[<p>c++对内存的原始控制是其优势，同时带来一系列灾难性问题，例如野指针问题、内存泄漏问题、内存碎片问题，在c++世界这是非常常见而棘手的问题，其实这些问题早有成熟应对方案，就以boost为例，早就包含相关库，有些已经成为c++标准库。c++解决内存方面的技术有：</p><p>（1）智能指针：解决野指针、内存泄漏问题；</p><p>（2）内存池：提升内存分配效率，解决内存碎片问题；</p><p>（3）flyweight：解决大量重复对象对内存的浪费。</p><p>下面通过一些实例介绍boost对上述技术的实现。</p><a id="more"></a><h2 id="boost智能指针">boost智能指针</h2><p>boost智能指针已经成为c++11标准，是时候告别裸指针了。boost智能指针包括如下内容：</p><ul><li>智能指针模板类<ul><li>scoped_ptr，scoped_array</li><li>shared_ptr，shared_array（deprecated）</li><li>weak_ptr</li><li>intrusive_ptr</li><li>local_shared_ptr</li></ul></li><li>实用函数和类<ul><li>make_shared</li><li>make_unique</li><li>allocate_unique</li><li>enable_shared_from_this</li><li>pointer_to_other</li><li>static_pointer_cast</li><li>intrusive_ref_counter</li><li>atomic_shared_ptr</li></ul></li></ul><h3 id="使用示例">使用示例</h3><h4 id="scoped-ptr">scoped_ptr</h4><p>scoped_ptr适用于作用域内的指针管理，所有权不能转移出去，而标准库中的unique_ptr可以转移，这是两者的主要区别。</p><p>先看不使用智能指针的例子，在每个退出或异常的地方需要不厌其烦的检查动态分配的对象是否释放，一旦漏掉一个地方就会导致内存或资源泄露。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *pInt = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">pInt = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bOk = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!bOk)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pInt != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pInt;</span><br><span class="line">pInt = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line"><span class="comment">//maybe throw exception</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pInt;</span><br><span class="line">pInt = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(...)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pInt != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> pInt;</span><br><span class="line">pInt = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用智能指针改写后的例子，不但代码更加简洁，也完全杜绝了内存泄露的后顾之忧。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *pInt = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">boost::scoped_ptr&lt;<span class="keyword">int</span>&gt; pInt(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bOk = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!bOk)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line"><span class="comment">//maybe throw exception</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(...)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子充分体现了智能指针中对RAII（resource acquisition is initialization）思想的运用，由一个临时对象持有裸指针，在临时对象销毁时同时释放裸指针指向的资源，而编译器可以很好的保证临时对象在各种情况下正确的销毁。从scoped_ptr的名字可以看出，它应用于离开某个作用域后需要资源自动释放的场景，因此scoped_ptr不像std::auto_ptr那样具有难以使用的所有权转让语义，也不像shared_ptr那样具有共享所有权语义，它将资源的生命周期仅仅限定在某个作用域内，这样的设计使它意图非常明确和简单，实际上scoped_ptr是不可复制的，当然就不能应用在容器中，因为它不需要转让所有权或共享所有权，因此在编译期就可以避免不正确的使用（不能将一个scoped_ptr赋值或拷贝构造给另一个scoped_ptr，也不能将scoped_ptr存储在容器中）。</p><p>选择使用scoped_ptr还是std::auto_ptr？scoped_ptr和auto_ptr很像，只是auto_ptr多了所有权转让语义，例如可以作为函数返回值，除此之外，他们都是用栈上的对象管理堆上的对象，都不能共享所有权，因此都不能保存在容器中，但是scoped_ptr作了严格的控制（赋值和拷贝构造函数是私有的），确保了使用者不会误入歧途，而对于auto_ptr，只要你愿意，你还是可以将其放入容器中。所以，一般情况下最好使用scoped_ptr，如果你确实需要所有权转让语义，可以使用auto_ptr，但必须非常小心。</p><h4 id="shared-ptr">shared_ptr</h4><p>不使用智能指针的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span> *&gt; vecIntPtr;</span><br><span class="line"></span><br><span class="line">vecIntPtr.push_back(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>));</span><br><span class="line">vecIntPtr.push_back(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">2</span>));</span><br><span class="line">boost::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread1</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">boost::mutex::<span class="function">scoped_lock <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span> *&gt;::iterator it = vecIntPtr.begin(); it != vecIntPtr.end(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> *it;</span><br><span class="line">&#125;</span><br><span class="line">vecIntPtr.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> *pInt = <span class="literal">NULL</span>;</span><br><span class="line">&#123;</span><br><span class="line">boost::mutex::<span class="function">scoped_lock <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!vecIntPtr.empty())</span><br><span class="line">&#123;</span><br><span class="line">pInt = *vecIntPtr.begin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//maybe need long time</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pInt)</span><br><span class="line">&#123;</span><br><span class="line">*pInt = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用shared_ptr改写后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; IntPtr;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;IntPtr&gt; vecIntPtr;</span><br><span class="line"></span><br><span class="line">vecIntPtr.push_back(IntPtr(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>)));</span><br><span class="line">vecIntPtr.push_back(boost::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>));</span><br><span class="line">boost::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread1</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">boost::mutex::<span class="function">scoped_lock <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">vecIntPtr.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread2</span></span><br><span class="line">&#123;</span><br><span class="line">IntPtr pInt;</span><br><span class="line">&#123;</span><br><span class="line">boost::mutex::<span class="function">scoped_lock <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!vecIntPtr.empty())</span><br><span class="line">&#123;</span><br><span class="line">pInt = *vecIntPtr.begin();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//maybe need long time</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pInt)</span><br><span class="line">&#123;</span><br><span class="line">*pInt = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例展示了多线程情形下访问同一份指针的情况。看出两份代码之间的区别了吗？</p><ul><li><p>前面的代码需要显式的调用delete，而后面的代码不需要，其好处是显而易见的，在上述简单的例子中，也许你觉得不可能忘了delete 指针，但是在更复杂的系统中，忘了delete是屡见不鲜的，而查找此类问题需要花费高昂的代价；</p></li><li><p>前面的代码需要在使用指针的整个过程加锁，即使从容器中获取了某个指针，以防其他线程将其删除，在使用指针的整个过程都需要加锁，如果这个过程非常耗时，那么可能带来系统效率的低下，而后面的代码仅仅是在从容器获取指针的过程需要加锁，这是由容器的性质决定的，STLport容器保证多线程读同一个容器是安全的，但不保证多线程写同一个容器是安全的，因此从容器获取指针的过程必须人为保证其安全性，但是一旦获取到了指针，后面对指针的使用过程就不需要加锁了，这是如何保证的呢， shared_ptr为每个裸指针维护一个引用计数，所有shared_ptr对象（临时对象或容器中的对象）共享裸指针和这个引用计数，创建一个shared_ptr对象时引用计数加1，对象销毁时引用计数减1，当引用计数为0时就说明已经没有人需要此裸指针了，此时正是裸指针生命结束的时候。因此只要你获取了shared_ptr对象，在使用过程中引用计数就肯定不可能为0，所以你可以放心的使用此指针。</p></li></ul><p>需要注意的是：shared_ptr确保了指针本身使用的安全，指针内部数据的安全性仍需要使用者自己来保证，这不是智能指针关注的事情。</p><p>另外注意到boost::make_shared的使用了吗？使用make_shared一方面可以去除new的显式调用，更重要的是可以获得性能的提升（原因见后），建议尽量使用make_shared，如果编译器支持右值引用，make_shared可以完美的将参数传给构造函数而没有任何性能的损失。</p><p>关于shared_ptr的使用有几点是需要注意的：</p><ul><li>禁止some_operation (boost::shared_ptr(new T), return_int_operation())用法，因为参数求值顺序是不确定的，可能先执行new T，然后return_int_operation()，然后构造shared_ptr，如果return_int_operation()抛异常，那么就会出现内存泄漏；</li><li>避免对shared_ptr所管理内存直接操作，以免重复释放；</li><li>关于类型转换，只要 T* 能被隐式地转换到 U*，则 <code>shared_ptr&lt;T&gt;</code>就能被隐式地转换到<code>shared_ptr&lt;U&gt;</code>。特别是，<code>shared_ptr&lt;T&gt;</code>隐式转换到<code>shared_ptr&lt;T const&gt;</code>，当U是T的一个可访问基类的时候，还能转换到<code>shared_ptr&lt;U&gt;</code>，以及转换到<code>shared_ptr&lt;void&gt;</code>，另外可用如下函数类型转换：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T, class U&gt;</span><br><span class="line">shared_ptr&lt;T&gt; static_pointer_cast(shared_ptr&lt;U&gt; const &amp; r); // never throws</span><br><span class="line"></span><br><span class="line">template&lt;class T, class U&gt;</span><br><span class="line">shared_ptr&lt;T&gt; const_pointer_cast(shared_ptr&lt;U&gt; const &amp; r); // never throws</span><br><span class="line"></span><br><span class="line">template&lt;class T, class U&gt;</span><br><span class="line">shared_ptr&lt;T&gt; dynamic_pointer_cast(shared_ptr&lt;U&gt; const &amp; r); // never throws</span><br></pre></td></tr></table></figure><ul><li>所有共享同一裸指针的shared_ptr必须同源，例如不能出现如下代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int *p = new int(10);   </span><br><span class="line">boost::shared_ptr&lt;int&gt; sp1(p);   </span><br><span class="line">boost::shared_ptr&lt;int&gt; sp2(p);</span><br></pre></td></tr></table></figure><p>应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int *p = new int(10);   </span><br><span class="line">boost::shared_ptr&lt;int&gt; sp1(p);   </span><br><span class="line">boost::shared_ptr&lt;int&gt; sp2 = sp1;</span><br></pre></td></tr></table></figure><ul><li>不要直接使用容器中的智能指针。</li></ul><h4 id="weak-ptr">weak_ptr</h4><p>看出下面的代码有什么问题了吗？初始后临时对象father和son的引用计数都是2，当father和son销毁后，引用计数变为1，之后再也没有可能变成0了，于是产生了内存泄露。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CFather</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSon</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">shared_ptr</span>&lt;CFather&gt; FatherPtr;</span><br><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">shared_ptr</span>&lt;CSon&gt; SonPtr;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CFather</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">SonPtr m_son;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">FatherPtr m_father;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">FatherPtr <span class="title">father</span><span class="params">(<span class="keyword">new</span> CFather)</span></span>;</span><br><span class="line"><span class="function">SonPtr <span class="title">son</span><span class="params">(<span class="keyword">new</span> CSon)</span></span>;</span><br><span class="line">father-&gt;m_son = son;</span><br><span class="line">son-&gt;m_father = father;</span><br></pre></td></tr></table></figure><p>为了解决循环引用带来的内存无法释放的问题，weak_ptr产生了，只要将循环引用中的一环改为weak_ptr，问题就迎刃而解了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CFather</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSon</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">shared_ptr</span>&lt;CFather&gt; FatherPtr;</span><br><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">shared_ptr</span>&lt;CSon&gt; SonPtr;</span><br><span class="line"><span class="keyword">typedef</span> boost::weak_ptr&lt;CSon&gt; SonWeakPtr;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CFather</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">SonWeakPtr m_son;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">FatherPtr m_father;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">FatherPtr <span class="title">father</span><span class="params">(<span class="keyword">new</span> CFather)</span></span>;</span><br><span class="line"><span class="function">SonPtr <span class="title">son</span><span class="params">(<span class="keyword">new</span> CSon)</span></span>;</span><br><span class="line">father-&gt;m_son = son;</span><br><span class="line">son-&gt;m_father = father;</span><br><span class="line"></span><br><span class="line"><span class="comment">//how to access weak_ptr</span></span><br><span class="line">&#123;</span><br><span class="line">SonPtr son = father-&gt;m_son.lock();</span><br><span class="line"><span class="keyword">if</span> (son)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看它是如何工作的：</p><ul><li><p>weak_ptr必须由shared_ptr或其他weak_ptr初始化，weak_ptr只是作为shared_ptr的观察者，不会导致shared_ptr的引用计数加1；</p></li><li><p>在每次使用指针时，还是要获取shared_ptr，方法是调用lock成员函数，实际上，weak_ptr没有重载*和-&gt;，也没有提供get来获取裸指针，所以它是安全的。</p></li></ul><p>那么重写后的代码，是不是解决了内存泄露的问题呢？初始后father的引用计数为2，son为1，son销毁后引用计数变为0，从而会释放son持有的CSon指针，同时CSon的成员m_father也会析构，father的引用计数变为1，father销毁后引用计数变为0，最终father持有的CFather指针得到释放。</p><h4 id="intrusive-ptr">intrusive_ptr</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSharedObject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CSharedObject() : m_ulCnt(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddRef</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">InterlockedIncrement((<span class="keyword">long</span> *)&amp;m_ulCnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">ReleaseRef</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> InterlockedDecrement((<span class="keyword">long</span> *)&amp;m_ulCnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> m_ulCnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyObject</span> :</span> <span class="keyword">public</span> CSharedObject</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> boost::intrusive_ptr&lt;CMyObject&gt; MyObjectPtr; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intrusive_ptr_release</span><span class="params">(CMyObject *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ReleaseRef() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intrusive_ptr_add_ref</span><span class="params">(CMyObject *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;AddRef();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>intrusive_ptr用于存储带有侵入式引用计数对象的指针，使用时定义<code>boost::intrusive_ptr&lt;T&gt;</code>的同时，还要定义void intrusive_ptr_add_ref(T*) 和void intrusive_ptr_release(T *)，intrusive_ptr保证需要增加引用计数时调用intrusive_ptr_add_ref，需要减小引用计数时调用intrusive_ptr_release。</p><p>使用intrusive_ptr的主要原因有：</p><ul><li><p>一些已有的 frameworks 和操作系统提供带有侵入式引用计数的对象；</p></li><li><p>intrusive_ptr 的内存占用量和相应的裸指针一样；</p></li><li><p><code>intrusive_ptr&lt;T&gt;</code> 能够从任意一个类型为 T * 的裸指针构造出来。</p></li></ul><h4 id="scoped-array">scoped_array</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scoped_array</span></span><br><span class="line"><span class="keyword">typedef</span> boost::scoped_array&lt;<span class="keyword">int</span>&gt; IntArrayPtr;</span><br><span class="line"></span><br><span class="line"><span class="function">IntArrayPtr <span class="title">intArrayPtr</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>])</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">intArrayPtr[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">intArrayPtr[<span class="number">10</span>] = <span class="number">10</span>; <span class="comment">//no check</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// scoped_ptr to vector</span></span><br><span class="line"><span class="keyword">typedef</span> boost::scoped_ptr&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; IntArrayPtr;</span><br><span class="line"></span><br><span class="line"><span class="function">IntArrayPtr <span class="title">intArrayPtr</span><span class="params">(<span class="keyword">new</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">(*intArrayPtr)[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(*intArrayPtr)[<span class="number">10</span>] = <span class="number">10</span>; <span class="comment">//no check</span></span><br><span class="line">intArrayPtr-&gt;at(<span class="number">10</span>) = <span class="number">10</span>; <span class="comment">//have check</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shared_array</span></span><br><span class="line"><span class="keyword">typedef</span> boost::shared_array&lt;<span class="keyword">int</span>&gt; IntArrayPtr;</span><br><span class="line"></span><br><span class="line"><span class="function">IntArrayPtr <span class="title">intArrayPtr</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>])</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">intArrayPtr[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">intArrayPtr[<span class="number">10</span>] = <span class="number">10</span>; <span class="comment">//no check</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shared_ptr to vector</span></span><br><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; IntArrayPtr;</span><br><span class="line"></span><br><span class="line"><span class="function">IntArrayPtr <span class="title">intArrayPtr</span><span class="params">(<span class="keyword">new</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">(*intArrayPtr)[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(*intArrayPtr)[<span class="number">10</span>] = <span class="number">10</span>; <span class="comment">//no check</span></span><br><span class="line">intArrayPtr-&gt;at(<span class="number">10</span>) = <span class="number">10</span>; <span class="comment">//have check</span></span><br></pre></td></tr></table></figure><p>scoped_array和shared_array是专门管理用new T[]分配的指针的，它们都重载了[]操作符，没有重载*和-&gt;操作符，使用scoped_array和shared_ptr确保了在删除时相应的使用delete []。实际上scoped_array和shared_array完全可以用vector来代替C数组，见上述示例代码。</p><h3 id="原理">原理</h3><p>用一个自己实现的简单版本来说明一下shared_ptr的原理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySmartPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T * <span class="keyword">operator</span> -&gt;() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_pData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T &amp; <span class="keyword">operator</span> *()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *m_pData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MySmartPtr()</span><br><span class="line">&#123;</span><br><span class="line">m_pData = <span class="literal">NULL</span>;</span><br><span class="line">m_piCnt = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">MySmartPtr</span><span class="params">(T * pData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_pData = pData;</span><br><span class="line">m_piCnt = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">0</span>);</span><br><span class="line">InterlockedIncrement((<span class="keyword">long</span>*)m_piCnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MySmartPtr &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MySmartPtr &amp; other)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other &amp;&amp; m_pData != other.m_pData)</span><br><span class="line">&#123;</span><br><span class="line">destroy();</span><br><span class="line">m_pData = other.m_pData;</span><br><span class="line">m_piCnt = other.m_piCnt;</span><br><span class="line">InterlockedIncrement((<span class="keyword">long</span>*)m_piCnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MySmartPtr(<span class="keyword">const</span> MySmartPtr &amp; other)</span><br><span class="line">&#123;</span><br><span class="line">m_pData = <span class="literal">NULL</span>;</span><br><span class="line">m_piCnt = <span class="literal">NULL</span>;</span><br><span class="line">*<span class="keyword">this</span> = other;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~MySmartPtr()</span><br><span class="line">&#123;</span><br><span class="line">destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_piCnt &amp;&amp; *m_piCnt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (InterlockedDecrement((<span class="keyword">long</span>*)m_piCnt) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_pData;</span><br><span class="line">m_pData = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">delete</span> m_piCnt;</span><br><span class="line">m_piCnt = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T *m_pData;</span><br><span class="line"><span class="keyword">int</span> *m_piCnt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>智能指针所运用的基本原理包括：</p><p>（1）  重载*和-&gt;操作符，是其用法和裸指针的使用方法一致；</p><p>（2）  智能指针对象的析构函数中判断裸指针是否删除，RAII思想的运用；</p><p>（3）  shared_ptr使用一个共享的引用计数决定何时删除裸指针（见示例）。</p><h3 id="性能">性能</h3><p>shared_ptr的性能是使用者比较关心的问题。而这个问题也早已经过广泛的讨论和试验，问题的核心集中在引用计数的实现方式，boost文档中记述的一些开发人员所做的试验，试验中测试了5种实现方式：</p><ol><li>Counted pointer using a heap allocated     reference count, this is referred to as simple counted.</li><li>Counted pointer using a special purpose     allocator for the reference count - special counted.</li><li>Counted pointer using an intrusive     reference count - intrusive.</li><li>Linked pointer as described above - linked.</li><li>Cyclic pointer, a counted implementation     using a std::deque for allocation with provision for weak pointers and     garbage collection of cycles of pointers - cyclic.</li></ol><p>从两个方面进行了试验：</p><p>Two tests were run: the first aimed to obtain timings for two basic individual operations:</p><ol><li>Initial construction from raw pointer.</li><li>An amortized copy operation consisting of     half an assignment and half a copy construction - designed to reflect average     usage.</li></ol><p>The second attempted to gain more insight into normal usage by timing the fill and sort algorithms for vectors and lists filled with the various smart pointers.</p><p>试验环境：</p><p>on two compilers:</p><ol><li>MSVC 6.0 service pack 3, using default     release optimization mode (/O2 - optimized for speed, no inlining of     functions defined outside a class body unless specified as inline).</li><li>gcc 2.95.2 using full optimization (-O3     -DNDEBUG).</li></ol><p>Additionally, generated pointer sizes (taking into account struct alignment) were compared, as were generated code sizes for MSVC mainly by manual inspection of generated assembly code - a necessity due to function inlining.</p><p>All tests were run on a PII-200 running Windows NT version 4.0</p><p>第一个试验结果：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/4e53ee30-5480-4bf3-bec1-8d74011acd61/index_files/1259d3cf-c465-4c5d-b1e7-de1f91b0ebef.png" alt="MSVC speed graph"></p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/4e53ee30-5480-4bf3-bec1-8d74011acd61/index_files/3c04e371-3c52-414c-94c9-a922520d4cb9.png" alt="GCC speed graph"></p><p>单位：纳秒</p><p>MSVC</p><table><thead><tr><th></th><th>initialization</th><th>copy operation</th></tr></thead><tbody><tr><td>simple counted</td><td>3000 +/- 170</td><td>104 +/- 31</td></tr><tr><td>special counted</td><td>1330 +/- 50</td><td>85 +/- 9</td></tr><tr><td>intrusive</td><td>1000 +/- 20</td><td>71 +/- 3</td></tr><tr><td>linked</td><td>970 +/- 60</td><td>136 +/- 10</td></tr><tr><td>cyclic</td><td>1290 +/- 70</td><td>112 +/- 12</td></tr><tr><td>dumb</td><td>1020 +/- 20</td><td>10 +/- 4</td></tr><tr><td>raw</td><td>1038 +/- 30</td><td>10 +/- 5</td></tr></tbody></table><p>GCC</p><table><thead><tr><th></th><th>initialization</th><th>copy operation</th></tr></thead><tbody><tr><td>simple counted</td><td>4620 +/- 150</td><td>301 +/- 28</td></tr><tr><td>special counted</td><td>1990 +/- 40</td><td>264 +/- 7</td></tr><tr><td>intrusive</td><td>1590 +/- 70</td><td>181 +/- 12</td></tr><tr><td>linked</td><td>1470 +/- 140</td><td>345 +/- 26</td></tr><tr><td>cyclic</td><td>2180 +/- 100</td><td>330 +/- 18</td></tr><tr><td>dumb</td><td>1590 +/- 70</td><td>74 +/- 12</td></tr><tr><td>raw</td><td>1430 +/- 60</td><td>27 +/- 11</td></tr></tbody></table><p>第二个试验结果：</p><p>单位：秒</p><p>GCC</p><table><thead><tr><th></th><th>vector</th><th>list</th><th></th><th></th></tr></thead><tbody><tr><td></td><td>fill</td><td>sort</td><td>fill</td><td>sort</td></tr><tr><td>simple counted</td><td>46.54</td><td>2.44</td><td>47.09</td><td>3.22</td></tr><tr><td>special counted</td><td>14.02</td><td>2.83</td><td>7.28</td><td>3.21</td></tr><tr><td>intrusive</td><td>12.15</td><td>1.91</td><td>7.99</td><td>3.08</td></tr><tr><td>linked</td><td>12.46</td><td>2.32</td><td>8.14</td><td>3.27</td></tr><tr><td>cyclic</td><td>22.60</td><td>3.19</td><td>1.63</td><td>3.18</td></tr><tr><td>raw</td><td>11.81</td><td>0.24</td><td>27.51</td><td>0.77</td></tr></tbody></table><p>MSVC</p><table><thead><tr><th></th><th>vector</th><th>list</th><th></th><th></th></tr></thead><tbody><tr><td></td><td>fill</td><td>sort</td><td>fill</td><td>sort</td></tr><tr><td>simple counted</td><td>1.83</td><td>2.37</td><td>1.86</td><td>4.85</td></tr><tr><td>special counted</td><td>1.04</td><td>2.35</td><td>1.38</td><td>4.58</td></tr><tr><td>intrusive</td><td>1.04</td><td>1.84</td><td>1.16</td><td>4.29</td></tr><tr><td>linked</td><td>1.08</td><td>2.00</td><td>1.21</td><td>4.33</td></tr><tr><td>cyclic</td><td>1.38</td><td>2.84</td><td>1.47</td><td>4.73</td></tr><tr><td>raw</td><td>0.67</td><td>0.28</td><td>1.24</td><td>1.81</td></tr></tbody></table><p>结论：</p><p>The timing results mainly speak for themselves: clearly an intrusive pointer outperforms all others and a simple heap based counted pointer has poor performance relative to other implementations. The selection of an optimal non-intrusive smart pointer implementation is more application dependent, however. Where small numbers of copies are expected, it is likely that the linked implementation will be favoured. Conversely, for larger numbers of copies a counted pointer with some type of special purpose allocator looks like a win. Other factors to bear in mind are: -</p><p>Deterministic individual, as opposed to amortized, operation time. This weighs against any implementation depending on an allocator.</p><p>Multithreaded synchronization. This weighs against an implementation which spreads its information as in the case of linked pointer.</p><p>根据以上试验可以看出相比于裸指针，shared_ptr性能地损失主要来自两方面：一方面是第一次初始化时需要额外分配引用计数，另一方面是赋值或拷贝时引用计数的更新等，而前者的损失是主要的。试验结果表明带有侵入式引用计数的实现胜过其他实现，但是大多数应用更依赖于非侵入式引用计数的实现。boost::shared_ptr就是非侵入式实现，其默认实现属于simple counted，通过传入自定义的分配器，也可以实现special counted方式引用计数，除非对时间特别关键的应用，默认的实现完全可以满足要求。另外在初始化时使用工厂方法boost::make_shared(或boost::allocate_shared)可以获得和侵入式接近的性能，因为boost::make_shared使用了一个placement new来分配T，这样相当于节省了分配引用计数的时间。关于是否可以将智能指针作为函数参数传递，上述试验中的simple counted实现正是用了一个默认的boost::shared_ptr，其拷贝的时间确实比裸指针多很多（在PII-200机器上是104纳秒，裸指针是10纳秒），但是毕竟也是纳秒级别，实际使用时的性能损失应该基本觉察不到。boost::shared_ptr的默认实现是采用lock-free的整数原子操作进行的引用计数增减，试验并未评估在复杂的多线程或异步环境中对系统造成的性能损失。</p><h2 id="boost内存池">boost内存池</h2><p>内存池用于管理大量小对象，避免频繁在堆上分配。boost内存池包含如下内容：</p><ul><li>pool</li><li>object_pool</li><li>singleton_pool</li><li>pool_allocator</li></ul><h3 id="使用示例-v2">使用示例</h3><h4 id="pool">pool</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">boost::pool&lt;&gt; FixSizeMemPool(<span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *pInt = (<span class="keyword">int</span> *)FixSizeMemPool.<span class="built_in">malloc</span>();</span><br><span class="line"></span><br><span class="line">FixSizeMemPool.<span class="built_in">free</span>(pInt);</span><br><span class="line"></span><br><span class="line">pInt = (<span class="keyword">int</span> *)FixSizeMemPool.<span class="built_in">malloc</span>();</span><br><span class="line"></span><br><span class="line">FixSizeMemPool.ordered_free(pInt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *pIntArray = (<span class="keyword">int</span> *)FixSizeMemPool.ordered_malloc(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">FixSizeMemPool.ordered_free(pIntArray, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">pIntArray = (<span class="keyword">int</span> *)FixSizeMemPool.ordered_malloc(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">FixSizeMemPool.<span class="built_in">free</span>(pIntArray, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>boost::pool是用来快速分配固定大小内存快的内存池，构造函数的第一个参数是希望从内存池中每次获取的区块(chunk)的大小，第二个参数表示每次空间不够后再次分配的区块个数（next_chunk_num），为默认参数，默认值为 32。第一次调用malloc或ordered_malloc时进行第一次分配，分配能容纳next_chunk_num个区块的内存快(block)，然后将next_chunk_num乘以2，也就是说下一次分配的内存快能容纳的区块个数翻倍，依次类推。malloc是从内存池中分配一个区块，如果失败返回0；ordered_malloc是从内存池中分配连续的区块，如果失败也是返回0；分配的区块不再使用后通过free返还给内存池；特别的ordered_free保证对返还后的空闲区块排序，以保证之后使用ordered_malloc分配连续区块的机会更大，所以ordered_free的时间复杂度不是O(1)，如果你经常会使用ordered_malloc，最好在释放时使用ordered_free。FixSizeMemPool销毁时保证所有分配的内存得到释放，即使没有调用free或ordered_free，也因此boost::pool不是线程安全的，它不是设计用来多个模块共享的。</p><h4 id="object-pool">object_pool</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">X(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">boost::object_pool&lt;X&gt; ObjectPool(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">X *pX = ObjectPool.construct(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">ObjectPool.destroy(pX);</span><br></pre></td></tr></table></figure><p>boost::object_pool是从boost::pool继承而来，构造函数只有一个参数即next_chunk_num，和boost::pool的主要区别是boost::object_pool在获取到区块后，使用了一次placement new对区块进行了构造，之后返回了<code>T *</code>而不是<code>void *</code>，这是通过调用construct进行的，construct默认支持3个参数，如果想传入更多参数，需要修改boost/pool/detail/pool_construct_simple.inc文件。相应的调用destroy，会先进行析购，然后回收内存。当然也可以调用malloc/free（没有ordered_malloc/ordered_free），但不推荐，因为ObjectPool在销毁时会自动调用没有free的区块的析购函数，如果在malloc后，用户自己没有对区块进行构造，而又没有调用free，那么最后在其上调用一次析购函数可能产生错误。</p><h4 id="singleton-pool">singleton_pool</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyPoolTag</span>&#123;</span>&#125;;</span><br><span class="line"><span class="keyword">typedef</span> boost::singleton_pool&lt;MyPoolTag, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)&gt; MyPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *pInt = (<span class="keyword">int</span> *)MyPool::<span class="built_in">malloc</span>();</span><br><span class="line"></span><br><span class="line">MyPool::<span class="built_in">free</span>(pInt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *pIntArray = (<span class="keyword">int</span> *)MyPool::ordered_malloc(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">MyPool::ordered_free(pIntArray, <span class="number">10</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OtherPoolTag</span>&#123;</span>&#125;;</span><br><span class="line"><span class="keyword">typedef</span> boost::singleton_pool&lt;OtherPoolTag, <span class="number">10</span>, </span><br><span class="line">boost::default_user_allocator_new_delete, </span><br><span class="line">boost::mutex, </span><br><span class="line"><span class="number">32</span>&gt; OtherPool;</span><br></pre></td></tr></table></figure><p>boost::singleton_pool是被设计用来在多个模块间共享的，所以是线程安全的。使用singleton模式实现，并且其singleton静态对象也是线程安全的。使用singleton_pool时不用定义对象，malloc/ordered_malloc/free/ordered_free都是静态的，调用方法和boost::pool相同。OtherPool的定义展示了boost::singleton_pool的全貌，10表示请求区块大小；boost::default_user_allocator_new_delete为分配器，默认值也是它，用户可定义其他的分配器；boost::mutex是为了保证线程安全使用的锁，默认为details::pool::default_mutex；32为next_chunk_num。</p><h4 id="pool-allocator">pool_allocator</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>, boost::pool_allocator&lt;<span class="keyword">int</span>&gt; &gt; vecInt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">vecInt.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boost::singleton_pool&lt;boost::pool_allocator_tag, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)&gt;::release_memory();</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>, boost::pool_allocator&lt;<span class="keyword">int</span>, boost::default_user_allocator_new_delete, boost::mutex, 32&gt; &gt; otherVecInt;</span><br></pre></td></tr></table></figure><p>boost::pool_allocator提供了符合标准的分配器，可用于STL容器。boost::pool_allocator内部实际是使用singleton_pool进行的内存分配，所以如果想手工释放内存可以像上例中使用boost::singleton_pool&lt;boost::pool_alocator_tag, sizeof(int)&gt;::release_memory()。</p><h4 id="boost智能指针和内存池的结合使用">boost智能指针和内存池的结合使用</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPool</span> :</span> <span class="keyword">public</span> boost::noncopyable</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> boost::<span class="built_in">shared_ptr</span>&lt;T&gt; SmartObjectPtr;</span><br><span class="line"></span><br><span class="line"><span class="function">SmartObjectPtr <span class="title">ConstructSmartObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boost::mutex::<span class="function">scoped_lock <span class="title">lock</span><span class="params">(m_mtx)</span></span>;</span><br><span class="line"><span class="keyword">return</span> SmartObjectPtr(m_objpool.construct(), </span><br><span class="line">boost::bind(&amp;SmartPool::DestroySmartObject, <span class="keyword">this</span>, _1),</span><br><span class="line">boost::pool_allocator&lt;boost::detail::sp_counted_base&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroySmartObject</span><span class="params">(T *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_objpool.destroy(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boost::object_pool&lt;T&gt; m_objpool;</span><br><span class="line">boost::mutex m_mtx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span>&#123;</span>&#125;;</span><br><span class="line">SmartPool&lt;X&gt; XSmartPool;</span><br><span class="line">SmartPool&lt;X&gt;::SmartObjectPtr objPtr = XSmartPool.ConstructSmartObject();</span><br></pre></td></tr></table></figure><p>上例展示了将boost智能指针和内存池结合使用的方法。上述方法的限制是要求X有默认构造函数，另外必须XSmartPool在所有智能指针之后释放，当然这两个限制是有方法解决的，大家可以自己想一想。</p><h3 id="原理-v2">原理</h3><p>对于固定大小内存池的实现原理并不复杂，即预先分配一些内存块，每个内存快被划分成相同大小的区块，这些区块被链接在一个空闲链条中，当要分配内存时，从空闲区块头取出一个，如果没有空闲的，则分配新的内存快，当不再使用区块时，将其加入到空闲链表中即可，所以保证了分配和释放的时间复杂度是常量的（除第一次分配或之后追加分配时），肯定比直接使用new分配要快。boost内存池的增长方式是，第一次调用malloc*时分配一个内存快，可容纳若干（可配）个区块，以后每次不够时，再分配一个内存快，大小是前一次的两倍。boost内存池还提供了分配连续区块的接口，为了保证每次分配连续区块成功的机会更大，在释放时提供了排序的释放方法，当然其时间复杂度就不是常量了。boost内存池还保证了内存对齐，可广泛适用于不同平台。</p><h4 id="内存布局">内存布局</h4>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">void</span> *firstBlock;</span><br><span class="line"><span class="keyword">void</span> *firstFreeChunk;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Block</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">union</span> Chunk</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">void</span> *nextChunk;</span><br><span class="line"><span class="keyword">char</span> chunk[chunk_size];</span><br><span class="line">&#125; Chunks[chunk_num];</span><br><span class="line"><span class="keyword">void</span> *nextBlock;</span><br><span class="line">size_type nextBlockSize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每个内存快（Block）的布局如上所示（上述代码仅是为了说明问题的伪代码，真实源代码并不是这样），首先是若干个连续的区块，然后是下一个内存快的指针，最后是下一个内存快的大小。这里比较有意思的一个技巧是复用了区块中的内存存储了下一个区块的指针，将区块链接起来。</p><h4 id="内存对齐">内存对齐</h4><p>boost内存对齐使用了最小公倍数方法（具体推导过程见boost文档），保证了在各种复杂环境下内存的对齐。这一点也是我们自己实现内存池容易忽视的一个问题。</p><h2 id="boost-flyweight">boost::flyweight</h2><p>在《设计模式》一书中描述了flyweight模式，boost::flyweight得名于此。</p><h3 id="使用示例-v3">使用示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_entry</span></span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> first_name;  </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> last_name;  </span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">boost::flyweight&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; first_name;</span><br><span class="line">boost::flyweight&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; last_name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user_entry ue1;</span><br><span class="line">ue1.first_name = <span class="string">"zhang"</span>;</span><br><span class="line">ue1.last_name = <span class="string">"xxx"</span>;</span><br><span class="line"></span><br><span class="line">user_entry ue2;</span><br><span class="line">ue2.first_name = <span class="string">"zhang"</span>;</span><br><span class="line">ue2.last_name = <span class="string">"yyy"</span>;</span><br><span class="line"></span><br><span class="line">user_entry ue3;</span><br><span class="line">ue3.first_name = <span class="string">"zhang"</span>;</span><br><span class="line">ue3.last_name = <span class="string">"yyy"</span>;</span><br></pre></td></tr></table></figure><p>boost::flyweight的使用非常简单，大多数时候只需要修改一下结构体的定义，就能带来内存的节省，当冗余度越大时，内存节省越明显，例如上例，使用boost::flyweight后，内存中只有一份“zhang”，当有成千上万个这样的对象时，姓相同的比例非常大，这样就能节省很多内存。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;c++对内存的原始控制是其优势，同时带来一系列灾难性问题，例如野指针问题、内存泄漏问题、内存碎片问题，在c++世界这是非常常见而棘手的问题，其实这些问题早有成熟应对方案，就以boost为例，早就包含相关库，有些已经成为c++标准库。c++解决内存方面的技术有：&lt;/p&gt;
&lt;p&gt;（1）智能指针：解决野指针、内存泄漏问题；&lt;/p&gt;
&lt;p&gt;（2）内存池：提升内存分配效率，解决内存碎片问题；&lt;/p&gt;
&lt;p&gt;（3）flyweight：解决大量重复对象对内存的浪费。&lt;/p&gt;
&lt;p&gt;下面通过一些实例介绍boost对上述技术的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="http://zhongpan.tech/categories/c/"/>
    
    
      <category term="c++" scheme="http://zhongpan.tech/tags/c/"/>
    
      <category term="boost" scheme="http://zhongpan.tech/tags/boost/"/>
    
      <category term="memory" scheme="http://zhongpan.tech/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>vscode中对python进行修改符号名重构时总是失败</title>
    <link href="http://zhongpan.tech/2020/01/31/023-python-refactor-rename-failur-in-vscode/"/>
    <id>http://zhongpan.tech/2020/01/31/023-python-refactor-rename-failur-in-vscode/</id>
    <published>2020-01-31T04:34:01.000Z</published>
    <updated>2021-03-25T02:36:16.467Z</updated>
    
    <content type="html"><![CDATA[<p>最近在vscode中重构python代码，修改符号名时总是失败，报如下错误：</p><blockquote><p>Refactor failed. expected string or buffer<br>[(‘<a href="http://refactor.py" target="_blank" rel="noopener">refactor.py</a>’, 294, ‘watch’, ‘self._process_request(self._input.readline())’), (‘<a href="http://refactor.py" target="_blank" rel="noopener">refactor.py</a>’, 275, ‘_process_request’, “request[‘start’]), request[‘name’], int(request[‘indent_size’]))”), (‘<a href="http://refactor.py" target="_blank" rel="noopener">refactor.py</a>’, 206, ‘_rename’, ‘refactor.refactor()’), (‘<a href="http://refactor.py" target="_blank" rel="noopener">refactor.py</a>’, 117, ‘refactor’, ‘self.onRefactor()’), (‘<a href="http://refactor.py" target="_blank" rel="noopener">refactor.py</a>’, 139, ‘onRefactor’, ‘changes = renamed.get_changes(self._newName, task_handle=self.<em>handle)’), (‘D:\Programs\Anaconda2\lib\site-packages\rope\refactor\<a href="http://rename.py" target="_blank" rel="noopener">rename.py</a>’, 97, ‘get_changes’, 'new_content = rename_in_module(finder, new_name, resource=file</em>)’), …</p></blockquote><p>从报错中可以看到重命名用到了rope，推测可能是rope有bug，经过一番尝试，有两种解决方法。</p><a id="more"></a><h2 id="方法1">方法1</h2><p>vscode：1.41.1</p><p>python extensions：2020.1.58038</p><p>rope：0.10.5</p><p>默认安装的rope版本为0.10.5，尝试升级rope：</p><blockquote><p>$ pip install -U rope<br>Collecting rope<br>Using cached <a href="https://files.pythonhosted.org/packages/fa/a0/98c936091acad7fe96af3a945a5e4a1ddab9f4a2ba4e6eb56fe469c9457c/rope-0.16.0-py2-none-any.whl" target="_blank" rel="noopener">https://files.pythonhosted.org/packages/fa/a0/98c936091acad7fe96af3a945a5e4a1ddab9f4a2ba4e6eb56fe469c9457c/rope-0.16.0-py2-none-any.whl</a><br>Installing collected packages: rope<br>Found existing installation: rope 0.10.5<br>Uninstalling rope-0.10.5:<br>Successfully uninstalled rope-0.10.5<br>Successfully installed rope-0.16.0</p></blockquote><p>最新版本为0.16.0，再次尝试修改符号名，问题消失，说明rope确实有bug，已经解决。</p><h2 id="方法2">方法2</h2><p>python extensions有两种语言服务器：jedi language server和microsoft python language server，后者是2018.10开始新加入，未来将取代前者，目前默认为前者，前者正是使用rope进行的改名。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/923157ee-0b04-470a-908d-83efeaa03743/index_files/b5b00e5a-af92-46ac-8a8b-1beff6e7cb83.png" alt="image-20200131144645912"></p><p>尝试切换到后者，去勾选jedi enabled。</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/923157ee-0b04-470a-908d-83efeaa03743/index_files/0715c8d6-3766-44af-b3e4-736038f2e477.png" alt="image-20200131144414985"></p><p>重启vscode，会自动下载microsoft python language server，等下载完成后，再次尝试修改符号名，问题消失，在新的language server没有此问题。</p><p>新的language server发展时间不长，可能没有老的稳定，大家慎重使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在vscode中重构python代码，修改符号名时总是失败，报如下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Refactor failed. expected string or buffer&lt;br&gt;
[(‘&lt;a href=&quot;http://refactor.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;refactor.py&lt;/a&gt;’, 294, ‘watch’, ‘self._process_request(self._input.readline())’), (‘&lt;a href=&quot;http://refactor.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;refactor.py&lt;/a&gt;’, 275, ‘_process_request’, “request[‘start’]), request[‘name’], int(request[‘indent_size’]))”), (‘&lt;a href=&quot;http://refactor.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;refactor.py&lt;/a&gt;’, 206, ‘_rename’, ‘refactor.refactor()’), (‘&lt;a href=&quot;http://refactor.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;refactor.py&lt;/a&gt;’, 117, ‘refactor’, ‘self.onRefactor()’), (‘&lt;a href=&quot;http://refactor.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;refactor.py&lt;/a&gt;’, 139, ‘onRefactor’, ‘changes = renamed.get_changes(self._newName, task_handle=self.&lt;em&gt;handle)’), (‘D:\Programs\Anaconda2\lib\site-packages\rope\refactor\&lt;a href=&quot;http://rename.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;rename.py&lt;/a&gt;’, 97, ‘get_changes’, &#39;new_content = rename_in_module(finder, new_name, resource=file&lt;/em&gt;)’), …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从报错中可以看到重命名用到了rope，推测可能是rope有bug，经过一番尝试，有两种解决方法。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://zhongpan.tech/categories/python/"/>
    
    
      <category term="vscode" scheme="http://zhongpan.tech/tags/vscode/"/>
    
      <category term="python" scheme="http://zhongpan.tech/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>conan一年使用总结</title>
    <link href="http://zhongpan.tech/2020/01/11/022-one-year-usage-summary-of-conan/"/>
    <id>http://zhongpan.tech/2020/01/11/022-one-year-usage-summary-of-conan/</id>
    <published>2020-01-11T06:56:42.000Z</published>
    <updated>2021-03-25T02:36:16.463Z</updated>
    
    <content type="html"><![CDATA[<p>关注C++的包管理有一段时间了，一直非常羡慕python、java的同学，有非常完善的包管理工具，使用第三方库非常方便。2016年底开始接触到conan，后来又发现vcpkg，两者都是github开源项目，前者后来得到jfrog的支持，其artifactory也增加了对conan包的支持，而后者是大牌microsoft维护的。</p><p>conan和vcpkg的出现终于让人眼前一亮，经过1年的发展，到2018年它们相对成熟起来，而我们的产品也急剧膨胀，迫切需要包管理的机制，因此我下定决心将包管理引入到产品中。</p><p>到底选择conan还是vcpkg，有两点使我们必须选择conan，一是跨平台，不仅要支持windows，还要支持linux，二是要能自建包服务器。当时的vcpkg还只能支持windows，当然后来的版本也支持linux了，而自建包服务器，vcpkg一直都不可以。后来证明这个选择是正确的。</p><a id="more"></a><h2 id="项目背景">项目背景</h2><p>先说下我们的产品，这是一个CS结构通信设备管理系统，2010年开始研发，服务端C++实现，采用了分布式计算框架ice，是一个分布式系统。架构上分为平台层和产品层，平台层实现了一些公共框架和服务。截止到2018年中，代码规模产品层达到188W行，86个工程，平台层达到300W行，245个工程。</p><p>最初产品层和平台层的代码是放在一个SVN库里面的，cmake为一个VC解决方案，整体进行编译打包。这种方式的弊端显而易见，平台和产品的边界很容易打破，模块间的依赖关系无法控制，甚至会出现平台对产品的依赖。为了解决这个问题，从2015年开始就不断对开发架构进行调整，经历了两个阶段：</p><p>（1）SVN分离，拆分成产品和平台两个SVN，产品层通过SVN外链链接到平台层SVN，从产品层来看还是一个完整的SVN。将平台层对外头文件和库拆分到单独目录，通过cmake模块控制平台层不能include产品层头文件且产品层只能include平台层对外头文件。cmake为产品层和平台层两个VC解决方案，分别单独编译；</p><p>（2）解除产品层对平台外链，平台层编译后将对外头文件和库打包为SDK压缩包，存放在文件服务器，产品层开发人员下载平台SDK压缩包后解压到相应目录，然后进行产品层开发。</p><p>此时基本控制住了产品和平台的代码边界，但是仍有诸多不便和问题：</p><p>（1）产品层开发人员需要手动下载平台SDK压缩包，使用不方便，而且版本对应关系容易出错；</p><p>（2）平台层仍然是一个整体，新版本开发需要整体分支，无法做到细粒度的复用，而且总是整体编译打包，非常耗时；</p><p>（3）第三方库是手工编译好之后将头文件和库放到SVN上的，没有源代码，如需升级版本或修改源码或调试就非常麻烦。</p><p>要解决上述问题，只能引入包管理机制。</p><h2 id="成功的关键">成功的关键</h2><p>在一个大型组织中引入一项新技术还真不是一件易事，特别是对于一个正在成长中的技术。但是我知道这项技术对于我们非常重要，因此我们迫切的只花了很短时间将平台层的300W行代码全部包化，从2018年8月开始准备，2018年11月我带领团队花费3周时间将平台层完全包化。</p><p>引入包管理主要是解决平台的使用问题，所以要包化的是平台层，产品层是包的消费者。那么我们是怎么将平台层几百万行代码快速包化的呢，成功的关键在于如下几点。</p><h3 id="种子选手">种子选手</h3><p>包化的过程不仅需要懂得如何使用，还包括如何拆分和设计包，包的粒度应该多大。起初，为了快速引入包管理机制，在后者上我们考虑的不够，吃了一些亏。</p><p>在动手之前要对conan做到了然于心，最好的办法是阅读conan的文档，我起码研究了不下三遍，吃透了conan能够提供的方方面面，所以在后面我们需要一种方法将所有包一起本地编译时，我马上想到工作区的方法并成功实现了。</p><p>另外还需要一定python经验，conan自身还是存在一些问题，有时需要修改其源代码。也可能需要修改源代码满足一些特化需求。好在我非常喜欢python，有多年的使用经验了，这一点在后面起到重要作用。</p><p>我自己首先做到成竹在胸，然后再培育一批种子选手，对它们进行培训。这些准备工作是后面快速完成包化的关键。</p><h3 id="制定规则-隐藏细节">制定规则、隐藏细节</h3><p>技术本身往往具有很多灵活性，这是为了适应各种不同场景需要。但是要落地到具体应用，最好加以封装，避免暴露过多细节。如果引入conan后，随之带来的变化会造成困扰，那么再好的东西也会招致反感。不要以为就是敲一个命令行的事情，开发人员都会嫌麻烦，这是在我的组织里面普遍存在的。所以我们尽量做到保持以往的开发习惯，屏蔽掉一些细节，在这方面做了大量工作。下面梳理一下引入包管理后带来的一些变化，以及我们是如何做的。</p><p>（1）开发环境</p><ul><li><p>通过一键脚本初始化conan开发环境，包括registry设置，profile设置；</p></li><li><p>构建的工具也包化，例如cmake，总之一切都是包。</p></li></ul><p>（2）开发过程</p><ul><li><p>包名的名命规则：conan中每个包的名字遵循name/version@user/channel格式，我们将user和channel赋予了特定含义，user用于表示子系统，如ext表示第三方库，core表示自研的公共库等等，channel用于区分开发版本，主干开发版为dev，某分支开发版为xxx_dev，xxx为分支名。</p></li><li><p>包的拆分原则：包的拆分要遵循两个基本原则：最小依赖原则和最大复用原则。最大复用就是，对于复用的要尽量细，对于不复用的，可以粗放一些。最小依赖就是一个包可以精确的依赖必须依赖的。conan并不限制一个包里面包含多少库，但是包是用来复用的，粒度越小复用度也越大，最理想的情况是一个库一个包，除了少数例外：有些库是一系列库的组合，它们的源代码本生没有模块化拆分，例如boost，ice，不好做成多个包；有一些不是用来复用的，例如平台层的公共服务，为了最终产品打包方便，也做成了包。起初为了尽快引入包管理，按照原来的目录结构，做成了大包，也就是一个包包含多个库，这带来了一系列问题，首先造成了依赖关系扩大化，也就是依赖了不该依赖的包，导致编译效率下降，因为头文件搜索路径和导入库数量显著增加了；其次，会遇到一些循环依赖问题，这时必须通过进一步拆分解除循环。</p></li><li><p>产品层如何消费包：对于包的消费方，需要一种方便的方法消费包，我定义了一个特殊的包，集成包，将平台层所有包require到集成包，产品层只需要依赖集成包。</p></li><li><p>包的存储和上传：包的存储采用了商业的artifactory，我们的maven以及npm已经使用了artifactory，前面说了他也支持了conan。包的上传使用开发者自己的账号，这样可以追溯谁修改了包，通过artifactory集成AD可以容易做到这点。conan本身也提供一个简单的服务端，可满足基本使用。</p></li><li><p>版本管理：包化只是一个开始，包化之后变成了一个个可以独立编译的包，每个包可以独立版本演进，这给版本管理带来了更大的挑战。版本管理需要重点考虑几点：不同开发分支的包不会互相影响；什么情况升版本号，升哪些包的版本号；升版本号的规则是怎么样的；如何跟踪版本的变化。我们采取的措施是：通过channel隔离每个分支，彼此互不干扰，每个分支根目录下建立channel.txt文件填入channel名；如果进入集测阶段或释放的产品版本依赖的平台包有修改，就需要升级版本号，版本号升级规则按照SemVer规范，如果修改是二进制向前兼容的，那么依赖它的其他包不需要升版本号，也不需要重编。如果修改不是二进制向前兼容的，那么依赖它的其他包也需要升级版本号。任何包有版本升级后，集成包也需要升级版本号，我们会维护一个版本地图，包含从产品版本到集成包的关系以及集成包包含的所有包版本的关系。</p></li><li><p>整体编译：包的好处是每个包都可以独立开发，但是在新版本开发阶段，往往很多包会一起大量修改（我们将很多并不是为了开发时复用的服务也包化了），为了提高开发效率，最好能将所有包一起本地整体编译，这时conan的工作区就派上用场了，我们使用的1.6.1版本的工作区特性还不完善，我们对源代码做了一些修改。同时产品层编译也做了一些适配，不使用conan缓存，直接使用工作区中的头文件和库。</p></li></ul><p>（3）运行发布</p><ul><li><p>持续集成：主要的变化是监控的粒度变成了一个个包，但是包之间是有关联的。考虑过几种解决方案，方案一，一个包一个job，job触发受影响包的job；方案二，参数化的job，通过pipeline代码并发构建所有受影响包，代码scm的hook触发job；方案三，通过conan工作区机制，整体构建所有包，监控粒度实际变成了所有包。方案一要建立很多job，不可取。方案二是最合理的，但是如果一些底层包变化，整体编译时间还是很长，另外需要scm回调ci支持。方案三的问题是即使没有变化的包也会编译上传。目前，我们采用的方案三。</p><p>方案一、方案二中判断受影响包的方法都是通过conan info -bo来获取的，这仅仅是通过依赖关系计算的，实际上，有时一个包修改了，并不一定需要重新编译依赖它的包，但是目前没有办法识别这一点。</p></li><li><p>运行：分安装包运行和开发环境运行，安装包是通过conan import将包里面的二进制程序拷贝到运行目录，然后打成安装包的。开发环境运行，如果每次都拷贝到运行目录，一来速度慢，二来浪费大量磁盘空间，conan提供了一个virtualrunenv的generator，但是因为我们的包太多了，导致命令行长度过长，无法使用这个特性，最终我们想了一个办法，在运行目录中建立了包中二进制程序的软链接，这是在开发环境启动脚本中自动完成的。</p></li><li><p>压缩源码：每个安装包，同时需要打包对应的源码，便于以后调试使用。conan包对应的源代码也存储在包服务器上，打包的时候可以从其下载源代码。</p></li><li><p>离线使用conan：有些环境无法访问包服务器，需要能够离线使用conan，那么就需要将conan缓存目录也打包。</p></li></ul><h3 id="及时响应调整">及时响应调整</h3><p>有很多情况是一开始没有想到的，完成包化之后，在使用过程中我们不断进行调整。那段时间我天天盯着微信群，有任何问题都会第一时间处理掉，消除大家的疑问。</p><p>例如一开始我们设想的产品层应该都是基于二进制的包去访问平台层，但是实际情况是此时平台层也在大量的开发，经常出现平台层没有及时上传包而导致产品层编译不过。还有平台层改动一个包之后，常常连锁的需要重编其他包上传，开发效率相比之前显著下降，大家迫切需要像以前一样，cmake为一个VC解决方案，整体进行编译。幸好conan的工作区特性正是应对这种场景，但是我们使用的1.6.1版本还存在一些问题，我对源代码进行了一些修改，另外还做了一些优化。</p><p>这种例子还非常多，幸好都一一及时化解。到如今已经稳定运行一年多。</p><h2 id="常见问题总结">常见问题总结</h2><p>以下总结了在使用conan过程中遇到的一些具体问题，希望对遇到相似问题的同学有所帮助。我们使用的conan版本是1.6.1，有些问题在后续版本已经解决，如果你使用的更高版本，可能不会遇到。</p><h3 id="开发环境统一问题">开发环境统一问题</h3><p>初期刚引入conan时，经常报找不到包和registry连不上问题。找不到包通常是开发环境的conan全局编译参数CONAN_USER_HOME/profiles/default设置的不对，而连不上registry通常是因为，默认的conan-center排在第一个位置，内网环境连不上。</p><p>解决措施：在构建脚本中通过-s和-o参数将编译参数固定，不依赖开发者环境上的全局配置。构建脚本中通过-r参数固定registry，不依次查询所有registry。</p><h3 id="整体构建问题">整体构建问题</h3><p>在开发过程中，多个包会一起开发，每个包单独构建，时间太慢，而且conan create构建包是在conan缓存目录中，每次你得切换到缓存目录，在build目录找到VC工程，每次conan create默认又会删除上次的构建，所以非常麻烦。解决这个问题使用了conan工作区的特性，工作区有一个限制是只能用于cmake集成，工作区是就地构建的，不会拷贝到conan缓存构建，并且可以将工作区中的所有包cmake为一个工程。1.6.1版本的工作区还不完善，我们解决了如下问题：</p><p>（1）自动生成conanws.yml文件</p><p>要使用工作区，需要在工作区根目录编写coannws.yml文件，其中定义了每个包的目录、头文件目录和导出库目录以及谁是根包。每当增加新的包或者头文件目录有变化的时候，就需要同步修改这个文件，但是这些信息实际上在conanfile.py文件中都有，所以我做了一个python脚本自动生成conanws.yml文件。</p><p>原理很简单，就是解析conanfile.py文件，提取package_info方法中的头文件目录信息，而根包就是集成包。这里要注意的一点是，conanws.yml中包的顺序是有意义的，必须按照依赖的顺序，这可以通过conan info -bo ALL获取，python脚本中用OrderedDict存储，然后dump到yml文件。</p><p>（2）依赖包的导出库没有加入到当前工程</p><p>工作区里面cmake的时候，因为还没有编译过，还没有生成lib文件或so文件，pckage_info中通过collect_libs()是收集不到库文件的，另外conan的源代码也需要修改。</p><p>解决措施：conanfile.py文件的package_info显式设置self.cpp_info.libs，不要使用tools.collect_libs()，修改conan源代码，在定义target的时候，如果lib目录不包含.conan（也就是不是从缓存中来时）直接拼出库路径，不使用find_library。</p><p>client/generators/cmake_common.py：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/3618d8cf-eab1-46a3-8dbf-f0d5a4eb4886/index_files/2b73cb14-ae3f-4770-b4a7-7894469bb41d.png" alt="image-20200127123526166"></p><p>（3）偶尔依赖包的头文件目录和导入库目录没有加入到当前工程</p><p>原因和上面类似，cmake阶段目录还没生成，空目录被过滤掉了。</p><p>1.13.0版本已经修复，<a href="https://github.com/conan-io/conan/releases/tag/1.13.0" target="_blank" rel="noopener">release说明</a>如下，工作区特性已经彻底重构：</p><p>Feature: Re-implement Workspaces based on Editable packages. (<a href="https://github.com/conan-io/conan/pull/4481" target="_blank" rel="noopener">#4481</a>). Docs: <a href="https://github.com/conan-io/docs/pull/1086" target="_blank" rel="noopener">📃</a></p><p>关键代码build_info.py：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/3618d8cf-eab1-46a3-8dbf-f0d5a4eb4886/index_files/607477cd-d6e6-46fc-bbed-a32edc911382.png" alt="image-20200127123735288"></p><p>我的临时解决方案：</p><p>client/generators/<code>__init__</code>.py</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/3618d8cf-eab1-46a3-8dbf-f0d5a4eb4886/index_files/fa852f4f-cf0d-4348-a342-43947c33a481.png" alt="image-20200127154548889"></p><p>（4）生成VC解决方案时，工程间依赖没有建立</p><p>产生这个问题的原因要先说一下conan是如何设置一个包的导入库的，generator为cmake时，conan install时会生成conanbuildinfo.cmake文件，其中定义了conan_target_link_libraries函数，假设A包依赖B包，那么A的CMakeLists.txt中包含conanbuildinfo.cmake，然后调用conan_target_link_libraries(A)，或者如果启用了TARGETES，就是target_link_libraries(A CONAN_PKG::B)，这样就自动将B包的库导入到A包库上，conan_target_link_libraries中实际上就是调用的target_link_libraries，传输的参数是库名。</p><p>target_link_libraries的参数可以是target名，也可以是库名，当为target名时，会自动加入工程的依赖，但是当为库名时，就不会自动加入也做不到自动。但是当库名和target名一样时，依赖是可以加上的，大多数情况其实是一样的。可是偏巧我们的库名和target名就不一样，所以才有此问题。</p><p>解决措施：修改conan源码，在conan_target_link_libraries中显式调用add_dependencies加入依赖，我们的库名和target名是有对应关系的，从库名得到target名，然后调用add_dependencies。</p><p>（5）会出现副作用，包不能单独编译了</p><p>使用整体构建后，会出现有人通过…跳出包的根目录，访问其他包的头文件，这时是可以成功编译了，从而掩盖了问题。但是当单独编译包时问题暴露了。</p><p>解决这个问题的方法是将add_library等方法封装了一个版本，所有包统一调用封装的，然后在封装版本中检查target的include_directories。这个办法只能检查include_directories属性，头文件里面#include的无法检查。</p><p>（6）工作区的其他限制</p><ul><li>build方法不能有编译逻辑，包括向CMake传递变量，只能直接调用CMake，所有编译逻辑必须在CMakeLists.txt中；</li><li>每个包导出的目录结构（二进制包中的结构）和源码本身的目录结构必须一致。所谓包导出的目录结构，就是package方法中拷贝的目的目录。如果不一致，一个补救方法是在package_info方法中的self.cpp_info.includedirs.append加入和导出目录不一致的本地目录。<br>例如：某包，导出目录有include/gsclient，但本地目录为gsclient/include，要么调整本地目录，也变成include/gsclient，要么加入self.cpp_info.includedirs.append(“gsclient/include”)。</li><li>不能通过self.deps_cpp_info[xxx].rootpath访问lib、bin外的其他目录，因为在缓存中二进制包的布局是所有内容都在rootpath下，但是工作区中，只有二进制内容在rootpath下，其他在源码目录下。要想在缓存和工作区都能工作的方法，只能通过self.deps_cpp_info[xxx].include_paths，然后…跳到上一级访问。</li></ul><h3 id="编译时间变慢问题">编译时间变慢问题</h3><p>前面说明过包的拆分原则，对于复用的包，最好一个库一个包，因为直接的一个问题是会导致编译时间变长，原因是头文件搜索路径变多，导入库变多。例如假设A包有2个库a_1、a_2，a_1需要依赖B包，a_2需要依赖C包，B和C各有10个头文件路径，那么a_1和a_2的搜索路径就都是20个，不是10个。因为默认情况下conan的头文件路径和库都是以包为粒度的。</p><p>一个缓解的办法是启用TARGETES，原来是调用conan_basic_setup()，现在变成调用conan_basic_setup(TARGETES)，然后原来a_1、a_2是调用conan_target_link_libraries(a_1)、conan_target_link_libraries(a_2)，现在变成了target_link_libraries(a_1 CONAN_PKG::B)、target_link_libraries(a_2 CONAN_PKG::C)。这样a_1和a_2的搜索路径就都是10个。</p><p>另外尽量避免因为依赖传递而导致依赖不需要的库，可使用private依赖。当只有cpp依赖某个包，导出头文件不需要依赖时，可以使用private依赖，这样这个依赖的包就不会扩散出去。</p><p>以上只是缓解的办法，最好的办法还是一个库一个包，做到依赖最小化，精确的依赖。</p><h3 id="磁盘空间问题">磁盘空间问题</h3><p>我们的开发环境采用的云桌面，每个人只有40G磁盘空间，所以磁盘空间成了一个重要问题。按照常规的做法，消费包的一方，只能从conan缓存中获取。这样采用工作区编译后，还需要export-pkg到缓存，然后运行的时候还需要import到运行目录，这样就会同样的内容有三份。我们的程序用的debug版，带pdb文件，更加重磁盘负担，上述40G空间远远不够。</p><p>为了解决上述问题，首先消费包的一方能否直接从工作区访问头文件和导出库，我想了一个办法，直接将工作区中集成包的conanbuildinfo.cmake、conanbuildinfo.txt、conaninfo.txt文件拷贝到消费包，不运行conan install，打通了第一关。其次运行时能否不用import，前面提到了virtualrunenv用不了，最后使用的办法是解析conanbuildinfo.txt文件，将依赖的二进制文件建立软链接到运行目录下，windows下是mklink命令。这样就确保了包的二进制文件只存在一份。</p><h3 id="兼容性问题">兼容性问题</h3><h4 id="package-id">package_id</h4><p>conan是用package_id唯一标识一个二进制包，同一个包的不同二进制包的package_id是不一样的，它们也是不兼容的。package_id是控制兼容性的一种手段，如果不兼容了，那么我们就要让package_id产生新的。如果package_id没有变化，那么之前upload到remote的二进制包还可以使用，也就意味着承认是兼容的。</p><p>package_id有一个默认的生成规则，根据如下内容的变化：</p><p>（1）自身settings或options变化；</p><p>（2）require包的增减，也就是name变化；</p><p>（3）require包的版本变化，这时默认是按照SemVer规范，1.0.0之前总是影响，1.0.0之后只有主版本号变化才影响。</p><p>上述（2）（3）不仅影响自己，下游的包都会受影响，所谓下游，例如A依赖B，A就是下游，那么自身和下游全部都需要重新编译上传，了解了上述规则之后，会帮助我们解决两类问题：</p><p>（1）修改conanfile.py文件后，导致找不到某些二进制包，就是因为package_id发生了变化，需要重新编译上传；</p><p>（2）如果所有包的版本严格按照SemVer规范，那么按照默认的package_id生成规则是可以良好运行的，但是也会有一些特殊情况，conan提供了方法修改上述默认规则，例如可以让require包的minor或patch版本号也参与计算。</p><h4 id="升级包版本">升级包版本</h4><p>升级某个包依赖的包的版本之后，自身的版本号是否需要升级，这也是困扰我们的问题。</p><p>用一个例子来说明，假设A/1.0.0，A/1.1.0都依赖C/1.0.0，C/1.0.0依赖D/1.0.0。A/1.0.0是之前释放的版本，A/1.1.0是正在开发的版本，C/1.0.0，D/1.0.0是公共库。在开发A/1.1.0的过程中升级D为1.1.0，C的代码没有改动。那么此时C的版本是否需要升级？</p><table><thead><tr><th></th><th>方案</th><th>问题</th><th>解决措施</th><th>是否推荐</th></tr></thead><tbody><tr><td>方案一</td><td>C升级版本号为1.1.0</td><td>代码没有任何改动却升级版本号</td><td></td><td>否</td></tr><tr><td>方案二</td><td>C不升级版本号但require改为D/1.1.0</td><td>导致A/1.0.0再次编译时使用了新版本D，但是A/1.0.0是已经释放的</td><td></td><td>否</td></tr><tr><td>方案三</td><td>C不升级版本号且不修改require，在A/1.1.0中override为D/1.1.0</td><td>从C的recipe无法create出依赖新版D的包(这个例子中D从1.0.0到1.1.0是兼容的，不需要重编C，如果D变成2.0.0就需要重编C)</td><td>下游包使用–build=missing</td><td>是</td></tr></tbody></table><p>总之，只有修改了代码才升级版本号。</p><h4 id="override">override</h4><p>前面提到上游包或者消费包中可以override下游包的版本。</p><p>require还可以增加override参数，写法是self.requires(“X/1.0.0@user/channel”, override=True)或者requires = ((“X/1.0.0@user/channel”, “override”))。</p><p>那么带上override参数是什么作用呢，其实是针对条件化require的，如果存在override的包，就override版本号，如果不存在，就不会引入依赖。所以这个override名字取得不太好，其实不带override参数也是override的，只是这时即使上游没有这个包，也会引入依赖。</p><p>override一般是新版本，那么可以回退版本吗？答案是编译虽然可以通过，但是可能出现兼容性问题，最好只用于升级版本。</p><p>还有会出现同时存在两个版本包吗？答案是不会，conan会报错，这时必须在上游包override版本号。</p><blockquote><p>ERROR: Conflict in CC/1.2.0@zhongpan/testing<br>Requirement DD/1.1.0@zhongpan/testing conflicts with already defined DD/1.0.0@zhongpan/testing<br>Keeping DD/1.0.0@zhongpan/testing<br>To change it, override it in your base requirements</p></blockquote><h3 id="追踪包上传日志">追踪包上传日志</h3><p>有时会出现某个人提交一个包导致产品编译不过，如何追踪谁提交过包，通过artifactory提供的aql接口，可以很容易查询到，下面的例子查询了非unm_ci用户提交的，近几天满足条件的上传记录，注意这些记录是以文件为粒度的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://10.170.3.50:8040/artifactory/api/search/aql"</span></span><br><span class="line">headers = &#123;<span class="string">"Content-Type"</span>:<span class="string">"text/plain"</span>,</span><br><span class="line"><span class="string">"X-JFrog-Art-Api"</span>:<span class="string">"AKCp5dLCa9UmtgDdQGJzm87onMPyKHxpGJ7YDNTbQomQ8aEzEW8fXcFWMzbSJwufckLkSe6oU"</span>&#125;</span><br><span class="line">data = <span class="string">'''</span></span><br><span class="line"><span class="string">items.find(</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    "$and":[</span></span><br><span class="line"><span class="string">      &#123;"$or":[</span></span><br><span class="line"><span class="string">        &#123;"@conan.package.user":&#123;"$eq":"ext"&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;"@conan.package.user":&#123;"$eq":"core"&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;"@conan.package.channel":&#123;"$eq":"stable"&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;"@conan.package.channel":&#123;"$match":"%s"&#125;&#125;</span></span><br><span class="line"><span class="string">      ]&#125;,    </span></span><br><span class="line"><span class="string">      &#123;"$rf":[</span></span><br><span class="line"><span class="string">        &#123;"$or":[</span></span><br><span class="line"><span class="string">          &#123;"property.key":&#123;"$eq":"conan.package.name"&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;"property.key":&#123;"$eq":"conan.package.version"&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;"property.key":&#123;"$eq":"conan.package.user"&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;"property.key":&#123;"$eq":"conan.package.channel"&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;"property.key":&#123;"$eq":"conan.settings.os"&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;"property.key":&#123;"$eq":"conan.settings.arch"&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;"property.key":&#123;"$eq":"conan.settings.build_type"&#125;&#125;,</span></span><br><span class="line"><span class="string">          &#123;"property.key":&#123;"$eq":"conan.settings.compiler"&#125;&#125;</span></span><br><span class="line"><span class="string">        ]&#125;</span></span><br><span class="line"><span class="string">      ]&#125;,</span></span><br><span class="line"><span class="string">      &#123;"modified":&#123;"$last":"%dd"&#125;&#125;,</span></span><br><span class="line"><span class="string">      &#123;"modified_by":&#123;"$ne":"unm_ci"&#125;&#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">).</span></span><br><span class="line"><span class="string">include("modified_by","modified","name","type","path","archive").</span></span><br><span class="line"><span class="string">sort(&#123;"$desc" : ["modified"]&#125;)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">"--channel"</span>, <span class="string">"-ch"</span>, help=<span class="string">"channel in package recipe"</span>, type=str, default=<span class="string">"*"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">"--days"</span>, <span class="string">"-d"</span>, help=<span class="string">"modified last days"</span>, type=int, default=<span class="string">"1"</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post(url, headers=headers, data=data % (args.channel, args.days))</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">            results = OrderedDict()</span><br><span class="line">            items = r.json()[<span class="string">'results'</span>]</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                paths = item[<span class="string">'path'</span>].split(<span class="string">'/'</span>)</span><br><span class="line">                <span class="keyword">if</span> len(paths) &lt; <span class="number">4</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                recipe = <span class="string">"%s/%s@%s/%s"</span> % (paths[<span class="number">1</span>], paths[<span class="number">2</span>], paths[<span class="number">0</span>], paths[<span class="number">3</span>])</span><br><span class="line">                results[item[<span class="string">'modified'</span>]] = (recipe, item[<span class="string">'modified_by'</span>])</span><br><span class="line">            <span class="keyword">print</span> <span class="string">u"最近%d天上传包列表："</span> % args.days</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> results.keys():</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"%s, %s, %s"</span> % (results[key][<span class="number">0</span>],results[key][<span class="number">1</span>],key)</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br></pre></td></tr></table></figure><h3 id="集成incredibuild-加速编译速度">集成IncrediBuild，加速编译速度</h3><p>client/build/cmake.py：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/3618d8cf-eab1-46a3-8dbf-f0d5a4eb4886/index_files/9f1f10ac-f3cc-4c9f-b6d5-7a36d4743049.png" alt="image-20200127204728101"></p><h3 id="全局编译链接参数">全局编译链接参数</h3><p>通过增加cmake模块，将add_library等封装，所有包使用封装版本，在封装版本中增加全局编译链接参数。</p><h3 id="其他一些bug">其他一些Bug</h3><p>（1）包压缩文件中没有包含文件修改时间，导致每次install下来时间改变，导致重编</p><p>client/remote_manager.py：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/3618d8cf-eab1-46a3-8dbf-f0d5a4eb4886/index_files/630a9f1d-8150-46c2-89ed-22f38ebedcee.png" alt="image-20200127211156003"></p><p>（2）reading .count-file文件编码引起的问题</p><p>新版本已经修改，见<a href="https://github.com/conan-io/conan/commit/79146da40b349b3f6edff922762725d22fcf21e3" target="_blank" rel="noopener">github</a>。</p><p>我的修改方法，util/locks.py：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/3618d8cf-eab1-46a3-8dbf-f0d5a4eb4886/index_files/1b6f9819-4c91-4397-a882-d23b32b47fc3.png" alt="image-20200127211715475"></p><p>（3）环境变量处理异常</p><p>在少数环境遇到过此问题，不是所有环境都有，做了如下修改。</p><p>client/tools/env.py：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/3618d8cf-eab1-46a3-8dbf-f0d5a4eb4886/index_files/1c610f6d-fb80-48dc-9248-4074b52a4c26.png" alt="image-20200127212230811"></p><h2 id="包的设计">包的设计</h2><p>为了快速引入包管理，我们将平台层整体进行了包化，其中实际上包含一些并不是为了复用的模块，这是对现状的妥协，包化的过程并没有对原有模块结构进行调整，只是将它们简单聚合为包。</p><p>回过头再来想，如果从零开始设计，最关键的还是划分好模块，然后才考虑哪些用conan管理。我们的系统是一个分布式系统，共有70多个服务，代码耦合严重：</p><p>（1）分成了平台层和产品层2个SVN，代码揉在一起，服务不能单独编译，不能独立维护；</p><p>（2）由于上面代码揉在一起，模块间的依赖关系错综复杂，完全失控；</p><p>这样一锅粥的代码可想而知维护是很痛苦的，最大的问题是分支多、合并难、测试工作量大。当下流行的微服务的理念正是拯救我们的良药，何况我们本来就是一个分布式系统。我设想的需要做如下拆分：</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/3618d8cf-eab1-46a3-8dbf-f0d5a4eb4886/index_files/e66ec1e5-c345-4987-a039-9c12f0de1d6b.png" alt="image-20200129150959303"></p><p>（1）按照服务将代码拆分到不同的Group，每个Group有若干相关的project，每个project可以独立编译；</p><p>（2）每个服务能够独立部署、独立运行；</p><p>（3）服务之间不能有编译时的依赖，只依赖接口契约或API；</p><p><img src="https://vipkshttps10.wiz.cn/ks/share/resources/21bc5c20-0069-11ea-836e-1bec6edb5295/3618d8cf-eab1-46a3-8dbf-f0d5a4eb4886/index_files/10120170-c57b-4f1d-b0c6-7d0c891e66a2.png" alt="image-20200129151603421"></p><p>理想的情况服务之间只通过接口锲约访问，不依赖服务内部业务对象定义，由接口锲约自动生成代码，编译到客户端服务里面。对于一些复杂的场景，例如需要增加一些缓存机制，优化客户端的访问效率，可以封装为本地API，供其他服务调用。</p><p>（4）每个服务访问不同的数据库；</p><p>（5）服务独享的库放到服务里面，只有多个服务共享的库放到独立的公共库中；极端情况下，公共库都是业务无关的，凡业务相关的通过服务提供RPC接口；</p><p>（6）不同服务运行时可以使用不同版本的公共库。</p><p>按照这样的模块划分之后，并不是所有project都需要使用conan管理，只有复用的project需要，也就接口契约、API、公共库这些，服务就作为包消费者就可以了。</p><h2 id="最后">最后</h2><p>以上就是我使用conan一年来的一些总结和思考，希望对C++的同学有所帮助。conan是一个快速成长的开源项目，迭代非常快，我个人觉得很可能成为C++包管理的事实标准，非常看好它。另外C++本身在今年将迎来一个重量级版本C++20，其中模块、协程相信是大家期待已久的特性。随着C++自身的不断革新和周边工具的充实，我相信这些会”Make CPP great again!“。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关注C++的包管理有一段时间了，一直非常羡慕python、java的同学，有非常完善的包管理工具，使用第三方库非常方便。2016年底开始接触到conan，后来又发现vcpkg，两者都是github开源项目，前者后来得到jfrog的支持，其artifactory也增加了对conan包的支持，而后者是大牌microsoft维护的。&lt;/p&gt;
&lt;p&gt;conan和vcpkg的出现终于让人眼前一亮，经过1年的发展，到2018年它们相对成熟起来，而我们的产品也急剧膨胀，迫切需要包管理的机制，因此我下定决心将包管理引入到产品中。&lt;/p&gt;
&lt;p&gt;到底选择conan还是vcpkg，有两点使我们必须选择conan，一是跨平台，不仅要支持windows，还要支持linux，二是要能自建包服务器。当时的vcpkg还只能支持windows，当然后来的版本也支持linux了，而自建包服务器，vcpkg一直都不可以。后来证明这个选择是正确的。&lt;/p&gt;
    
    </summary>
    
      <category term="包管理" scheme="http://zhongpan.tech/categories/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="c++" scheme="http://zhongpan.tech/tags/c/"/>
    
      <category term="conan" scheme="http://zhongpan.tech/tags/conan/"/>
    
      <category term="包管理" scheme="http://zhongpan.tech/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
